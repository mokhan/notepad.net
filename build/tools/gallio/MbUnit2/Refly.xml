<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Refly</name>
    </assembly>
    <members>
        <member name="T:Refly.CodeDom.AttributeArgument">
            <summary>
            An attribute argument.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.AttributeDeclaration">
            <summary>
            An attribute declaration
            </summary>
        </member>
        <member name="T:Refly.CodeDom.ClassDeclaration">
            <summary>
            A class declaration
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Declaration">
            <summary>
            Abstract base class for declarations.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.ITypeDeclaration">
            <summary>
            A type declaration.
            </summary>
        </member>
        <member name="P:Refly.CodeDom.ITypeDeclaration.TypeReference">
            <summary>
            Gets the <see cref="T:System.CodeDom.CodeTypeReference"/> 
            </summary>
            <value>
            Corresponding <see cref="T:System.CodeDom.CodeTypeReference"/> instance.
            </value>
        </member>
        <member name="P:Refly.CodeDom.ITypeDeclaration.FullName">
            <summary>
            Gets the type full name.
            </summary>
            <value>
            Type full name
            </value>
        </member>
        <member name="P:Refly.CodeDom.ITypeDeclaration.Name">
            <summary>
            Gets the type name.
            </summary>
            <value>
            Type name
            </value>
        </member>
        <member name="P:Refly.CodeDom.ClassDeclaration.OutputType">
            <summary>
            Gets or sets the output type.
            </summary>
            <value>
            A <see cref="T:Refly.CodeDom.ClassOutputType"/> instance.
            </value>
        </member>
        <member name="T:Refly.CodeDom.ClassOutputType">
            <summary>
            Different possible output types
            </summary>
        </member>
        <member name="F:Refly.CodeDom.ClassOutputType.Class">
            <summary>
            Generates a class
            </summary>
        </member>
        <member name="F:Refly.CodeDom.ClassOutputType.Struct">
            <summary>
            Generates a struct
            </summary>
        </member>
        <member name="F:Refly.CodeDom.ClassOutputType.ClassAndInterface">
            <summary>
            Generates a class and it's interface
            </summary>
        </member>
        <member name="F:Refly.CodeDom.ClassOutputType.Interface">
            <summary>
            Generates the interface only
            </summary>
        </member>
        <member name="T:Refly.CodeDom.CodeGenerator">
            <summary>
            A class that controls the generation of code.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.AssemblyCollection">
            <summary>
            A collection of elements of type Assembly
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.AssemblyCollection.#ctor">
            <summary>
            Initializes a new empty instance of the AssemblyCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.AssemblyCollection.#ctor(System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the AssemblyCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new AssemblyCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.AssemblyCollection.#ctor(Refly.CodeDom.Collections.AssemblyCollection)">
            <summary>
            Initializes a new instance of the AssemblyCollection class, containing elements
            copied from another instance of AssemblyCollection
            </summary>
            <param name="items">
            The AssemblyCollection whose elements are to be added to the new AssemblyCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.AssemblyCollection.AddRange(System.Reflection.Assembly[])">
            <summary>
            Adds the elements of an array to the end of this AssemblyCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this AssemblyCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.AssemblyCollection.AddRange(Refly.CodeDom.Collections.AssemblyCollection)">
            <summary>
            Adds the elements of another AssemblyCollection to the end of this AssemblyCollection.
            </summary>
            <param name="items">
            The AssemblyCollection whose elements are to be added to the end of this AssemblyCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.AssemblyCollection.Add(System.Reflection.Assembly)">
            <summary>
            Adds an instance of type Assembly to the end of this AssemblyCollection.
            </summary>
            <param name="value">
            The Assembly to be added to the end of this AssemblyCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.AssemblyCollection.Contains(System.Reflection.Assembly)">
            <summary>
            Determines whether a specfic Assembly value is in this AssemblyCollection.
            </summary>
            <param name="value">
            The Assembly value to locate in this AssemblyCollection.
            </param>
            <returns>
            true if value is found in this AssemblyCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.AssemblyCollection.IndexOf(System.Reflection.Assembly)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this AssemblyCollection
            </summary>
            <param name="value">
            The Assembly value to locate in the AssemblyCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.AssemblyCollection.Insert(System.Int32,System.Reflection.Assembly)">
            <summary>
            Inserts an element into the AssemblyCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Assembly is to be inserted.
            </param>
            <param name="value">
            The Assembly to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.AssemblyCollection.Remove(System.Reflection.Assembly)">
            <summary>
            Removes the first occurrence of a specific Assembly from this AssemblyCollection.
            </summary>
            <param name="value">
            The Assembly value to remove from this AssemblyCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.AssemblyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this AssemblyCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.AssemblyCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Assembly at the given index in this AssemblyCollection.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.AssemblyCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by AssemblyCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.StringAttributeArgumentDictionary">
            <summary>
            A dictionary with keys of type string and values of type AttributeArgument
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringAttributeArgumentDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the StringAttributeArgumentDictionary class
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringAttributeArgumentDictionary.Add(System.String,Refly.CodeDom.Expressions.Expression)">
            <summary>
            Adds an element with the specified key and value to this StringAttributeArgumentDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The AttributeArgument value of the element to add.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringAttributeArgumentDictionary.Contains(System.String)">
            <summary>
            Determines whether this StringAttributeArgumentDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this StringAttributeArgumentDictionary.
            </param>
            <returns>
            true if this StringAttributeArgumentDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringAttributeArgumentDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this StringAttributeArgumentDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this StringAttributeArgumentDictionary.
            </param>
            <returns>
            true if this StringAttributeArgumentDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringAttributeArgumentDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this StringAttributeArgumentDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringAttributeArgumentDictionary.Item(System.String)">
            <summary>
            Gets or sets the AttributeArgument associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringAttributeArgumentDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this StringAttributeArgumentDictionary.
            </summary>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringAttributeArgumentDictionary.Values">
            <summary>
            Gets a collection containing the values in this StringAttributeArgumentDictionary.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.AttributeDeclarationCollection">
            <summary>
            A collection of elements of type AttributeDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.AttributeDeclarationCollection.#ctor">
            <summary>
            Initializes a new empty instance of the AttributeDeclarationCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.AttributeDeclarationCollection.Add(Refly.CodeDom.ITypeDeclaration)">
            <summary>
            Adds an instance of type AttributeDeclaration to the end of this AttributeDeclarationCollection.
            </summary>
            <param name="value">
            The AttributeDeclaration to be added to the end of this AttributeDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.AttributeDeclarationCollection.Contains(Refly.CodeDom.AttributeDeclaration)">
            <summary>
            Determines whether a specfic AttributeDeclaration value is in this AttributeDeclarationCollection.
            </summary>
            <param name="value">
            The AttributeDeclaration value to locate in this AttributeDeclarationCollection.
            </param>
            <returns>
            true if value is found in this AttributeDeclarationCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.AttributeDeclarationCollection.Insert(System.Int32,Refly.CodeDom.AttributeDeclaration)">
            <summary>
            Inserts an element into the AttributeDeclarationCollection at the specified index
            </summary>
            <param name="index">
            The index at which the AttributeDeclaration is to be inserted.
            </param>
            <param name="value">
            The AttributeDeclaration to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.AttributeDeclarationCollection.Remove(Refly.CodeDom.AttributeDeclaration)">
            <summary>
            Removes the first occurrence of a specific AttributeDeclaration from this AttributeDeclarationCollection.
            </summary>
            <param name="value">
            The AttributeDeclaration value to remove from this AttributeDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.AttributeDeclarationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this AttributeDeclarationCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:Refly.CodeDom.AttributeDeclarationCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by AttributeDeclarationCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.CatchClauseCollection">
            <summary>
            A collection of elements of type CatchClause
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.CatchClauseCollection.#ctor">
            <summary>
            Initializes a new empty instance of the CatchClauseCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.CatchClauseCollection.#ctor(Refly.CodeDom.Statements.CatchClause[])">
            <summary>
            Initializes a new instance of the CatchClauseCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new CatchClauseCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.CatchClauseCollection.#ctor(Refly.CodeDom.Collections.CatchClauseCollection)">
            <summary>
            Initializes a new instance of the CatchClauseCollection class, containing elements
            copied from another instance of CatchClauseCollection
            </summary>
            <param name="items">
            The CatchClauseCollection whose elements are to be added to the new CatchClauseCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.CatchClauseCollection.AddRange(Refly.CodeDom.Statements.CatchClause[])">
            <summary>
            Adds the elements of an array to the end of this CatchClauseCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this CatchClauseCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.CatchClauseCollection.AddRange(Refly.CodeDom.Collections.CatchClauseCollection)">
            <summary>
            Adds the elements of another CatchClauseCollection to the end of this CatchClauseCollection.
            </summary>
            <param name="items">
            The CatchClauseCollection whose elements are to be added to the end of this CatchClauseCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.CatchClauseCollection.Add(Refly.CodeDom.Statements.CatchClause)">
            <summary>
            Adds an instance of type CatchClause to the end of this CatchClauseCollection.
            </summary>
            <param name="value">
            The CatchClause to be added to the end of this CatchClauseCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.CatchClauseCollection.Contains(Refly.CodeDom.Statements.CatchClause)">
            <summary>
            Determines whether a specfic CatchClause value is in this CatchClauseCollection.
            </summary>
            <param name="value">
            The CatchClause value to locate in this CatchClauseCollection.
            </param>
            <returns>
            true if value is found in this CatchClauseCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.CatchClauseCollection.IndexOf(Refly.CodeDom.Statements.CatchClause)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this CatchClauseCollection
            </summary>
            <param name="value">
            The CatchClause value to locate in the CatchClauseCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.CatchClauseCollection.Insert(System.Int32,Refly.CodeDom.Statements.CatchClause)">
            <summary>
            Inserts an element into the CatchClauseCollection at the specified index
            </summary>
            <param name="index">
            The index at which the CatchClause is to be inserted.
            </param>
            <param name="value">
            The CatchClause to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.CatchClauseCollection.Remove(Refly.CodeDom.Statements.CatchClause)">
            <summary>
            Removes the first occurrence of a specific CatchClause from this CatchClauseCollection.
            </summary>
            <param name="value">
            The CatchClause value to remove from this CatchClauseCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.CatchClauseCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this CatchClauseCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.CatchClauseCollection.Item(System.Int32)">
            <summary>
            Gets or sets the CatchClause at the given index in this CatchClauseCollection.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.CatchClauseCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by CatchClauseCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.ConstructorDeclarationCollection">
            <summary>
            A collection of elements of type ConstructorDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.ConstructorDeclarationCollection.#ctor">
            <summary>
            Initializes a new empty instance of the ConstructorDeclarationCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.ConstructorDeclarationCollection.#ctor(Refly.CodeDom.ConstructorDeclaration[])">
            <summary>
            Initializes a new instance of the ConstructorDeclarationCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new ConstructorDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ConstructorDeclarationCollection.#ctor(Refly.CodeDom.Collections.ConstructorDeclarationCollection)">
            <summary>
            Initializes a new instance of the ConstructorDeclarationCollection class, containing elements
            copied from another instance of ConstructorDeclarationCollection
            </summary>
            <param name="items">
            The ConstructorDeclarationCollection whose elements are to be added to the new ConstructorDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ConstructorDeclarationCollection.AddRange(Refly.CodeDom.ConstructorDeclaration[])">
            <summary>
            Adds the elements of an array to the end of this ConstructorDeclarationCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this ConstructorDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ConstructorDeclarationCollection.AddRange(Refly.CodeDom.Collections.ConstructorDeclarationCollection)">
            <summary>
            Adds the elements of another ConstructorDeclarationCollection to the end of this ConstructorDeclarationCollection.
            </summary>
            <param name="items">
            The ConstructorDeclarationCollection whose elements are to be added to the end of this ConstructorDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ConstructorDeclarationCollection.Add(Refly.CodeDom.ConstructorDeclaration)">
            <summary>
            Adds an instance of type ConstructorDeclaration to the end of this ConstructorDeclarationCollection.
            </summary>
            <param name="value">
            The ConstructorDeclaration to be added to the end of this ConstructorDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ConstructorDeclarationCollection.Contains(Refly.CodeDom.ConstructorDeclaration)">
            <summary>
            Determines whether a specfic ConstructorDeclaration value is in this ConstructorDeclarationCollection.
            </summary>
            <param name="value">
            The ConstructorDeclaration value to locate in this ConstructorDeclarationCollection.
            </param>
            <returns>
            true if value is found in this ConstructorDeclarationCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.ConstructorDeclarationCollection.IndexOf(Refly.CodeDom.ConstructorDeclaration)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this ConstructorDeclarationCollection
            </summary>
            <param name="value">
            The ConstructorDeclaration value to locate in the ConstructorDeclarationCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.ConstructorDeclarationCollection.Insert(System.Int32,Refly.CodeDom.ConstructorDeclaration)">
            <summary>
            Inserts an element into the ConstructorDeclarationCollection at the specified index
            </summary>
            <param name="index">
            The index at which the ConstructorDeclaration is to be inserted.
            </param>
            <param name="value">
            The ConstructorDeclaration to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ConstructorDeclarationCollection.Remove(Refly.CodeDom.ConstructorDeclaration)">
            <summary>
            Removes the first occurrence of a specific ConstructorDeclaration from this ConstructorDeclarationCollection.
            </summary>
            <param name="value">
            The ConstructorDeclaration value to remove from this ConstructorDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ConstructorDeclarationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this ConstructorDeclarationCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.ConstructorDeclarationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ConstructorDeclaration at the given index in this ConstructorDeclarationCollection.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.ConstructorDeclarationCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by ConstructorDeclarationCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.DelegateDeclarationCollection">
            <summary>
            A collection of elements of type DelegateDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.#ctor">
            <summary>
            Initializes a new empty instance of the DelegateDeclarationCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.#ctor(Refly.CodeDom.DelegateDeclaration[])">
            <summary>
            Initializes a new instance of the DelegateDeclarationCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new DelegateDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.#ctor(Refly.CodeDom.Collections.DelegateDeclarationCollection)">
            <summary>
            Initializes a new instance of the DelegateDeclarationCollection class, containing elements
            copied from another instance of DelegateDeclarationCollection
            </summary>
            <param name="items">
            The DelegateDeclarationCollection whose elements are to be added to the new DelegateDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.AddRange(Refly.CodeDom.DelegateDeclaration[])">
            <summary>
            Adds the elements of an array to the end of this DelegateDeclarationCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this DelegateDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.AddRange(Refly.CodeDom.Collections.DelegateDeclarationCollection)">
            <summary>
            Adds the elements of another DelegateDeclarationCollection to the end of this DelegateDeclarationCollection.
            </summary>
            <param name="items">
            The DelegateDeclarationCollection whose elements are to be added to the end of this DelegateDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.Add(Refly.CodeDom.DelegateDeclaration)">
            <summary>
            Adds an instance of type DelegateDeclaration to the end of this DelegateDeclarationCollection.
            </summary>
            <param name="value">
            The DelegateDeclaration to be added to the end of this DelegateDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.Contains(Refly.CodeDom.DelegateDeclaration)">
            <summary>
            Determines whether a specfic DelegateDeclaration value is in this DelegateDeclarationCollection.
            </summary>
            <param name="value">
            The DelegateDeclaration value to locate in this DelegateDeclarationCollection.
            </param>
            <returns>
            true if value is found in this DelegateDeclarationCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.ContainsDelegateName(System.String)">
            <summary>
            Checks the existence of a method name.
            </summary>
            <remarks></remarks>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.IndexOf(Refly.CodeDom.DelegateDeclaration)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this DelegateDeclarationCollection
            </summary>
            <param name="value">
            The DelegateDeclaration value to locate in the DelegateDeclarationCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.Insert(System.Int32,Refly.CodeDom.DelegateDeclaration)">
            <summary>
            Inserts an element into the DelegateDeclarationCollection at the specified index
            </summary>
            <param name="index">
            The index at which the DelegateDeclaration is to be inserted.
            </param>
            <param name="value">
            The DelegateDeclaration to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.Remove(Refly.CodeDom.DelegateDeclaration)">
            <summary>
            Removes the first occurrence of a specific DelegateDeclaration from this DelegateDeclarationCollection.
            </summary>
            <param name="value">
            The DelegateDeclaration value to remove from this DelegateDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.DelegateDeclarationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this DelegateDeclarationCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.DelegateDeclarationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the DelegateDeclaration at the given index in this DelegateDeclarationCollection.
            </summary>
        </member>
        <member name="P:Refly.CodeDom.Collections.DelegateDeclarationCollection.Item(System.String)">
            <summary>
            Gets or sets the DelegateDeclaration with the given name in this DelegateDeclarationCollection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Refly.CodeDom.Collections.DelegateDeclarationCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by DelegateDeclarationCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.EventDeclarationCollection">
            <summary>
            A collection of elements of type EventDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.EventDeclarationCollection.#ctor">
            <summary>
            Initializes a new empty instance of the EventDeclarationCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.EventDeclarationCollection.#ctor(Refly.CodeDom.EventDeclaration[])">
            <summary>
            Initializes a new instance of the EventDeclarationCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new EventDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.EventDeclarationCollection.#ctor(Refly.CodeDom.Collections.EventDeclarationCollection)">
            <summary>
            Initializes a new instance of the EventDeclarationCollection class, containing elements
            copied from another instance of EventDeclarationCollection
            </summary>
            <param name="items">
            The EventDeclarationCollection whose elements are to be added to the new EventDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.EventDeclarationCollection.AddRange(Refly.CodeDom.EventDeclaration[])">
            <summary>
            Adds the elements of an array to the end of this EventDeclarationCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this EventDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.EventDeclarationCollection.AddRange(Refly.CodeDom.Collections.EventDeclarationCollection)">
            <summary>
            Adds the elements of another EventDeclarationCollection to the end of this EventDeclarationCollection.
            </summary>
            <param name="items">
            The EventDeclarationCollection whose elements are to be added to the end of this EventDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.EventDeclarationCollection.Add(Refly.CodeDom.EventDeclaration)">
            <summary>
            Adds an instance of type EventDeclaration to the end of this EventDeclarationCollection.
            </summary>
            <param name="value">
            The EventDeclaration to be added to the end of this EventDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.EventDeclarationCollection.Contains(Refly.CodeDom.EventDeclaration)">
            <summary>
            Determines whether a specfic EventDeclaration value is in this EventDeclarationCollection.
            </summary>
            <param name="value">
            The EventDeclaration value to locate in this EventDeclarationCollection.
            </param>
            <returns>
            true if value is found in this EventDeclarationCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.EventDeclarationCollection.IndexOf(Refly.CodeDom.EventDeclaration)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this EventDeclarationCollection
            </summary>
            <param name="value">
            The EventDeclaration value to locate in the EventDeclarationCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.EventDeclarationCollection.Insert(System.Int32,Refly.CodeDom.EventDeclaration)">
            <summary>
            Inserts an element into the EventDeclarationCollection at the specified index
            </summary>
            <param name="index">
            The index at which the EventDeclaration is to be inserted.
            </param>
            <param name="value">
            The EventDeclaration to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.EventDeclarationCollection.Remove(Refly.CodeDom.EventDeclaration)">
            <summary>
            Removes the first occurrence of a specific EventDeclaration from this EventDeclarationCollection.
            </summary>
            <param name="value">
            The EventDeclaration value to remove from this EventDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.EventDeclarationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this EventDeclarationCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.EventDeclarationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the EventDeclaration at the given index in this EventDeclarationCollection.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.EventDeclarationCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by EventDeclarationCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.ExpressionCollection">
            <summary>
            A collection of elements of type Expression
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.ExpressionCollection.#ctor">
            <summary>
            Initializes a new empty instance of the ExpressionCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.ExpressionCollection.#ctor(Refly.CodeDom.Expressions.Expression[])">
            <summary>
            Initializes a new instance of the ExpressionCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new ExpressionCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ExpressionCollection.#ctor(Refly.CodeDom.Collections.ExpressionCollection)">
            <summary>
            Initializes a new instance of the ExpressionCollection class, containing elements
            copied from another instance of ExpressionCollection
            </summary>
            <param name="items">
            The ExpressionCollection whose elements are to be added to the new ExpressionCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ExpressionCollection.AddRange(Refly.CodeDom.Expressions.Expression[])">
            <summary>
            Adds the elements of an array to the end of this ExpressionCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this ExpressionCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ExpressionCollection.AddRange(Refly.CodeDom.Collections.ExpressionCollection)">
            <summary>
            Adds the elements of another ExpressionCollection to the end of this ExpressionCollection.
            </summary>
            <param name="items">
            The ExpressionCollection whose elements are to be added to the end of this ExpressionCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ExpressionCollection.Add(Refly.CodeDom.Expressions.Expression)">
            <summary>
            Adds an instance of type Expression to the end of this ExpressionCollection.
            </summary>
            <param name="value">
            The Expression to be added to the end of this ExpressionCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ExpressionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this ExpressionCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:Refly.CodeDom.Collections.ExpressionCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by ExpressionCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.FieldDeclarationCollection">
            <summary>
            A collection of elements of type FieldDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.FieldDeclarationCollection.#ctor">
            <summary>
            Initializes a new empty instance of the FieldDeclarationCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.FieldDeclarationCollection.#ctor(Refly.CodeDom.FieldDeclaration[])">
            <summary>
            Initializes a new instance of the FieldDeclarationCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new FieldDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.FieldDeclarationCollection.#ctor(Refly.CodeDom.Collections.FieldDeclarationCollection)">
            <summary>
            Initializes a new instance of the FieldDeclarationCollection class, containing elements
            copied from another instance of FieldDeclarationCollection
            </summary>
            <param name="items">
            The FieldDeclarationCollection whose elements are to be added to the new FieldDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.FieldDeclarationCollection.AddRange(Refly.CodeDom.FieldDeclaration[])">
            <summary>
            Adds the elements of an array to the end of this FieldDeclarationCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this FieldDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.FieldDeclarationCollection.AddRange(Refly.CodeDom.Collections.FieldDeclarationCollection)">
            <summary>
            Adds the elements of another FieldDeclarationCollection to the end of this FieldDeclarationCollection.
            </summary>
            <param name="items">
            The FieldDeclarationCollection whose elements are to be added to the end of this FieldDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.FieldDeclarationCollection.Add(Refly.CodeDom.FieldDeclaration)">
            <summary>
            Adds an instance of type FieldDeclaration to the end of this FieldDeclarationCollection.
            </summary>
            <param name="value">
            The FieldDeclaration to be added to the end of this FieldDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.FieldDeclarationCollection.Contains(Refly.CodeDom.FieldDeclaration)">
            <summary>
            Determines whether a specfic FieldDeclaration value is in this FieldDeclarationCollection.
            </summary>
            <param name="value">
            The FieldDeclaration value to locate in this FieldDeclarationCollection.
            </param>
            <returns>
            true if value is found in this FieldDeclarationCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.FieldDeclarationCollection.IndexOf(Refly.CodeDom.FieldDeclaration)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this FieldDeclarationCollection
            </summary>
            <param name="value">
            The FieldDeclaration value to locate in the FieldDeclarationCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.FieldDeclarationCollection.Insert(System.Int32,Refly.CodeDom.FieldDeclaration)">
            <summary>
            Inserts an element into the FieldDeclarationCollection at the specified index
            </summary>
            <param name="index">
            The index at which the FieldDeclaration is to be inserted.
            </param>
            <param name="value">
            The FieldDeclaration to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.FieldDeclarationCollection.Remove(Refly.CodeDom.FieldDeclaration)">
            <summary>
            Removes the first occurrence of a specific FieldDeclaration from this FieldDeclarationCollection.
            </summary>
            <param name="value">
            The FieldDeclaration value to remove from this FieldDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.FieldDeclarationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this FieldDeclarationCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.FieldDeclarationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the FieldDeclaration at the given index in this FieldDeclarationCollection.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.FieldDeclarationCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by FieldDeclarationCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.IndexerDeclarationCollection">
            <summary>
            A collection of elements of type IndexerDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.IndexerDeclarationCollection.#ctor">
            <summary>
            Initializes a new empty instance of the IndexerDeclarationCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.IndexerDeclarationCollection.#ctor(Refly.CodeDom.IndexerDeclaration[])">
            <summary>
            Initializes a new instance of the IndexerDeclarationCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new IndexerDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.IndexerDeclarationCollection.#ctor(Refly.CodeDom.Collections.IndexerDeclarationCollection)">
            <summary>
            Initializes a new instance of the IndexerDeclarationCollection class, containing elements
            copied from another instance of IndexerDeclarationCollection
            </summary>
            <param name="items">
            The IndexerDeclarationCollection whose elements are to be added to the new IndexerDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.IndexerDeclarationCollection.AddRange(Refly.CodeDom.IndexerDeclaration[])">
            <summary>
            Adds the elements of an array to the end of this IndexerDeclarationCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this IndexerDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.IndexerDeclarationCollection.AddRange(Refly.CodeDom.Collections.IndexerDeclarationCollection)">
            <summary>
            Adds the elements of another IndexerDeclarationCollection to the end of this IndexerDeclarationCollection.
            </summary>
            <param name="items">
            The IndexerDeclarationCollection whose elements are to be added to the end of this IndexerDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.IndexerDeclarationCollection.Add(Refly.CodeDom.IndexerDeclaration)">
            <summary>
            Adds an instance of type IndexerDeclaration to the end of this IndexerDeclarationCollection.
            </summary>
            <param name="value">
            The IndexerDeclaration to be added to the end of this IndexerDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.IndexerDeclarationCollection.Contains(Refly.CodeDom.IndexerDeclaration)">
            <summary>
            Determines whether a specfic IndexerDeclaration value is in this IndexerDeclarationCollection.
            </summary>
            <param name="value">
            The IndexerDeclaration value to locate in this IndexerDeclarationCollection.
            </param>
            <returns>
            true if value is found in this IndexerDeclarationCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.IndexerDeclarationCollection.IndexOf(Refly.CodeDom.IndexerDeclaration)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this IndexerDeclarationCollection
            </summary>
            <param name="value">
            The IndexerDeclaration value to locate in the IndexerDeclarationCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.IndexerDeclarationCollection.Insert(System.Int32,Refly.CodeDom.IndexerDeclaration)">
            <summary>
            Inserts an element into the IndexerDeclarationCollection at the specified index
            </summary>
            <param name="index">
            The index at which the IndexerDeclaration is to be inserted.
            </param>
            <param name="value">
            The IndexerDeclaration to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.IndexerDeclarationCollection.Remove(Refly.CodeDom.IndexerDeclaration)">
            <summary>
            Removes the first occurrence of a specific IndexerDeclaration from this IndexerDeclarationCollection.
            </summary>
            <param name="value">
            The IndexerDeclaration value to remove from this IndexerDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.IndexerDeclarationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this IndexerDeclarationCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.IndexerDeclarationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the IndexerDeclaration at the given index in this IndexerDeclarationCollection.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.IndexerDeclarationCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by IndexerDeclarationCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.MethodDeclarationCollection">
            <summary>
            A collection of elements of type MethodDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.#ctor">
            <summary>
            Initializes a new empty instance of the MethodDeclarationCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.#ctor(Refly.CodeDom.MethodDeclaration[])">
            <summary>
            Initializes a new instance of the MethodDeclarationCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new MethodDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.#ctor(Refly.CodeDom.Collections.MethodDeclarationCollection)">
            <summary>
            Initializes a new instance of the MethodDeclarationCollection class, containing elements
            copied from another instance of MethodDeclarationCollection
            </summary>
            <param name="items">
            The MethodDeclarationCollection whose elements are to be added to the new MethodDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.AddRange(Refly.CodeDom.MethodDeclaration[])">
            <summary>
            Adds the elements of an array to the end of this MethodDeclarationCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this MethodDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.AddRange(Refly.CodeDom.Collections.MethodDeclarationCollection)">
            <summary>
            Adds the elements of another MethodDeclarationCollection to the end of this MethodDeclarationCollection.
            </summary>
            <param name="items">
            The MethodDeclarationCollection whose elements are to be added to the end of this MethodDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.Add(Refly.CodeDom.MethodDeclaration)">
            <summary>
            Adds an instance of type MethodDeclaration to the end of this MethodDeclarationCollection.
            </summary>
            <param name="value">
            The MethodDeclaration to be added to the end of this MethodDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.Contains(Refly.CodeDom.MethodDeclaration)">
            <summary>
            Determines whether a specfic MethodDeclaration value is in this MethodDeclarationCollection.
            </summary>
            <param name="value">
            The MethodDeclaration value to locate in this MethodDeclarationCollection.
            </param>
            <returns>
            true if value is found in this MethodDeclarationCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.ContainsMethodName(System.String)">
            <summary>
            Checks the existence of a method name.
            </summary>
            <remarks></remarks>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.IndexOf(Refly.CodeDom.MethodDeclaration)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this MethodDeclarationCollection
            </summary>
            <param name="value">
            The MethodDeclaration value to locate in the MethodDeclarationCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.Insert(System.Int32,Refly.CodeDom.MethodDeclaration)">
            <summary>
            Inserts an element into the MethodDeclarationCollection at the specified index
            </summary>
            <param name="index">
            The index at which the MethodDeclaration is to be inserted.
            </param>
            <param name="value">
            The MethodDeclaration to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.Remove(Refly.CodeDom.MethodDeclaration)">
            <summary>
            Removes the first occurrence of a specific MethodDeclaration from this MethodDeclarationCollection.
            </summary>
            <param name="value">
            The MethodDeclaration value to remove from this MethodDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.MethodDeclarationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this MethodDeclarationCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.MethodDeclarationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the MethodDeclaration at the given index in this MethodDeclarationCollection.
            </summary>
        </member>
        <member name="P:Refly.CodeDom.Collections.MethodDeclarationCollection.Item(System.String)">
            <summary>
            Gets or sets the MethodDeclaration with the given name in this MethodDeclarationCollection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Refly.CodeDom.Collections.MethodDeclarationCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by MethodDeclarationCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.ParameterDeclarationCollection">
            <summary>
            A collection of elements of type ParameterDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.ParameterDeclarationCollection.#ctor">
            <summary>
            Initializes a new empty instance of the ParameterDeclarationCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.ParameterDeclarationCollection.#ctor(Refly.CodeDom.ParameterDeclaration[])">
            <summary>
            Initializes a new instance of the ParameterDeclarationCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new ParameterDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ParameterDeclarationCollection.#ctor(Refly.CodeDom.Collections.ParameterDeclarationCollection)">
            <summary>
            Initializes a new instance of the ParameterDeclarationCollection class, containing elements
            copied from another instance of ParameterDeclarationCollection
            </summary>
            <param name="items">
            The ParameterDeclarationCollection whose elements are to be added to the new ParameterDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ParameterDeclarationCollection.AddRange(Refly.CodeDom.ParameterDeclaration[])">
            <summary>
            Adds the elements of an array to the end of this ParameterDeclarationCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this ParameterDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ParameterDeclarationCollection.AddRange(Refly.CodeDom.Collections.ParameterDeclarationCollection)">
            <summary>
            Adds the elements of another ParameterDeclarationCollection to the end of this ParameterDeclarationCollection.
            </summary>
            <param name="items">
            The ParameterDeclarationCollection whose elements are to be added to the end of this ParameterDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ParameterDeclarationCollection.Contains(Refly.CodeDom.ParameterDeclaration)">
            <summary>
            Determines whether a specfic ParameterDeclaration value is in this ParameterDeclarationCollection.
            </summary>
            <param name="value">
            The ParameterDeclaration value to locate in this ParameterDeclarationCollection.
            </param>
            <returns>
            true if value is found in this ParameterDeclarationCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.ParameterDeclarationCollection.IndexOf(Refly.CodeDom.ParameterDeclaration)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this ParameterDeclarationCollection
            </summary>
            <param name="value">
            The ParameterDeclaration value to locate in the ParameterDeclarationCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.ParameterDeclarationCollection.Insert(System.Int32,Refly.CodeDom.ParameterDeclaration)">
            <summary>
            Inserts an element into the ParameterDeclarationCollection at the specified index
            </summary>
            <param name="index">
            The index at which the ParameterDeclaration is to be inserted.
            </param>
            <param name="value">
            The ParameterDeclaration to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ParameterDeclarationCollection.Remove(Refly.CodeDom.ParameterDeclaration)">
            <summary>
            Removes the first occurrence of a specific ParameterDeclaration from this ParameterDeclarationCollection.
            </summary>
            <param name="value">
            The ParameterDeclaration value to remove from this ParameterDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ParameterDeclarationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this ParameterDeclarationCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.ParameterDeclarationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ParameterDeclaration at the given index in this ParameterDeclarationCollection.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.ParameterDeclarationCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by ParameterDeclarationCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.PropertyDeclarationCollection">
            <summary>
            A collection of elements of type PropertyDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.PropertyDeclarationCollection.#ctor">
            <summary>
            Initializes a new empty instance of the PropertyDeclarationCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.PropertyDeclarationCollection.#ctor(Refly.CodeDom.PropertyDeclaration[])">
            <summary>
            Initializes a new instance of the PropertyDeclarationCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new PropertyDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.PropertyDeclarationCollection.#ctor(Refly.CodeDom.Collections.PropertyDeclarationCollection)">
            <summary>
            Initializes a new instance of the PropertyDeclarationCollection class, containing elements
            copied from another instance of PropertyDeclarationCollection
            </summary>
            <param name="items">
            The PropertyDeclarationCollection whose elements are to be added to the new PropertyDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.PropertyDeclarationCollection.AddRange(Refly.CodeDom.PropertyDeclaration[])">
            <summary>
            Adds the elements of an array to the end of this PropertyDeclarationCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this PropertyDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.PropertyDeclarationCollection.AddRange(Refly.CodeDom.Collections.PropertyDeclarationCollection)">
            <summary>
            Adds the elements of another PropertyDeclarationCollection to the end of this PropertyDeclarationCollection.
            </summary>
            <param name="items">
            The PropertyDeclarationCollection whose elements are to be added to the end of this PropertyDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.PropertyDeclarationCollection.Add(Refly.CodeDom.PropertyDeclaration)">
            <summary>
            Adds an instance of type PropertyDeclaration to the end of this PropertyDeclarationCollection.
            </summary>
            <param name="value">
            The PropertyDeclaration to be added to the end of this PropertyDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.PropertyDeclarationCollection.Contains(Refly.CodeDom.PropertyDeclaration)">
            <summary>
            Determines whether a specfic PropertyDeclaration value is in this PropertyDeclarationCollection.
            </summary>
            <param name="value">
            The PropertyDeclaration value to locate in this PropertyDeclarationCollection.
            </param>
            <returns>
            true if value is found in this PropertyDeclarationCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.PropertyDeclarationCollection.IndexOf(Refly.CodeDom.PropertyDeclaration)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this PropertyDeclarationCollection
            </summary>
            <param name="value">
            The PropertyDeclaration value to locate in the PropertyDeclarationCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.PropertyDeclarationCollection.Insert(System.Int32,Refly.CodeDom.PropertyDeclaration)">
            <summary>
            Inserts an element into the PropertyDeclarationCollection at the specified index
            </summary>
            <param name="index">
            The index at which the PropertyDeclaration is to be inserted.
            </param>
            <param name="value">
            The PropertyDeclaration to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.PropertyDeclarationCollection.Remove(Refly.CodeDom.PropertyDeclaration)">
            <summary>
            Removes the first occurrence of a specific PropertyDeclaration from this PropertyDeclarationCollection.
            </summary>
            <param name="value">
            The PropertyDeclaration value to remove from this PropertyDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.PropertyDeclarationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this PropertyDeclarationCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.PropertyDeclarationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the PropertyDeclaration at the given index in this PropertyDeclarationCollection.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.PropertyDeclarationCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by PropertyDeclarationCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.StatementCollection">
            <summary>
            A collection of elements of type Statement
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StatementCollection.#ctor">
            <summary>
            Initializes a new empty instance of the StatementCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StatementCollection.#ctor(Refly.CodeDom.Statements.Statement[])">
            <summary>
            Initializes a new instance of the StatementCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new StatementCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.StatementCollection.#ctor(Refly.CodeDom.Collections.StatementCollection)">
            <summary>
            Initializes a new instance of the StatementCollection class, containing elements
            copied from another instance of StatementCollection
            </summary>
            <param name="items">
            The StatementCollection whose elements are to be added to the new StatementCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.StatementCollection.AddRange(Refly.CodeDom.Statements.Statement[])">
            <summary>
            Adds the elements of an array to the end of this StatementCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this StatementCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.StatementCollection.AddRange(Refly.CodeDom.Collections.StatementCollection)">
            <summary>
            Adds the elements of another StatementCollection to the end of this StatementCollection.
            </summary>
            <param name="items">
            The StatementCollection whose elements are to be added to the end of this StatementCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.StatementCollection.Add(Refly.CodeDom.Statements.Statement)">
            <summary>
            Adds an instance of type Statement to the end of this StatementCollection.
            </summary>
            <param name="value">
            The Statement to be added to the end of this StatementCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.StatementCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this StatementCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="T:Refly.CodeDom.Collections.StatementCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by StatementCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.StringClassDeclarationDictionary">
            <summary>
            A dictionary with keys of type String and values of type ClassDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringClassDeclarationDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the StringClassDeclarationDictionary class
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringClassDeclarationDictionary.Add(Refly.CodeDom.ClassDeclaration)">
            <summary>
            Adds an element with the specified key and value to this StringClassDeclarationDictionary.
            </summary>
            <param name="key">
            The String key of the element to add.
            </param>
            <param name="value">
            The ClassDeclaration value of the element to add.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringClassDeclarationDictionary.Contains(System.String)">
            <summary>
            Determines whether this StringClassDeclarationDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringClassDeclarationDictionary.
            </param>
            <returns>
            true if this StringClassDeclarationDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringClassDeclarationDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this StringClassDeclarationDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringClassDeclarationDictionary.
            </param>
            <returns>
            true if this StringClassDeclarationDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringClassDeclarationDictionary.ContainsValue(Refly.CodeDom.ClassDeclaration)">
            <summary>
            Determines whether this StringClassDeclarationDictionary contains a specific value.
            </summary>
            <param name="value">
            The ClassDeclaration value to locate in this StringClassDeclarationDictionary.
            </param>
            <returns>
            true if this StringClassDeclarationDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringClassDeclarationDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this StringClassDeclarationDictionary.
            </summary>
            <param name="key">
            The String key of the element to remove.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringClassDeclarationDictionary.Item(System.String)">
            <summary>
            Gets or sets the ClassDeclaration associated with the given String
            </summary>
            <param name="key">
            The String whose value to get or set.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringClassDeclarationDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this StringClassDeclarationDictionary.
            </summary>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringClassDeclarationDictionary.Values">
            <summary>
            Gets a collection containing the values in this StringClassDeclarationDictionary.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.StringConstantDeclaration">
            <summary>
            A dictionary with keys of type String and values of type ConstantDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringConstantDeclaration.#ctor">
            <summary>
            Initializes a new empty instance of the StringConstantDeclaration class
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringConstantDeclaration.Add(Refly.CodeDom.ConstantDeclaration)">
            <summary>
            Adds an element with the specified key and value to this StringConstantDeclaration.
            </summary>
            <param name="key">
            The String key of the element to add.
            </param>
            <param name="value">
            The ConstantDeclaration value of the element to add.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringConstantDeclaration.Contains(System.String)">
            <summary>
            Determines whether this StringConstantDeclaration contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringConstantDeclaration.
            </param>
            <returns>
            true if this StringConstantDeclaration contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringConstantDeclaration.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this StringConstantDeclaration.
            </summary>
            <param name="key">
            The String key of the element to remove.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringConstantDeclaration.Item(System.String)">
            <summary>
            Gets or sets the ConstantDeclaration associated with the given String
            </summary>
            <param name="key">
            The String whose value to get or set.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringConstantDeclaration.Keys">
            <summary>
            Gets a collection containing the keys in this StringConstantDeclaration.
            </summary>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringConstantDeclaration.Values">
            <summary>
            Gets a collection containing the values in this StringConstantDeclaration.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.StringEnumDeclarationDictionary">
            <summary>
            A dictionary with keys of type String and values of type EnumDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringEnumDeclarationDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the StringEnumDeclarationDictionary class
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringEnumDeclarationDictionary.Add(Refly.CodeDom.EnumDeclaration)">
            <summary>
            Adds an element with the specified key and value to this StringEnumDeclarationDictionary.
            </summary>
            <param name="key">
            The String key of the element to add.
            </param>
            <param name="value">
            The EnumDeclaration value of the element to add.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringEnumDeclarationDictionary.Contains(System.String)">
            <summary>
            Determines whether this StringEnumDeclarationDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringEnumDeclarationDictionary.
            </param>
            <returns>
            true if this StringEnumDeclarationDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringEnumDeclarationDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this StringEnumDeclarationDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringEnumDeclarationDictionary.
            </param>
            <returns>
            true if this StringEnumDeclarationDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringEnumDeclarationDictionary.ContainsValue(Refly.CodeDom.EnumDeclaration)">
            <summary>
            Determines whether this StringEnumDeclarationDictionary contains a specific value.
            </summary>
            <param name="value">
            The EnumDeclaration value to locate in this StringEnumDeclarationDictionary.
            </param>
            <returns>
            true if this StringEnumDeclarationDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringEnumDeclarationDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this StringEnumDeclarationDictionary.
            </summary>
            <param name="key">
            The String key of the element to remove.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringEnumDeclarationDictionary.Item(System.String)">
            <summary>
            Gets or sets the EnumDeclaration associated with the given String
            </summary>
            <param name="key">
            The String whose value to get or set.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringEnumDeclarationDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this StringEnumDeclarationDictionary.
            </summary>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringEnumDeclarationDictionary.Values">
            <summary>
            Gets a collection containing the values in this StringEnumDeclarationDictionary.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.StringFieldDeclarationDictionary">
            <summary>
            A dictionary with keys of type String and values of type FieldDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringFieldDeclarationDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the StringFieldDeclarationDictionary class
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringFieldDeclarationDictionary.Add(Refly.CodeDom.FieldDeclaration)">
            <summary>
            Adds an element with the specified key and value to this StringFieldDeclarationDictionary.
            </summary>
            <param name="key">
            The String key of the element to add.
            </param>
            <param name="value">
            The FieldDeclaration value of the element to add.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringFieldDeclarationDictionary.Contains(System.String)">
            <summary>
            Determines whether this StringFieldDeclarationDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringFieldDeclarationDictionary.
            </param>
            <returns>
            true if this StringFieldDeclarationDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringFieldDeclarationDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this StringFieldDeclarationDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringFieldDeclarationDictionary.
            </param>
            <returns>
            true if this StringFieldDeclarationDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringFieldDeclarationDictionary.ContainsValue(Refly.CodeDom.FieldDeclaration)">
            <summary>
            Determines whether this StringFieldDeclarationDictionary contains a specific value.
            </summary>
            <param name="value">
            The FieldDeclaration value to locate in this StringFieldDeclarationDictionary.
            </param>
            <returns>
            true if this StringFieldDeclarationDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringFieldDeclarationDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this StringFieldDeclarationDictionary.
            </summary>
            <param name="key">
            The String key of the element to remove.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringFieldDeclarationDictionary.Item(System.String)">
            <summary>
            Gets or sets the FieldDeclaration associated with the given String
            </summary>
            <param name="key">
            The String whose value to get or set.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringFieldDeclarationDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this StringFieldDeclarationDictionary.
            </summary>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringFieldDeclarationDictionary.Values">
            <summary>
            Gets a collection containing the values in this StringFieldDeclarationDictionary.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.StringNamespaceDeclarationDictionary">
            <summary>
            A dictionary with keys of type String and values of type NamespaceDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringNamespaceDeclarationDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the StringNamespaceDeclarationDictionary class
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringNamespaceDeclarationDictionary.Add(System.String,Refly.CodeDom.NamespaceDeclaration)">
            <summary>
            Adds an element with the specified key and value to this StringNamespaceDeclarationDictionary.
            </summary>
            <param name="key">
            The String key of the element to add.
            </param>
            <param name="value">
            The NamespaceDeclaration value of the element to add.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringNamespaceDeclarationDictionary.Contains(System.String)">
            <summary>
            Determines whether this StringNamespaceDeclarationDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringNamespaceDeclarationDictionary.
            </param>
            <returns>
            true if this StringNamespaceDeclarationDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringNamespaceDeclarationDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this StringNamespaceDeclarationDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringNamespaceDeclarationDictionary.
            </param>
            <returns>
            true if this StringNamespaceDeclarationDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringNamespaceDeclarationDictionary.ContainsValue(Refly.CodeDom.NamespaceDeclaration)">
            <summary>
            Determines whether this StringNamespaceDeclarationDictionary contains a specific value.
            </summary>
            <param name="value">
            The NamespaceDeclaration value to locate in this StringNamespaceDeclarationDictionary.
            </param>
            <returns>
            true if this StringNamespaceDeclarationDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.StringNamespaceDeclarationDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this StringNamespaceDeclarationDictionary.
            </summary>
            <param name="key">
            The String key of the element to remove.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringNamespaceDeclarationDictionary.Item(System.String)">
            <summary>
            Gets or sets the NamespaceDeclaration associated with the given String
            </summary>
            <param name="key">
            The String whose value to get or set.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringNamespaceDeclarationDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this StringNamespaceDeclarationDictionary.
            </summary>
        </member>
        <member name="P:Refly.CodeDom.Collections.StringNamespaceDeclarationDictionary.Values">
            <summary>
            Gets a collection containing the values in this StringNamespaceDeclarationDictionary.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection">
            <summary>
            A collection of elements of type ThrowedExceptionDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.#ctor">
            <summary>
            Initializes a new empty instance of the ThrowedExceptionDeclarationCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.#ctor(Refly.CodeDom.ThrowedExceptionDeclaration[])">
            <summary>
            Initializes a new instance of the ThrowedExceptionDeclarationCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new ThrowedExceptionDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.#ctor(Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection)">
            <summary>
            Initializes a new instance of the ThrowedExceptionDeclarationCollection class, containing elements
            copied from another instance of ThrowedExceptionDeclarationCollection
            </summary>
            <param name="items">
            The ThrowedExceptionDeclarationCollection whose elements are to be added to the new ThrowedExceptionDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.AddRange(Refly.CodeDom.ThrowedExceptionDeclaration[])">
            <summary>
            Adds the elements of an array to the end of this ThrowedExceptionDeclarationCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this ThrowedExceptionDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.AddRange(Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection)">
            <summary>
            Adds the elements of another ThrowedExceptionDeclarationCollection to the end of this ThrowedExceptionDeclarationCollection.
            </summary>
            <param name="items">
            The ThrowedExceptionDeclarationCollection whose elements are to be added to the end of this ThrowedExceptionDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.Add(Refly.CodeDom.ThrowedExceptionDeclaration)">
            <summary>
            Adds an instance of type ThrowedExceptionDeclaration to the end of this ThrowedExceptionDeclarationCollection.
            </summary>
            <param name="value">
            The ThrowedExceptionDeclaration to be added to the end of this ThrowedExceptionDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.Contains(Refly.CodeDom.ThrowedExceptionDeclaration)">
            <summary>
            Determines whether a specfic ThrowedExceptionDeclaration value is in this ThrowedExceptionDeclarationCollection.
            </summary>
            <param name="value">
            The ThrowedExceptionDeclaration value to locate in this ThrowedExceptionDeclarationCollection.
            </param>
            <returns>
            true if value is found in this ThrowedExceptionDeclarationCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.IndexOf(Refly.CodeDom.ThrowedExceptionDeclaration)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this ThrowedExceptionDeclarationCollection
            </summary>
            <param name="value">
            The ThrowedExceptionDeclaration value to locate in the ThrowedExceptionDeclarationCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.Insert(System.Int32,Refly.CodeDom.ThrowedExceptionDeclaration)">
            <summary>
            Inserts an element into the ThrowedExceptionDeclarationCollection at the specified index
            </summary>
            <param name="index">
            The index at which the ThrowedExceptionDeclaration is to be inserted.
            </param>
            <param name="value">
            The ThrowedExceptionDeclaration to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.Remove(Refly.CodeDom.ThrowedExceptionDeclaration)">
            <summary>
            Removes the first occurrence of a specific ThrowedExceptionDeclaration from this ThrowedExceptionDeclarationCollection.
            </summary>
            <param name="value">
            The ThrowedExceptionDeclaration value to remove from this ThrowedExceptionDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this ThrowedExceptionDeclarationCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ThrowedExceptionDeclaration at the given index in this ThrowedExceptionDeclarationCollection.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.ThrowedExceptionDeclarationCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by ThrowedExceptionDeclarationCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.TypeCollection">
            <summary>
            A collection of elements of type Type
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeCollection.#ctor">
            <summary>
            Initializes a new empty instance of the TypeCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeCollection.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the TypeCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new TypeCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeCollection.#ctor(Refly.CodeDom.Collections.TypeCollection)">
            <summary>
            Initializes a new instance of the TypeCollection class, containing elements
            copied from another instance of TypeCollection
            </summary>
            <param name="items">
            The TypeCollection whose elements are to be added to the new TypeCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeCollection.AddRange(System.Type[])">
            <summary>
            Adds the elements of an array to the end of this TypeCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this TypeCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeCollection.AddRange(Refly.CodeDom.Collections.TypeCollection)">
            <summary>
            Adds the elements of another TypeCollection to the end of this TypeCollection.
            </summary>
            <param name="items">
            The TypeCollection whose elements are to be added to the end of this TypeCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeCollection.Add(System.Type)">
            <summary>
            Adds an instance of type Type to the end of this TypeCollection.
            </summary>
            <param name="value">
            The Type to be added to the end of this TypeCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeCollection.Contains(System.Type)">
            <summary>
            Determines whether a specfic Type value is in this TypeCollection.
            </summary>
            <param name="value">
            The Type value to locate in this TypeCollection.
            </param>
            <returns>
            true if value is found in this TypeCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeCollection.IndexOf(System.Type)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this TypeCollection
            </summary>
            <param name="value">
            The Type value to locate in the TypeCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeCollection.Insert(System.Int32,System.Type)">
            <summary>
            Inserts an element into the TypeCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Type is to be inserted.
            </param>
            <param name="value">
            The Type to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeCollection.Remove(System.Type)">
            <summary>
            Removes the first occurrence of a specific Type from this TypeCollection.
            </summary>
            <param name="value">
            The Type value to remove from this TypeCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this TypeCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.TypeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Type at the given index in this TypeCollection.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.TypeCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by TypeCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.TypeDeclarationCollection">
            <summary>
            A collection of elements of type ITypeDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeDeclarationCollection.#ctor">
            <summary>
            Initializes a new empty instance of the TypeDeclarationCollection class.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeDeclarationCollection.#ctor(Refly.CodeDom.ITypeDeclaration[])">
            <summary>
            Initializes a new instance of the TypeDeclarationCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new TypeDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeDeclarationCollection.#ctor(Refly.CodeDom.Collections.TypeDeclarationCollection)">
            <summary>
            Initializes a new instance of the TypeDeclarationCollection class, containing elements
            copied from another instance of TypeDeclarationCollection
            </summary>
            <param name="items">
            The TypeDeclarationCollection whose elements are to be added to the new TypeDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeDeclarationCollection.AddRange(Refly.CodeDom.ITypeDeclaration[])">
            <summary>
            Adds the elements of an array to the end of this TypeDeclarationCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this TypeDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeDeclarationCollection.AddRange(Refly.CodeDom.Collections.TypeDeclarationCollection)">
            <summary>
            Adds the elements of another TypeDeclarationCollection to the end of this TypeDeclarationCollection.
            </summary>
            <param name="items">
            The TypeDeclarationCollection whose elements are to be added to the end of this TypeDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeDeclarationCollection.Add(Refly.CodeDom.ITypeDeclaration)">
            <summary>
            Adds an instance of type ITypeDeclaration to the end of this TypeDeclarationCollection.
            </summary>
            <param name="value">
            The ITypeDeclaration to be added to the end of this TypeDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeDeclarationCollection.Contains(Refly.CodeDom.ITypeDeclaration)">
            <summary>
            Determines whether a specfic ITypeDeclaration value is in this TypeDeclarationCollection.
            </summary>
            <param name="value">
            The ITypeDeclaration value to locate in this TypeDeclarationCollection.
            </param>
            <returns>
            true if value is found in this TypeDeclarationCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeDeclarationCollection.IndexOf(Refly.CodeDom.ITypeDeclaration)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this TypeDeclarationCollection
            </summary>
            <param name="value">
            The ITypeDeclaration value to locate in the TypeDeclarationCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeDeclarationCollection.Insert(System.Int32,Refly.CodeDom.ITypeDeclaration)">
            <summary>
            Inserts an element into the TypeDeclarationCollection at the specified index
            </summary>
            <param name="index">
            The index at which the ITypeDeclaration is to be inserted.
            </param>
            <param name="value">
            The ITypeDeclaration to insert.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeDeclarationCollection.Remove(Refly.CodeDom.ITypeDeclaration)">
            <summary>
            Removes the first occurrence of a specific ITypeDeclaration from this TypeDeclarationCollection.
            </summary>
            <param name="value">
            The ITypeDeclaration value to remove from this TypeDeclarationCollection.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeDeclarationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this TypeDeclarationCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:Refly.CodeDom.Collections.TypeDeclarationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ITypeDeclaration at the given index in this TypeDeclarationCollection.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.TypeDeclarationCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by TypeDeclarationCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Collections.TypeTypeDeclarationDictionary">
            <summary>
            A dictionary with keys of type Type and values of type ITypeDeclaration
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeTypeDeclarationDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the TypeTypeDeclarationDictionary class
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeTypeDeclarationDictionary.Add(System.Type,Refly.CodeDom.ITypeDeclaration)">
            <summary>
            Adds an element with the specified key and value to this TypeTypeDeclarationDictionary.
            </summary>
            <param name="key">
            The Type key of the element to add.
            </param>
            <param name="value">
            The ITypeDeclaration value of the element to add.
            </param>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeTypeDeclarationDictionary.Contains(System.Type)">
            <summary>
            Determines whether this TypeTypeDeclarationDictionary contains a specific key.
            </summary>
            <param name="key">
            The Type key to locate in this TypeTypeDeclarationDictionary.
            </param>
            <returns>
            true if this TypeTypeDeclarationDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeTypeDeclarationDictionary.ContainsKey(System.Type)">
            <summary>
            Determines whether this TypeTypeDeclarationDictionary contains a specific key.
            </summary>
            <param name="key">
            The Type key to locate in this TypeTypeDeclarationDictionary.
            </param>
            <returns>
            true if this TypeTypeDeclarationDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeTypeDeclarationDictionary.ContainsValue(Refly.CodeDom.ITypeDeclaration)">
            <summary>
            Determines whether this TypeTypeDeclarationDictionary contains a specific value.
            </summary>
            <param name="value">
            The ITypeDeclaration value to locate in this TypeTypeDeclarationDictionary.
            </param>
            <returns>
            true if this TypeTypeDeclarationDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Collections.TypeTypeDeclarationDictionary.Remove(System.Type)">
            <summary>
            Removes the element with the specified key from this TypeTypeDeclarationDictionary.
            </summary>
            <param name="key">
            The Type key of the element to remove.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.TypeTypeDeclarationDictionary.Item(System.Type)">
            <summary>
            Gets or sets the ITypeDeclaration associated with the given Type
            </summary>
            <param name="key">
            The Type whose value to get or set.
            </param>
        </member>
        <member name="P:Refly.CodeDom.Collections.TypeTypeDeclarationDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this TypeTypeDeclarationDictionary.
            </summary>
        </member>
        <member name="P:Refly.CodeDom.Collections.TypeTypeDeclarationDictionary.Values">
            <summary>
            Gets a collection containing the values in this TypeTypeDeclarationDictionary.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.ConstantDeclaration">
            <summary>
            A constant value declaration.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.MemberDeclaration">
            <summary>
            Abstract class for member declaration
            </summary>
        </member>
        <member name="T:Refly.CodeDom.ConstructorDeclaration">
            <summary>
            A constructor declaration
            </summary>
        </member>
        <member name="T:Refly.CodeDom.DelegateDeclaration">
            <summary>
            A delegate declaration
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Doc.TypeFinder">
            <summary>
            Summary description for TypeFinder.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Doc.XmlMarkup">
            <summary>
            Summary description for XmlMarkup.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.EnumDeclaration">
            <summary>
            A enum declaration
            </summary>
        </member>
        <member name="T:Refly.CodeDom.EventDeclaration">
            <summary>
            A event declaration.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expr">
            <summary>
            Helper class containing static methods to create <see cref="T:Refly.CodeDom.Expressions.Expression"/>
            instances.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Expr.New(System.String,Refly.CodeDom.Expressions.Expression[])">
            <summary>
            Creates a <c>new type(...)</c> expression.
            </summary>
            <param name="type">
            Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/> name.
            </param>
            <param name="parameters">
            Parameters of the construcotr.
            </param>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.New&quot;]"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Noting in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.New(System.Type,Refly.CodeDom.Expressions.Expression[])">
            <summary>
            Creates a <c>new type(...)</c> expression.
            </summary>
            <param name="type">
            Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/>.
            </param>
            <param name="parameters">
            Parameters of the construcotr.
            </param>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.New&quot;]"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Noting in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.New(Refly.CodeDom.ITypeDeclaration,Refly.CodeDom.Expressions.Expression[])">
            <summary>
            Creates a <c>new t(...)</c> expression.
            </summary>
            <param name="type">
            Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/>.
            </param>
            <param name="parameters">
            Parameters of the construcotr.
            </param>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.New&quot;]"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Noting in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.NewArray(System.Type,System.Int32)">
            <summary>
            Creates a <c>new type[size]</c> expression
            </summary>
            <param name="type">Array item type</param>
            <param name="size">Array size</param>
            <returns>A <see cref="T:Refly.CodeDom.Expressions.ArrayCreationWithSizeExpression"/> instance</returns>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.NewArray&quot;]"/>
            <exception cref="!:ArgumentNullExpression">
            <paramref name="type"/> is a null reference.
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.NewArray(System.String,System.Int32)">
            <summary>
            Creates a <c>new type[size]</c> expression
            </summary>
            <param name="type">Array item type</param>
            <param name="size">Array size</param>
            <returns>A <see cref="T:Refly.CodeDom.Expressions.ArrayCreationWithSizeExpression"/> instance</returns>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.NewArray&quot;]"/>
            <exception cref="!:ArgumentNullExpression">
            <paramref name="type"/> is a null reference.
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.NewArray(Refly.CodeDom.ITypeDeclaration,System.Int32)">
            <summary>
            Creates a <c>new type[size]</c> expression
            </summary>
            <param name="type">Array item type</param>
            <param name="size">Array size</param>
            <returns>A <see cref="T:Refly.CodeDom.Expressions.ArrayCreationWithSizeExpression"/> instance</returns>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.NewArray&quot;]"/>
            <exception cref="!:ArgumentNullExpression">
            <paramref name="type"/> is a null reference.
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.NewArray(System.Type,Refly.CodeDom.Expressions.Expression)">
            <summary>
            Creates a <c>new type[expression]</c> expression
            </summary>
            <param name="type">Array item type</param>
            <param name="sizeExpression">Array size <see cref="T:Refly.CodeDom.Expressions.Expression"/></param>
            <returns>A <see cref="T:Refly.CodeDom.Expressions.ArrayCreationWithSizeExpression"/> instance</returns>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.NewArray&quot;]"/>
            <exception cref="!:ArgumentNullExpression">
            <paramref name="type"/> or <paramref name="sizeExpression"/>
            is a null reference.
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.NewArray(System.String,Refly.CodeDom.Expressions.Expression)">
            <summary>
            Creates a <c>new type[expression]</c> expression
            </summary>
            <param name="type">Array item type</param>
            <param name="sizeExpression">Array size <see cref="T:Refly.CodeDom.Expressions.Expression"/></param>
            <returns>A <see cref="T:Refly.CodeDom.Expressions.ArrayCreationWithSizeExpression"/> instance</returns>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.NewArray&quot;]"/>
            <exception cref="!:ArgumentNullExpression">
            <paramref name="type"/> or <paramref name="sizeExpression"/>
            is a null reference.
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.NewArray(Refly.CodeDom.ITypeDeclaration,Refly.CodeDom.Expressions.Expression)">
            <summary>
            Creates a <c>new type[expression]</c> expression
            </summary>
            <param name="type">Array item type</param>
            <param name="sizeExpression">Array size <see cref="T:Refly.CodeDom.Expressions.Expression"/></param>
            <returns>A <see cref="T:Refly.CodeDom.Expressions.ArrayCreationWithSizeExpression"/> instance</returns>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.NewArray&quot;]"/>
            <exception cref="!:ArgumentNullExpression">
            <paramref name="type"/> or <paramref name="sizeExpression"/>
            is a null reference.
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.NewArray(System.Type,Refly.CodeDom.Expressions.Expression[])">
            <summary>
            Creates a <c>new type[] { initializers }</c> expression
            </summary>
            <param name="type">Array item type</param>
            <param name="">Array items</param>
            <returns>A <see cref="T:Refly.CodeDom.Expressions.ArrayCreationWithInitializersExpression"/> instance</returns>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.NewArray&quot;]"/>
            <exception cref="!:ArgumentNullExpression">
            <paramref name="type"/> is a null reference.
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.NewArray(System.String,Refly.CodeDom.Expressions.Expression[])">
            <summary>
            Creates a <c>new type[] { initializers }</c> expression
            </summary>
            <param name="type">Array item type</param>
            <param name="">Array items</param>
            <returns>A <see cref="T:Refly.CodeDom.Expressions.ArrayCreationWithInitializersExpression"/> instance</returns>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.NewArray&quot;]"/>
            <exception cref="!:ArgumentNullExpression">
            <paramref name="type"/> is a null reference.
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.NewArray(Refly.CodeDom.ITypeDeclaration,Refly.CodeDom.Expressions.Expression[])">
            <summary>
            Creates a <c>new type[] { initializers }</c> expression
            </summary>
            <param name="type">Array item type</param>
            <param name="">Array items</param>
            <returns>A <see cref="T:Refly.CodeDom.Expressions.ArrayCreationWithInitializersExpression"/> instance</returns>
            <!-- No matching elements were found for the following include tag --><include file="Refly.CodeDom.Doc.xml" path="doc/remarkss/remark[@name=&quot;Expr.NewArray&quot;]"/>
            <exception cref="!:ArgumentNullExpression">
            <paramref name="type"/> is a null reference.
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.Arg(Refly.CodeDom.ParameterDeclaration)">
            <summary>
            Creates a reference to a given argument
            </summary>
            <param name="p">
            The <see cref="T:Refly.CodeDom.ParameterDeclaration"/> instance to reference.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.ArgumentReferenceExpression"/> instance referencing
            <paramref name="p"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="p"/> is a null reference (Noting in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.Var(Refly.CodeDom.Statements.VariableDeclarationStatement)">
            <summary>
            Creates a reference to a given variable
            </summary>
            <param name="p">
            The <see cref="T:Refly.CodeDom.Statements.VariableDeclarationStatement"/> instance to reference.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.VariableReferenceExpression"/> instance referencing
            <paramref name="v"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="v"/> is a null reference (Noting in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.Prim(System.Boolean)">
            <summary>
            Creates a primitive <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">
            <see cref="T:System.Boolean"/> value to generate.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.PrimitiveExpression"/> instance that
            will generate the value.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Expr.Prim(System.String)">
            <summary>
            Creates a primitive <see cref="T:System.String"/> value.
            </summary>
            <param name="value">
            <see cref="T:System.String"/> value to generate.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.PrimitiveExpression"/> instance that
            will generate the value.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Expr.Prim(System.Int32)">
            <summary>
            Creates a primitive <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">
            <see cref="T:System.Int32"/> value to generate.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.PrimitiveExpression"/> instance that
            will generate the value.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Expr.Prim(System.Int64)">
            <summary>
            Creates a primitive <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">
            <see cref="T:System.Int64"/> value to generate.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.PrimitiveExpression"/> instance that
            will generate the value.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Expr.Prim(System.Decimal)">
            <summary>
            Creates a primitive <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">
            <see cref="T:System.Decimal"/> value to generate.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.PrimitiveExpression"/> instance that
            will generate the value.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Expr.Prim(System.Double)">
            <summary>
            Creates a primitive <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">
            <see cref="T:System.Double"/> value to generate.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.PrimitiveExpression"/> instance that
            will generate the value.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Expr.Prim(System.Int16)">
            <summary>
            Creates a primitive <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">
            <see cref="T:System.Int16"/> value to generate.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.PrimitiveExpression"/> instance that
            will generate the value.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Expr.Prim(System.Byte)">
            <summary>
            Creates a primitive <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">
            <see cref="T:System.Byte"/> value to generate.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.PrimitiveExpression"/> instance that
            will generate the value.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Expr.Prim(System.DateTime)">
            <summary>
            Creates a primitive <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">
            <see cref="T:System.DateTime"/> value to generate.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.PrimitiveExpression"/> instance that
            will generate the value.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Expr.Cast(System.String,Refly.CodeDom.Expressions.Expression)">
            <summary>
            Creates a case of the <see cref="T:Refly.CodeDom.Expressions.Expression"/> 
            <paramref name="e"/> to the <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/> 
            <paramref name="type"/>.
            </summary>
            <param name="type">Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/></param>
            <param name="e"><see cref="T:Refly.CodeDom.Expressions.Expression"/> instance to case</param>
            <returns>
            A <see cref="!:CastExpressoin"/> that will generate the cast.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Noting in Visual Basic)
            </exception>		
        </member>
        <member name="M:Refly.CodeDom.Expr.Cast(System.Type,Refly.CodeDom.Expressions.Expression)">
            <summary>
            Creates a case of the <see cref="T:Refly.CodeDom.Expressions.Expression"/> 
            <paramref name="e"/> to the <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/> 
            <paramref name="type"/>.
            </summary>
            <param name="type">Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/></param>
            <param name="e"><see cref="T:Refly.CodeDom.Expressions.Expression"/> instance to case</param>
            <returns>
            A <see cref="!:CastExpressoin"/> that will generate the cast.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Noting in Visual Basic)
            </exception>		
        </member>
        <member name="M:Refly.CodeDom.Expr.Cast(Refly.CodeDom.ITypeDeclaration,Refly.CodeDom.Expressions.Expression)">
            <summary>
            Creates a case of the <see cref="T:Refly.CodeDom.Expressions.Expression"/> 
            <paramref name="e"/> to the <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/> 
            <paramref name="type"/>.
            </summary>
            <param name="type">Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/></param>
            <param name="e"><see cref="T:Refly.CodeDom.Expressions.Expression"/> instance to case</param>
            <returns>
            A <see cref="!:CastExpressoin"/> that will generate the cast.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Noting in Visual Basic)
            </exception>		
        </member>
        <member name="M:Refly.CodeDom.Expr.Snippet(System.String)">
            <summary>
            Creates a snippet of code that will be outputed as such.
            </summary>
            <param name="snippet">
            Snippet of code
            </param>
            <remarks>
            <para>
            Try not to use this type of generators because you will not be
            able to output different languages. This one is for the lazy users!
            </para>
            </remarks>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.NativeExpression"/> instance that will output the snippet.
            </returns>
        </member>
        <member name="M:Refly.CodeDom.Expr.TypeOf(System.String)">
            <summary>
            Creates a <c>typeof(type)</c> expression.
            </summary>
            <param name="type">
            Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/> name.
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.NativeExpression"/> that will generate the expression.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.TypeOf(System.Type)">
            <summary>
            Creates a <c>typeof(type)</c> expression.
            </summary>
            <param name="type">
            Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/>
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.NativeExpression"/> that will generate the expression.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.TypeOf(Refly.CodeDom.ITypeDeclaration)">
            <summary>
            Creates a <c>typeof(type)</c> expression.
            </summary>
            <param name="type">
            Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/>
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.NativeExpression"/> that will generate the expression.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.Type(System.String)">
            <summary>
            Creates a reference expression to a given <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/>.
            </summary>
            <param name="type">
            Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/> name
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.NativeExpression"/> that will generate the expression.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.Type(System.Type)">
            <summary>
            Creates a reference expression to a given <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/>.
            </summary>
            <param name="type">
            Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/> name
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.NativeExpression"/> that will generate the expression.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.Type(Refly.CodeDom.ITypeDeclaration)">
            <summary>
            Creates a reference expression to a given <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/>.
            </summary>
            <param name="type">
            Target <see cref="M:Refly.CodeDom.Expr.Type(System.String)"/> name
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.NativeExpression"/> that will generate the expression.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is a null reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.Delegate(Refly.CodeDom.ITypeDeclaration,Refly.CodeDom.Expressions.MethodReferenceExpression)">
            <summary>
            Creates a delegate constructr
            </summary>
            <param name="delegateType">
            The delegate type
            </param>
            <param name="method">
            The listener method
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.DelegateCreateExpression"/> representing the
            delegate creation.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="delegateType"/> or <paramref name="method"/>
            is a null reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.Delegate(System.String,Refly.CodeDom.Expressions.MethodReferenceExpression)">
            <summary>
            Creates a delegate constructr
            </summary>
            <param name="delegateType">
            The delegate type
            </param>
            <param name="method">
            The listener method
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.DelegateCreateExpression"/> representing the
            delegate creation.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="delegateType"/> or <paramref name="method"/>
            is a null reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="M:Refly.CodeDom.Expr.Delegate(System.Type,Refly.CodeDom.Expressions.MethodReferenceExpression)">
            <summary>
            Creates a delegate constructr
            </summary>
            <param name="delegateType">
            The delegate type
            </param>
            <param name="method">
            The listener method
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Expressions.DelegateCreateExpression"/> representing the
            delegate creation.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="delegateType"/> or <paramref name="method"/>
            is a null reference (Nothing in Visual Basic)
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Refly.CodeDom.Expr.DelegateInvoke(Refly.CodeDom.Expressions.EventReferenceExpression,Refly.CodeDom.Expressions.Expression[])" -->
        <member name="P:Refly.CodeDom.Expr.This">
            <summary>
            Create a <c>this</c> reference expression
            </summary>
            <remarks>
            Generated code:
            <code>
            [C#]
            this
            </code>
            </remarks>
        </member>
        <member name="P:Refly.CodeDom.Expr.Base">
            <summary>
            Create a <c>base</c> reference expression
            </summary>
            <remarks>
            Generated code:
            <code>
            [C#]
            base
            </code>
            </remarks>
        </member>
        <member name="P:Refly.CodeDom.Expr.Value">
            <summary>
            Create a <c>value</c> reference expression of a
            <c>set</c> section inside a property
            </summary>
            <remarks>
            Generated code:
            <code>
            [C#]
            value
            </code>
            </remarks>
        </member>
        <member name="P:Refly.CodeDom.Expr.Null">
            <summary>
            Create a <c>null</c> expression
            </summary>
            <remarks>
            Generated code:
            <code>
            [C#]
            null
            </code>
            </remarks>
        </member>
        <member name="P:Refly.CodeDom.Expr.True">
            <summary>
            Create a <c>true</c> expression
            </summary>
            <remarks>
            Generated code:
            <code>
            [C#]
            true
            </code>
            </remarks>
        </member>
        <member name="P:Refly.CodeDom.Expr.False">
            <summary>
            Create a <c>false</c> expression
            </summary>
            <remarks>
            Generated code:
            <code>
            [C#]
            false
            </code>
            </remarks>
        </member>
        <member name="T:Refly.CodeDom.Expressions.ArgumentReferenceExpression">
            <summary>
            Summary description for ArgumentReferenceExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.Expression">
            <summary>
            Summary description for Expression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.ArrayCreationWithInitializersExpression">
            <summary>
            Summary description for ObjectCreationExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.BaseReferenceExpression">
            <summary>
            Summary description for BaseReferenceExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.BinaryOpOperatorExpression">
            <summary>
            Summary description for BinaryOpOperatorExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.CastExpression">
            <summary>
            Summary description for CastExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.DelegateInvokeExpression">
            <summary>
            Summary description for DelegateInvokeExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.EventReferenceExpression">
            <summary>
            Summary description for EventReferenceExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.FieldReferenceExpression">
            <summary>
            Summary description for FieldReferenceExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.IndexerExpression">
            <summary>
            Summary description for IndexerExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.MethodInvokeExpression">
            <summary>
            Summary description for MethodInvokeExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.MethodReferenceExpression">
            <summary>
            Summary description for MethodReferenceExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.NativeExpression">
            <summary>
            Summary description for NativeExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.NativeMethodInvokeExpression">
            <summary>
            Summary description for MethodInvokeExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.NativeMethodReferenceExpression">
            <summary>
            Summary description for MethodReferenceExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.NativePropertyReferenceExpression">
            <summary>
            Summary description for PropertyReferenceExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.ObjectCreationExpression">
            <summary>
            Summary description for ObjectCreationExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.PrimitiveExpression">
            <summary>
            Summary description for PrimitiveExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.PropertyReferenceExpression">
            <summary>
            Summary description for PropertyReferenceExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.PropertySetValueReferenceExpression">
            <summary>
            Summary description for ThisReferenceExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.ThisReferenceExpression">
            <summary>
            Summary description for ThisReferenceExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Expressions.VariableReferenceExpression">
            <summary>
            Summary description for VariableReferenceExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.FieldDeclaration">
            <summary>
            A field declaration
            </summary>
        </member>
        <member name="T:Refly.CodeDom.ImplementationMemberDeclaration">
            <summary>
            Abstract class for implementation members declarations.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.IndexerDeclaration">
            <summary>
            A index declaration.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.MethodDeclaration">
            <summary>
            A method declaration
            </summary>
        </member>
        <member name="T:Refly.CodeDom.MethodSignature">
            <summary>
            A method signature
            </summary>
        </member>
        <member name="T:Refly.CodeDom.NamespaceDeclaration">
            <summary>
            A namespace declaration
            </summary>
        </member>
        <member name="T:Refly.CodeDom.ParameterDeclaration">
            <summary>
            A parameter declaration
            </summary>
        </member>
        <member name="T:Refly.CodeDom.PropertyDeclaration">
            <summary>
            A property declaration
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.AssignStatement">
            <summary>
            Summary description for AssignStatementExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.AttachRemoveEventStatement">
            <summary>
            Summary description for AssignStatementExpression.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.CatchClause">
            <summary>
            Summary description for CatchClause.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.ConditionStatement">
            <summary>
            Summary description for ConditionStatement.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.ExpressionStatement">
            <summary>
            Summary description for ExpressionStatement.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.ForEachStatement">
            <summary>
            Summary description for ForEachStatement.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.IterationStatement">
            <summary>
            Summary description for IterationStatement.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.LabeledStatement">
            <summary>
            Summary description for LabelStatement.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.MethodReturnStatement">
            <summary>
            Summary description for MethodReturnStatement.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.NativeStatement">
            <summary>
            Summary description for NativeStatement.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.ThrowExceptionStatement">
            <summary>
            Summary description for ThrowExceptionStatement.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Statements.TryCatchFinallyStatement">
            <summary>
            Summary description for TryCatchFinallyStatement.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.Stm">
            <summary>
            Helper containing static methods for creating statements.
            </summary>
        </member>
        <member name="M:Refly.CodeDom.Stm.Assign(Refly.CodeDom.Expressions.Expression,Refly.CodeDom.Expressions.Expression)">
            <summary>
            Creates an assign statement: <c>left = right</c>
            </summary>
            <param name="left">
            Left <see cref="T:Refly.CodeDom.Expressions.Expression"/> instance</param>
            <param name="right">
            Right <see cref="T:Refly.CodeDom.Expressions.Expression"/> instance
            </param>
            <returns>
            A <see cref="T:Refly.CodeDom.Statements.AssignStatement"/> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="left"/> or <paramref name="right"/>
            is a null reference (Nothing in Visual Basic)
            </exception>
        </member>
        <member name="T:Refly.CodeDom.ThrowedExceptionDeclaration">
            <summary>
            Summary description for ThrowedExceptionDeclaration.
            </summary>
        </member>
        <member name="T:Refly.NameConformer">
            <summary>
            Summary description for NameConformer.
            </summary>
        </member>
        <member name="T:Refly.Templates.CollectionTemplate">
            <summary>
            Summary description for StronglyTypedCollectionGenerator.
            </summary>
        </member>
        <member name="T:Refly.Templates.ITemplate">
            <summary>
            Summary description for ITemplate.
            </summary>
        </member>
        <member name="T:Refly.Templates.DataReaderTemplate">
            <summary>
            Summary description for DataReaderTemplate.
            </summary>
        </member>
        <member name="T:Refly.Templates.DataTemplate">
            <summary>
            Summary description for DataReaderTemplate.
            </summary>
        </member>
        <member name="T:Refly.CodeDom.TypeHelper">
            <summary>
            Helper static class for Type related tasks
            </summary>
            <!-- Badly formed XML file "c:\RelEng\Projects\MbUnit v2\Work\src\refly\Refly\GUnit.CodeDom.Doc.xml" cannot be included -->
        </member>
        <member name="M:Refly.CodeDom.TypeHelper.HasCustomAttribute(System.Type,System.Type)">
            <summary>
            Gets a value indicating if the type <paramref name="t"/> is tagged
            by a <paramref name="customAttributeType"/> instance.
            </summary>
            <param name="t">type to test</param>
            <param name="customAttributeType">custom attribute type to search</param>
            <returns>
            true if <param name="t"/> is tagged by a <paramref name="customAttributeType"/>
            attribute, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="t"/> or <paramref name="customAttributeType"/>
            is a null reference
            </exception>
            <remarks>
            You can use this method to check that a type is tagged by an attribute.
            </remarks>
        </member>
        <member name="M:Refly.CodeDom.TypeHelper.HasCustomAttribute(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Gets a value indicating if the property info <paramref name="t"/> is tagged
            by a <paramref name="customAttributeType"/> instance.
            </summary>
            <param name="t">property to test</param>
            <param name="customAttributeType">custom attribute type to search</param>
            <returns>
            true if <param name="t"/> is tagged by a <paramref name="customAttributeType"/>
            attribute, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="t"/> or <paramref name="customAttributeType"/>
            is a null reference
            </exception>
            <remarks>
            You can use this property to check that a method is tagged by a
            specified attribute.
            </remarks>
        </member>
        <member name="M:Refly.CodeDom.TypeHelper.GetFirstCustomAttribute(System.Type,System.Type)">
            <summary>
            Gets the first instance of <paramref name="customAttributeType"/> 
            from the type <paramref name="t"/> custom attributes.
            </summary>
            <param name="t">type to test</param>
            <param name="customAttributeType">custom attribute type to search</param>
            <returns>
            First instance of <paramref name="customAttributeTyp"/>
            from the type <paramref name="t"/> custom attributes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="t"/> or <paramref name="customAttributeType"/>
            is a null reference
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="t"/> is not tagged by an attribute of type
            <paramref name="customAttributeType"/>
            </exception>
            <remarks>
            You can use this method to retreive a specified attribute
            instance
            </remarks>
        </member>
        <member name="M:Refly.CodeDom.TypeHelper.GetFirstCustomAttribute(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Gets the first instance of <paramref name="customAttributeType"/> 
            from the property <paramref name="mi"/> custom attributes.
            </summary>
            <param name="mi">property to test</param>
            <param name="customAttributeType">custom attribute type to search</param>
            <returns>
            First instance of <paramref name="customAttributeTyp"/>
            from the property <paramref name="mi"/> custom attributes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mi"/> or <paramref name="customAttributeType"/>
            is a null reference
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="mi"/> is not tagged by an attribute of type
            <paramref name="customAttributeType"/>
            </exception>
            <remarks>
            You can use this property to retreive a specified attribute
            instance of a method.
            </remarks>
        </member>
    </members>
</doc>
