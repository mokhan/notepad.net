<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuickGraph</name>
    </assembly>
    <members>
        <member name="T:QuickGraph.Collections.DistanceComparer">
            <summary>
            Given a Distance map, compare two vertex distance
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.DistanceComparer.#ctor(QuickGraph.Collections.VertexDoubleDictionary)">
            <summary>
            Builds a vertex distance comparer
            </summary>
            <param name="distances"></param>
        </member>
        <member name="M:QuickGraph.Collections.DistanceComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare the distance between vertex x and y
            </summary>
            <param name="x">First vertex</param>
            <param name="y">Second vertex</param>
            <returns>-1 if d[x]&lt;d[y], 0 if d[x] equals d[y] and +1 if d[x] &gt; d[y]</returns>
        </member>
        <member name="T:QuickGraph.Collections.DoubleCollection">
            <summary>
            A collection of elements of type Double
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.DoubleCollection.#ctor">
            <summary>
            Initializes a new empty instance of the DoubleCollection class.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.DoubleCollection.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the DoubleCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new DoubleCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.DoubleCollection.#ctor(QuickGraph.Collections.DoubleCollection)">
            <summary>
            Initializes a new instance of the DoubleCollection class, containing elements
            copied from another instance of DoubleCollection
            </summary>
            <param name="items">
            The DoubleCollection whose elements are to be added to the new DoubleCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.DoubleCollection.AddRange(System.Double[])">
            <summary>
            Adds the elements of an array to the end of this DoubleCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this DoubleCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.DoubleCollection.AddRange(QuickGraph.Collections.DoubleCollection)">
            <summary>
            Adds the elements of another DoubleCollection to the end of this DoubleCollection.
            </summary>
            <param name="items">
            The DoubleCollection whose elements are to be added to the end of this DoubleCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.DoubleCollection.Add(System.Double)">
            <summary>
            Adds an instance of type Double to the end of this DoubleCollection.
            </summary>
            <param name="value">
            The Double to be added to the end of this DoubleCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.DoubleCollection.Contains(System.Double)">
            <summary>
            Determines whether a specfic Double value is in this DoubleCollection.
            </summary>
            <param name="value">
            The Double value to locate in this DoubleCollection.
            </param>
            <returns>
            true if value is found in this DoubleCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.DoubleCollection.IndexOf(System.Double)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this DoubleCollection
            </summary>
            <param name="value">
            The Double value to locate in the DoubleCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.DoubleCollection.Insert(System.Int32,System.Double)">
            <summary>
            Inserts an element into the DoubleCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Double is to be inserted.
            </param>
            <param name="value">
            The Double to insert.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.DoubleCollection.Remove(System.Double)">
            <summary>
            Removes the first occurrence of a specific Double from this DoubleCollection.
            </summary>
            <param name="value">
            The Double value to remove from this DoubleCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.DoubleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this DoubleCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:QuickGraph.Collections.DoubleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Double at the given index in this DoubleCollection.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.DoubleCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by DoubleCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeCollection">
            <summary>
            A collection of elements of type Edge
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.IEdgeCollection">
            <summary>
            An edge enumerable collection
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.IEdgeEnumerable">
            <summary>
            Edge enumerable collection
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Collections.IEdgeEnumerable.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.#ctor">
            <summary>
            Initializes a new empty instance of the EdgeCollection class.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.#ctor(QuickGraph.Concepts.IEdge[])">
            <summary>
            Initializes a new instance of the EdgeCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new EdgeCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.#ctor(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
            <summary>
            Initializes a new instance of the EdgeCollection class, containing elements
            copied from another instance of EdgeCollection
            </summary>
            <param name="items">
            The EdgeCollection whose elements are to be added to the new EdgeCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.AddRange(QuickGraph.Concepts.IEdge[])">
            <summary>
            Adds the elements of an array to the end of this EdgeCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this EdgeCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.AddRange(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
            <summary>
            Adds the elements of another EdgeCollection to the end of this EdgeCollection.
            </summary>
            <param name="items">
            The EdgeCollection whose elements are to be added to the end of this EdgeCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.Add(QuickGraph.Concepts.IEdge)">
            <summary>
            Adds an instance of type Edge to the end of this EdgeCollection.
            </summary>
            <param name="value">
            The Edge to be added to the end of this EdgeCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.Contains(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether a specfic Edge value is in this EdgeCollection.
            </summary>
            <param name="value">
            The Edge value to locate in this EdgeCollection.
            </param>
            <returns>
            true if value is found in this EdgeCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.IndexOf(QuickGraph.Concepts.IEdge)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this EdgeCollection
            </summary>
            <param name="value">
            The Edge value to locate in the EdgeCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.Insert(System.Int32,QuickGraph.Concepts.IEdge)">
            <summary>
            Inserts an element into the EdgeCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Edge is to be inserted.
            </param>
            <param name="value">
            The Edge to insert.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.Remove(QuickGraph.Concepts.IEdge)">
            <summary>
            Removes the first occurrence of a specific Edge from this EdgeCollection.
            </summary>
            <param name="value">
            The Edge value to remove from this EdgeCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this EdgeCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:QuickGraph.Collections.EdgeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Edge at the given index in this EdgeCollection.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by EdgeCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.IEdgeEnumerator">
            <summary>
            An edge enumerator
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.Collections.IEdgeEnumerator.Current">
            <summary>
            Current edge
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.Enumerator.#ctor(QuickGraph.Collections.EdgeCollection)">
            <summary>
            Create a new enumerator on the collection
            </summary>
            <param name="collection">collection to enumerate</param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.Enumerator.MoveNext">
            <summary>
            Moves cursor to next element.
            </summary>
            <returns>true if current is valid, false otherwize</returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollection.Enumerator.Reset">
            <summary>
            Resets the cursor to the position before the first element.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.EdgeCollection.Enumerator.Current">
            <summary>
            The current element. 
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeCollectionCollection">
            <summary>
            A collection of elements of type EdgeCollection
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.#ctor">
            <summary>
            Initializes a new empty instance of the EdgeCollectionCollection class.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.#ctor(QuickGraph.Collections.EdgeCollection[])">
            <summary>
            Initializes a new instance of the EdgeCollectionCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new EdgeCollectionCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.#ctor(QuickGraph.Collections.EdgeCollectionCollection)">
            <summary>
            Initializes a new instance of the EdgeCollectionCollection class, containing elements
            copied from another instance of EdgeCollectionCollection
            </summary>
            <param name="items">
            The EdgeCollectionCollection whose elements are to be added to the new EdgeCollectionCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.AddRange(QuickGraph.Collections.EdgeCollection[])">
            <summary>
            Adds the elements of an array to the end of this EdgeCollectionCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this EdgeCollectionCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.AddRange(QuickGraph.Collections.EdgeCollectionCollection)">
            <summary>
            Adds the elements of another EdgeCollectionCollection to the end of this EdgeCollectionCollection.
            </summary>
            <param name="items">
            The EdgeCollectionCollection whose elements are to be added to the end of this EdgeCollectionCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.Add(QuickGraph.Collections.EdgeCollection)">
            <summary>
            Adds an instance of type EdgeCollection to the end of this EdgeCollectionCollection.
            </summary>
            <param name="value">
            The EdgeCollection to be added to the end of this EdgeCollectionCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.Contains(QuickGraph.Collections.EdgeCollection)">
            <summary>
            Determines whether a specfic EdgeCollection value is in this EdgeCollectionCollection.
            </summary>
            <param name="value">
            The EdgeCollection value to locate in this EdgeCollectionCollection.
            </param>
            <returns>
            true if value is found in this EdgeCollectionCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.IndexOf(QuickGraph.Collections.EdgeCollection)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this EdgeCollectionCollection
            </summary>
            <param name="value">
            The EdgeCollection value to locate in the EdgeCollectionCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.Insert(System.Int32,QuickGraph.Collections.EdgeCollection)">
            <summary>
            Inserts an element into the EdgeCollectionCollection at the specified index
            </summary>
            <param name="index">
            The index at which the EdgeCollection is to be inserted.
            </param>
            <param name="value">
            The EdgeCollection to insert.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.Remove(QuickGraph.Collections.EdgeCollection)">
            <summary>
            Removes the first occurrence of a specific EdgeCollection from this EdgeCollectionCollection.
            </summary>
            <param name="value">
            The EdgeCollection value to remove from this EdgeCollectionCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this EdgeCollectionCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:QuickGraph.Collections.EdgeCollectionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the EdgeCollection at the given index in this EdgeCollectionCollection.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeCollectionCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by EdgeCollectionCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.Enumerator.#ctor(QuickGraph.Collections.EdgeCollectionCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeCollectionCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.EdgeCollectionCollection.Enumerator.Current">
            <summary>
            Gets the current edge collection
            </summary>
            <value>
            Current edge collection
            </value>
        </member>
        <member name="P:QuickGraph.Collections.EdgeCollectionCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeColorDictionary">
            <summary>
            A dictionary with keys of type Edge and values of type GraphColor
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeColorDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the EdgeGraphColorDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeColorDictionary.Add(QuickGraph.Concepts.IEdge,QuickGraph.Concepts.GraphColor)">
            <summary>
            Adds an element with the specified key and value to this EdgeGraphColorDictionary.
            </summary>
            <param name="key">
            The Edge key of the element to add.
            </param>
            <param name="value">
            The GraphColor value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeColorDictionary.Contains(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeGraphColorDictionary contains a specific key.
            </summary>
            <param name="key">
            The Edge key to locate in this EdgeGraphColorDictionary.
            </param>
            <returns>
            true if this EdgeGraphColorDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeColorDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeGraphColorDictionary contains a specific key.
            </summary>
            <param name="key">
            The Edge key to locate in this EdgeGraphColorDictionary.
            </param>
            <returns>
            true if this EdgeGraphColorDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeColorDictionary.ContainsValue(QuickGraph.Concepts.GraphColor)">
            <summary>
            Determines whether this EdgeGraphColorDictionary contains a specific value.
            </summary>
            <param name="value">
            The GraphColor value to locate in this EdgeGraphColorDictionary.
            </param>
            <returns>
            true if this EdgeGraphColorDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeColorDictionary.Remove(QuickGraph.Concepts.IEdge)">
            <summary>
            Removes the element with the specified key from this EdgeGraphColorDictionary.
            </summary>
            <param name="key">
            The Edge key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeColorDictionary.Item(QuickGraph.Concepts.IEdge)">
            <summary>
            Gets or sets the GraphColor associated with the given Edge
            </summary>
            <param name="key">
            The Edge whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeColorDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this EdgeGraphColorDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.EdgeColorDictionary.Values">
            <summary>
            Gets a collection containing the values in this EdgeGraphColorDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeDoubleDictionary">
            <summary>
            A dictionary with keys of type Edge and values of type Double
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeDoubleDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the EdgeDoubleDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeDoubleDictionary.Add(QuickGraph.Concepts.IEdge,System.Double)">
            <summary>
            Adds an element with the specified key and value to this EdgeDoubleDictionary.
            </summary>
            <param name="key">
            The Edge key of the element to add.
            </param>
            <param name="value">
            The Double value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeDoubleDictionary.Contains(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeDoubleDictionary contains a specific key.
            </summary>
            <param name="key">
            The Edge key to locate in this EdgeDoubleDictionary.
            </param>
            <returns>
            true if this EdgeDoubleDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeDoubleDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeDoubleDictionary contains a specific key.
            </summary>
            <param name="key">
            The Edge key to locate in this EdgeDoubleDictionary.
            </param>
            <returns>
            true if this EdgeDoubleDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeDoubleDictionary.ContainsValue(System.Double)">
            <summary>
            Determines whether this EdgeDoubleDictionary contains a specific value.
            </summary>
            <param name="value">
            The Double value to locate in this EdgeDoubleDictionary.
            </param>
            <returns>
            true if this EdgeDoubleDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeDoubleDictionary.Remove(QuickGraph.Concepts.IEdge)">
            <summary>
            Removes the element with the specified key from this EdgeDoubleDictionary.
            </summary>
            <param name="key">
            The Edge key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeDoubleDictionary.Item(QuickGraph.Concepts.IEdge)">
            <summary>
            Gets or sets the Double associated with the given Edge
            </summary>
            <param name="key">
            The Edge whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeDoubleDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this EdgeDoubleDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.EdgeDoubleDictionary.Values">
            <summary>
            Gets a collection containing the values in this EdgeDoubleDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeEdgeDictionary">
            <summary>
            A dictionary with keys of type IEdge and values of type IEdge
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEdgeDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the EdgeEdgeDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEdgeDictionary.Add(QuickGraph.Concepts.IEdge,QuickGraph.Concepts.IEdge)">
            <summary>
            Adds an element with the specified key and value to this EdgeEdgeDictionary.
            </summary>
            <param name="key">
            The IEdge key of the element to add.
            </param>
            <param name="value">
            The IEdge value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEdgeDictionary.Contains(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeEdgeDictionary contains a specific key.
            </summary>
            <param name="key">
            The IEdge key to locate in this EdgeEdgeDictionary.
            </param>
            <returns>
            true if this EdgeEdgeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEdgeDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeEdgeDictionary contains a specific key.
            </summary>
            <param name="key">
            The IEdge key to locate in this EdgeEdgeDictionary.
            </param>
            <returns>
            true if this EdgeEdgeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEdgeDictionary.ContainsValue(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeEdgeDictionary contains a specific value.
            </summary>
            <param name="value">
            The IEdge value to locate in this EdgeEdgeDictionary.
            </param>
            <returns>
            true if this EdgeEdgeDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEdgeDictionary.Remove(QuickGraph.Concepts.IEdge)">
            <summary>
            Removes the element with the specified key from this EdgeEdgeDictionary.
            </summary>
            <param name="key">
            The IEdge key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeEdgeDictionary.Item(QuickGraph.Concepts.IEdge)">
            <summary>
            Gets or sets the IEdge associated with the given IEdge
            </summary>
            <param name="key">
            The IEdge whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeEdgeDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this EdgeEdgeDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.EdgeEdgeDictionary.Values">
            <summary>
            Gets a collection containing the values in this EdgeEdgeDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeEnumerable">
            <summary>
            A wrapper class for weak collection of IEdge
            </summary>
            <remarks>
            <para>
            This class works as a proxy for a weakly named collection of IEdge by
            implementing the IEdgeEnumerable interface.
            </para>
            </remarks>
            <example>
            In this example, we show how to convert the value collection of
            a vertex dictionary to a stronly typed collection:
            <code>
            VertexEdgeDictionary names = new VertexEdgeDictionary();
            ...
            // this will fail names.Values implements IEnumerable.
            IEdgeEnumerable c = names.Values;
            // wrapping the values
            IEdgeEnumrable c = new EdgeEnumerable(names.Values);
            </code>
            </example>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEnumerable.#ctor(System.Collections.IEnumerable)">
            <summary>
            Method
            </summary>
            <param name="en">Wrapped enumerable</param>
            <exception cref="T:System.ArgumentNullException">en is null</exception>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEnumerable.Wrap(System.Collections.IEnumerable)">
            <summary>
            Wraps up the weakly typed collection in a strongly typed (IEdge)
            collection.
            </summary>
            <param name="en">Collection to wrap</param>
            <returns>Edge enumerable collection</returns>
            <remarks>
            <para>
            The method is thread-safe.
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEnumerable.GetEnumerator">
            <summary>
            Return a strongly typed enumerator
            </summary>
            <returns>strongly typed enumerator</returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEnumerable.QuickGraph#Concepts#Collections#IEdgeEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.EdgeEnumerable.Enumerable">
            <summary>
            Wrapped enumerable
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeEnumerable.Enumerator">
            <summary>
            Strongly typed enumerator
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEnumerable.Enumerator.#ctor(System.Collections.IEnumerator)">
            <summary>
            Builds a new enumrator
            </summary>
            <param name="e">wrapped enumerator</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEnumerable.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeEnumerable.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.EdgeEnumerable.Enumerator.Wrapped">
            <summary>
            Wrapped enumerator
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.EdgeEnumerable.Enumerator.Current">
            <summary>
            Current Edge
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.EdgeEnumerable.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeIntDictionary">
            <summary>
            A dictionary with keys of type IEdge and values of type Int
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeIntDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the EdgeIntDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeIntDictionary.Add(QuickGraph.Concepts.IEdge,System.Int32)">
            <summary>
            Adds an element with the specified key and value to this EdgeIntDictionary.
            </summary>
            <param name="key">
            The IEdge key of the element to add.
            </param>
            <param name="value">
            The Int value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeIntDictionary.Contains(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeIntDictionary contains a specific key.
            </summary>
            <param name="key">
            The IEdge key to locate in this EdgeIntDictionary.
            </param>
            <returns>
            true if this EdgeIntDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeIntDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeIntDictionary contains a specific key.
            </summary>
            <param name="key">
            The IEdge key to locate in this EdgeIntDictionary.
            </param>
            <returns>
            true if this EdgeIntDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeIntDictionary.ContainsValue(System.Int32)">
            <summary>
            Determines whether this EdgeIntDictionary contains a specific value.
            </summary>
            <param name="value">
            The Int value to locate in this EdgeIntDictionary.
            </param>
            <returns>
            true if this EdgeIntDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeIntDictionary.Remove(QuickGraph.Concepts.IEdge)">
            <summary>
            Removes the element with the specified key from this EdgeIntDictionary.
            </summary>
            <param name="key">
            The IEdge key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeIntDictionary.Item(QuickGraph.Concepts.IEdge)">
            <summary>
            Gets or sets the Int associated with the given IEdge
            </summary>
            <param name="key">
            The IEdge whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeIntDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this EdgeIntDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.EdgeIntDictionary.Values">
            <summary>
            Gets a collection containing the values in this EdgeIntDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeObjectDictionary">
            <summary>
            A dictionary with keys of type Edge and values of type Object
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeObjectDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the EdgeObjectDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeObjectDictionary.Add(QuickGraph.Concepts.IEdge,System.Object)">
            <summary>
            Adds an element with the specified key and value to this EdgeObjectDictionary.
            </summary>
            <param name="key">
            The Edge key of the element to add.
            </param>
            <param name="value">
            The Object value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeObjectDictionary.Contains(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeObjectDictionary contains a specific key.
            </summary>
            <param name="key">
            The Edge key to locate in this EdgeObjectDictionary.
            </param>
            <returns>
            true if this EdgeObjectDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeObjectDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeObjectDictionary contains a specific key.
            </summary>
            <param name="key">
            The Edge key to locate in this EdgeObjectDictionary.
            </param>
            <returns>
            true if this EdgeObjectDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeObjectDictionary.ContainsValue(System.Object)">
            <summary>
            Determines whether this EdgeObjectDictionary contains a specific value.
            </summary>
            <param name="value">
            The Object value to locate in this EdgeObjectDictionary.
            </param>
            <returns>
            true if this EdgeObjectDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeObjectDictionary.Remove(QuickGraph.Concepts.IEdge)">
            <summary>
            Removes the element with the specified key from this EdgeObjectDictionary.
            </summary>
            <param name="key">
            The Edge key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeObjectDictionary.Item(QuickGraph.Concepts.IEdge)">
            <summary>
            Gets or sets the Object associated with the given Edge
            </summary>
            <param name="key">
            The Edge whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeObjectDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this EdgeObjectDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.EdgeObjectDictionary.Values">
            <summary>
            Gets a collection containing the values in this EdgeObjectDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.EdgeStringDictionary">
            <summary>
            A dictionary with keys of type Edge and values of type String
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeStringDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the EdgeStringDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.EdgeStringDictionary.Add(QuickGraph.Concepts.IEdge,System.String)">
            <summary>
            Adds an element with the specified key and value to this EdgeStringDictionary.
            </summary>
            <param name="key">
            The Edge key of the element to add.
            </param>
            <param name="value">
            The String value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.EdgeStringDictionary.Contains(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeStringDictionary contains a specific key.
            </summary>
            <param name="key">
            The Edge key to locate in this EdgeStringDictionary.
            </param>
            <returns>
            true if this EdgeStringDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeStringDictionary.ContainsKey(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this EdgeStringDictionary contains a specific key.
            </summary>
            <param name="key">
            The Edge key to locate in this EdgeStringDictionary.
            </param>
            <returns>
            true if this EdgeStringDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeStringDictionary.ContainsValue(System.String)">
            <summary>
            Determines whether this EdgeStringDictionary contains a specific value.
            </summary>
            <param name="value">
            The String value to locate in this EdgeStringDictionary.
            </param>
            <returns>
            true if this EdgeStringDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.EdgeStringDictionary.Remove(QuickGraph.Concepts.IEdge)">
            <summary>
            Removes the element with the specified key from this EdgeStringDictionary.
            </summary>
            <param name="key">
            The Edge key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeStringDictionary.Item(QuickGraph.Concepts.IEdge)">
            <summary>
            Gets or sets the String associated with the given Edge
            </summary>
            <param name="key">
            The Edge whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.EdgeStringDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this EdgeStringDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.EdgeStringDictionary.Values">
            <summary>
            Gets a collection containing the values in this EdgeStringDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.Filtered.FilteredAdjacencyGraph">
            <summary>
            A filtered adjacency graph
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IAdjacencyGraph">
            <summary>
            AdjacentGraph concept
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IAdjacencyGraph.AdjacentVertices(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns a enumerable collection of adjacent vertices
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredAdjacencyGraph.#ctor(QuickGraph.Concepts.Traversals.IAdjacencyGraph,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Create an adjacency filtered graph
            </summary>
            <param name="g">graph to filter</param>
            <param name="vp">vertex predicate</param>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredAdjacencyGraph.AdjacentVertices(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns a filtered enumerable collection of adjacent vertices
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredAdjacencyGraph.QuickGraph#Concepts#Traversals#IAdjacencyGraph#AdjacentVertices(QuickGraph.Concepts.IVertex)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredAdjacencyGraph.AdjacencyGraph">
            <summary>
            Filtered adjacency graph
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredAdjacencyGraph.VertexPredicate">
            <summary>
            Vertex predicate used to filter the vertices
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph">
            <summary>
            A filtered bidirectional graph
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.Filtered.FilteredIncidenceGraph">
            <summary>
            A filtered incidence graph
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:QuickGraph.Collections.Filtered.FilteredGraph">
            <summary>
            Base class for filtered graphs
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:QuickGraph.Concepts.IGraph">
            <summary>
            The Graph concept contains a few requirements that are common to all 
            the graph concepts. 
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IGraph.IsDirected">
            <summary>
            Directed or undirected graph
            </summary>
            <value>
            True if directed graph
            </value>
        </member>
        <member name="P:QuickGraph.Concepts.IGraph.AllowParallelEdges">
            <summary>
            Parallel edge handling
            </summary>
            <remarks>
            This describes whether the graph class allows the insertion of 
            parallel edges (edges with the same source and target). 
            </remarks>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredGraph.#ctor(QuickGraph.Concepts.IGraph,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Construct a graph that filters edges
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <exception cref="T:System.ArgumentNullException">
            g or edgePredicate is null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredGraph.#ctor(QuickGraph.Concepts.IGraph,QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Construct a filtered graph with an edge and a vertex predicate.
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <param name="vertexPredicate">vertex predicate</param>
            <exception cref="T:System.ArgumentNullException">
            g, edgePredicate or vertexPredicate are null
            </exception>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredGraph.Graph">
            <summary>
            Underlying filtered graph
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredGraph.EdgePredicate">
            <summary>
            Edge predicate used to filter the edges
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredGraph.VertexPredicate">
            <summary>
            Vertex predicate used to filter the vertices
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredGraph.IsDirected">
            <summary>
            True if underlying graph in directed
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredGraph.AllowParallelEdges">
            <summary>
            True if underlying graph allows parallel edges
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IIncidenceGraph">
            <summary>
            Access to each vertex out-edges.
            </summary>
            <remarks>
            <para>
            The IncidenceGraph concept provides an interface for efficient access 
            to the out-edges of each vertex in the graph. 
            </para>
            <seealso cref="T:QuickGraph.Concepts.IGraph"/>
            </remarks>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IImplicitGraph">
            <summary>
            A graph defined by a out-edges method.
            </summary>
            <remarks>
            <para>
            The <see cref="!:ImplicitGraph"/> concept provides an interface for implicitely 
            defining graphs through an <see cref="M:QuickGraph.Concepts.Traversals.IImplicitGraph.OutEdges(QuickGraph.Concepts.IVertex)"/> method.
            </para>
            <seealso cref="T:QuickGraph.Concepts.IGraph"/>
            </remarks>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IImplicitGraph.OutEdgesEmpty(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if the set of out-edges is empty
            </summary>
            <remarks>
            <para>
            Usually faster that calling <see cref="M:QuickGraph.Concepts.Traversals.IImplicitGraph.OutDegree(QuickGraph.Concepts.IVertex)"/>.
            </para>
            </remarks>
            <value>
            true if the out-edge set is empty, false otherwise.
            </value>
            <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IImplicitGraph.OutDegree(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns the out-degree edges of v
            </summary>
            <param name="v">vertex to test</param>
            <returns>out-degree</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IImplicitGraph.OutEdges(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns an iterable collection of the out edges of v
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IIncidenceGraph.ContainsEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if there is an edge between the vertices 
            <paramref name="u"/>, <paramref name="v"/>.
            </summary>
            <param name="u">source vertex</param>
            <param name="v">target vertex</param>
            <returns>true if (<paramref name="u"/>, <paramref name="v"/>) exists.</returns>
            <exception cref="T:System.ArgumentNullException">u or v is a null reference</exception>
            <remarks>
            This method checks wheter an edge exists between the two vertices.
            <para>
            Complexity: O(E)
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.#ctor(QuickGraph.Concepts.Traversals.IIncidenceGraph,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Construct a graph that filters in-edges
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <exception cref="T:System.ArgumentNullException">
            g or edgePredicate is null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.#ctor(QuickGraph.Concepts.Traversals.IIncidenceGraph,QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Construct a filtered graph with an edge and a vertex predicate.
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <param name="vertexPredicate">vertex predicate</param>
            <exception cref="T:System.ArgumentNullException">
            g, edgePredicate or vertexPredicate are null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.OutEdgesEmpty(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if the set of out-edges is empty
            </summary>
            <remarks>
            <para>
            Usually faster that calling <see cref="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.OutDegree(QuickGraph.Concepts.IVertex)"/>.
            </para>
            </remarks>
            <value>
            true if the out-edge set is empty, false otherwise.
            </value>
            <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.OutDegree(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns the number of out-degree edges of v
            </summary>
            <param name="v">vertex to test</param>
            <returns>out-degree</returns>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.OutEdges(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns an iterable collection of the out edges of v
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.QuickGraph#Concepts#Traversals#IImplicitGraph#OutEdges(QuickGraph.Concepts.IVertex)">
            <summary>
            Implentes IIncidenceGraph interface.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.ContainsEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if there is an edge between the vertices 
            <paramref name="u"/>, <paramref name="v"/>.
            </summary>
            <param name="u">source vertex</param>
            <param name="v">target vertex</param>
            <returns>true if (<paramref name="u"/>, <paramref name="v"/>) exists.</returns>
            <exception cref="T:System.ArgumentNullException">u or v is a null reference</exception>
            <remarks>
            This method checks wheter an edge exists between the two vertices.
            <para>
            Complexity: O(E)
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.AdjacentVertices(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets an enumerable collection of the v adjacent vertices
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredIncidenceGraph.IncidenceGraph">
            <summary>
            Underlying incidence graph
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IBidirectionalGraph">
            <summary>
            Adds access to in-edges.
            </summary>
            <remarks>
            <para>
            The BidirectionalGraph concept refines IncidenceGraph and adds the 
            requirement for efficient access to the in-edges of each vertex.
            </para>
            <para>
            This concept is separated from IncidenceGraph because for directed 
            graphs efficient access to in-edges typically requires more storage 
            space, and many algorithms do not require access to in-edges. 
            </para>
            <para>
            For undirected graphs this is not an issue, 
            since the InEdges and OutEdges functions are the same, 
            they both return the edges incident to the vertex. 
            </para>
            <para>
            The InEdges() function is required to be constant time. 
            The InDegree and Degree properties functions must be linear in the 
            number of in-edges (for directed graphs) or incident edges 
            (for undirected graphs). 
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.InEdgesEmpty(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if the set of in-edges is empty
            </summary>
            <remarks>
            <para>
            Usually faster that calling <see cref="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.InDegree(QuickGraph.Concepts.IVertex)"/>.
            </para>
            </remarks>
            <value>
            true if the in-edge set is empty, false otherwise.
            </value>
            <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.InDegree(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns the number of in-edges (for directed graphs) or the number 
            of incident edges (for undirected graphs) of vertex v in graph g.
            </summary>
            <param name="v">vertex to test</param>
            <returns>out-degree</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.AdjacentEdgesEmpty(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if the set of edges connected to v is empty
            </summary>
            <remarks>
            <para>
            Usually faster that calling <see cref="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.Degree(QuickGraph.Concepts.IVertex)"/>.
            </para>
            </remarks>
            <value>
            true if the adjacent edge set is empty, false otherwise.
            </value>
            <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.Degree(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns the number of in-edges plus out-edges (for directed graphs) 
            or the number of incident edges (for undirected graphs) of 
            vertex v in graph g.
            </summary>
            <param name="v">vertex to test</param>
            <returns>out-degree</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IBidirectionalGraph.InEdges(QuickGraph.Concepts.IVertex)">
            <summary>
            Enumerable collection of in-edges
            </summary>
            <remarks>
            <para>
            Returns an enumerable collection of in-edges (for directed graphs) 
            or incident edges (for undirected graphs) of vertex v in graph g. 
            </para>
            <para>
            For both directed and undirected graphs, the target of an out-edge 
            is required to be vertex v and the source is required to be a 
            vertex that is adjacent to v. 
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.#ctor(QuickGraph.Concepts.Traversals.IBidirectionalGraph,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Construct a graph that filters in and out edges
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <exception cref="T:System.ArgumentNullException">
            g or edgePredicate is null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.#ctor(QuickGraph.Concepts.Traversals.IBidirectionalGraph,QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Construct a filtered graph with an edge and a vertex predicate.
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <param name="vertexPredicate">vertex predicate</param>
            <exception cref="T:System.ArgumentNullException">
            g, edgePredicate or vertexPredicate are null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.AdjacentEdgesEmpty(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if the set of edges connected to v is empty
            </summary>
            <remarks>
            <para>
            Usually faster that calling <see cref="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.Degree(QuickGraph.Concepts.IVertex)"/>.
            </para>
            </remarks>
            <value>
            true if the adjacent edge set is empty, false otherwise.
            </value>
            <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.InEdgesEmpty(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if the set of in-edges is empty
            </summary>
            <remarks>
            <para>
            Usually faster that calling <see cref="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.InDegree(QuickGraph.Concepts.IVertex)"/>.
            </para>
            </remarks>
            <value>
            true if the in-edge set is empty, false otherwise.
            </value>
            <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.InDegree(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns the number of out-degree edges of v
            </summary>
            <param name="v">vertex to test</param>
            <returns>out-degree</returns>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.Degree(QuickGraph.Concepts.IVertex)">
            <summary>
            Vertex filtered degre
            </summary>
            <param name="v">v to compute degree of</param>
            <returns>filtered degree</returns>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.InEdges(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns an iterable collection of the out edges of v
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.QuickGraph#Concepts#Traversals#IBidirectionalGraph#InEdges(QuickGraph.Concepts.IVertex)">
            <summary>
            Implentens IIncidenceGraph interface.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredBidirectionalGraph.BidirectionalGraph">
            <summary>
            Underlying incidence graph
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph">
            <summary>
            A filtered IEdgeListAndIncidenceGraph.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.Filtered.FilteredEdgeListGraph">
            <summary>
            A filtered edge list graph
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IEdgeListGraph">
            <summary>
            The EdgeListGraph concept refines the Graph concept, 
            and adds the requirement for efficient access to all the edges in the 
            graph. 
            </summary>
            <remarks>
            <seealso cref="T:QuickGraph.Concepts.IGraph"/>
            </remarks>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IEdgeListGraph.ContainsEdge(QuickGraph.Concepts.IEdge)">
            <summary>
            Gets a value indicating if the edge <paramref name="e"/> is part
            of the list.
            </summary>
            <param name="e">edge to test</param>
            <returns>true if part of the list, false otherwize</returns>
            <exception cref="T:System.ArgumentNullException">e is a null reference</exception>
            <remarks>
            This method checks wheter a particular edge is part of the set.
            <para>
            Complexity: O(E).
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Concepts.Traversals.IEdgeListGraph.EdgesEmpty">
            <summary>
            Gets a value indicating if the vertex set is empty
            </summary>
            <remarks>
            <para>
            Usually faster that calling <see cref="P:QuickGraph.Concepts.Traversals.IEdgeListGraph.EdgesCount"/>.
            </para>
            </remarks>
            <value>
            true if the vertex set is empty, false otherwise.
            </value>
        </member>
        <member name="P:QuickGraph.Concepts.Traversals.IEdgeListGraph.EdgesCount">
            <summary>
            Returns the number of edges in the graph.
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.Traversals.IEdgeListGraph.Edges">
            <summary>
            Returns an enumerator providing access to all the edges in the graph.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.#ctor(QuickGraph.Concepts.Traversals.IEdgeListGraph,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Construct a graph that filters edges
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <exception cref="T:System.ArgumentNullException">
            g or edgePredicate is null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.#ctor(QuickGraph.Concepts.Traversals.IEdgeListGraph,QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Construct a graph that filters edges
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <param name="vertexPredicate">vertex predicate</param>
            <exception cref="T:System.ArgumentNullException">
            g or edgePredicate or vertexPredicate is null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.ContainsEdge(QuickGraph.Concepts.IEdge)">
            <summary>
            Gets a value indicating if the edge <paramref name="e"/> is part
            of the list.
            </summary>
            <param name="e">edge to test</param>
            <returns>true if part of the list, false otherwize</returns>
            <exception cref="T:System.ArgumentNullException">e is a null reference</exception>
            <remarks>
            This method checks wheter a particular edge is part of the set.
            <para>
            Complexity: O(E).
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.EdgeListGraph">
            <summary>
            Underlying incidence graph
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.EdgesEmpty">
            <summary>
            Gets a value indicating if the vertex set is empty
            </summary>
            <remarks>
            <para>
            Usually faster that calling <see cref="P:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.EdgesCount"/>.
            </para>
            </remarks>
            <value>
            true if the vertex set is empty, false otherwise.
            </value>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.EdgesCount">
            <summary>
            Returns the number of filtered edges in the graph
            </summary>
            <returns>number of edges</returns>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.Edges">
            <summary>
            Returns an iterable collection of filtered edges
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListGraph.QuickGraph#Concepts#Traversals#IEdgeListGraph#Edges">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IEdgeListAndIncidenceGraph">
            <summary>
            Defines the union of EdgeListGraph and IncidenceListGraph.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.#ctor(QuickGraph.Concepts.Traversals.IEdgeListAndIncidenceGraph,QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Construct a graph that filters edges and out-edges
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <param name="vertexPredicate"></param>
            <exception cref="T:System.ArgumentNullException">
            g or edgePredicate is null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.OutEdgesEmpty(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if the set of out-edges is empty
            </summary>
            <remarks>
            <para>
            Usually faster that calling <see cref="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.OutDegree(QuickGraph.Concepts.IVertex)"/>.
            </para>
            </remarks>
            <value>
            true if the out-edge set is empty, false otherwise.
            </value>
            <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.OutDegree(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns the number of out-degree edges of v
            </summary>
            <param name="v">vertex to test</param>
            <returns>out-degree</returns>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.OutEdges(QuickGraph.Concepts.IVertex)">
            <summary>
            Returns an iterable collection of the out edges of v
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.QuickGraph#Concepts#Traversals#IImplicitGraph#OutEdges(QuickGraph.Concepts.IVertex)">
            <summary>
            Implentens IIncidenceGraph interface.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.ContainsEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if there is an edge between the vertices 
            <paramref name="u"/>, <paramref name="v"/>.
            </summary>
            <param name="u">source vertex</param>
            <param name="v">target vertex</param>
            <returns>true if (<paramref name="u"/>, <paramref name="v"/>) exists.</returns>
            <exception cref="T:System.ArgumentNullException">u or v is a null reference</exception>
            <remarks>
            This method checks wheter an edge exists between the two vertices.
            <para>
            Complexity: O(E)
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.AdjacentVertices(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets an enumerable collection of the v adjacent vertices
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.EdgeListAndIncidenceGraph">
            <summary>
            Underlying incidence graph
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredEdgeListAndIncidenceGraph.FilteredIncidenceGraph">
            <summary>
            Wrapped filtered edge list
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph">
            <summary>
            A filtered edge list graph
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:QuickGraph.Collections.Filtered.FilteredVertexListGraph">
            <summary>
            Summary description for FilteredVertexList.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IVertexListGraph">
            <summary>
            The VertexListGraph concept refines the Graph concept, 
            and adds the requirement for efficient traversal of all the vertices 
            in the graph. 
            </summary>
            <remarks>
            <para>
            One issue in the design of this concept is whether to include the 
            refinement from the IncidenceGraph
            concepts. 
            </para>
            <para>
            The ability to traverse the vertices of a graph is orthogonal to 
            traversing out-edges, so it would make sense to have a VertexListGraph 
            concept that only includes vertex traversal. 
            </para>
            <para>
            However, such a concept would no longer really be a graph, 
            but would just be a set, and the STL already has concepts for dealing 
            with such things. However, there are many BGL algorithms that need to 
            traverse the vertices and out-edges of a graph, so for convenience a 
            concept is needed that groups these requirements together, 
            hence the VertexListGraph concept. 
            </para>
            <seealso cref="T:QuickGraph.Concepts.IGraph"/>
            <seealso cref="T:QuickGraph.Concepts.Traversals.IIncidenceGraph"/>
            </remarks>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IVertexListGraph.ContainsVertex(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if the vertex <paramref name="v"/> is part
            of the list.
            </summary>
            <param name="v">vertex to test</param>
            <returns>true if part of the list, false otherwize</returns>
            <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
            <remarks>
            This method checks wheter a particular vertex is part of the set.
            <para>
            Complexity: O(V) at least, possibly in amortized constant time.
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Concepts.Traversals.IVertexListGraph.VerticesEmpty">
            <summary>
            Gets a value indicating if the vertex set is empty
            </summary>
            <para>
            Usually faster (O(1)) that calling <c>VertexCount</c>.
            </para>
            <value>
            true if the vertex set is empty, false otherwise.
            </value>
        </member>
        <member name="P:QuickGraph.Concepts.Traversals.IVertexListGraph.VerticesCount">
            <summary>
            Gets the number of <see cref="T:QuickGraph.Concepts.IVertex"/> in the graph.
            </summary>
            <value>
            The number of <see cref="T:QuickGraph.Concepts.IVertex"/> in the graph
            </value>
        </member>
        <member name="P:QuickGraph.Concepts.Traversals.IVertexListGraph.Vertices">
            <summary>
            Gets an iterator-range providing access to all the vertices in 
            the graph.
            </summary>
            <value>
            <see cref="T:QuickGraph.Concepts.Collections.IVertexEnumerable"/> collection over the 
            <see cref="T:QuickGraph.Concepts.IVertex"/> instances of the graph.
            </value>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredVertexListGraph.#ctor(QuickGraph.Concepts.Traversals.IVertexListGraph,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Construct a graph that filters in-edges
            </summary>
            <param name="g">graph to filter</param>
            <param name="vertexPredicate">vertex predicate</param>
            <exception cref="T:System.ArgumentNullException">
            g or vertexPredicate is null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredVertexListGraph.#ctor(QuickGraph.Concepts.Traversals.IVertexListGraph,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Construct a graph that filters in-edges
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <exception cref="T:System.ArgumentNullException">
            g or edgePredicate is null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredVertexListGraph.#ctor(QuickGraph.Concepts.Traversals.IVertexListGraph,QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Construct a filtered graph with an edge and a vertex predicate.
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <param name="vertexPredicate">vertex predicate</param>
            <exception cref="T:System.ArgumentNullException">
            g, edgePredicate or vertexPredicate are null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredVertexListGraph.ContainsVertex(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if the vertex <paramref name="v"/> is part
            of the list.
            </summary>
            <param name="u">vertex to test</param>
            <returns>true if part of the list, false otherwize</returns>
            <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
            <remarks>
            This method checks wheter a particular vertex is part of the set.
            <para>
            Complexity: O(V)
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredVertexListGraph.VertexListGraph">
            <summary>
            Underlying incidence graph
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredVertexListGraph.VerticesEmpty">
            <summary>
            Gets a value indicating if the vertex set is empty
            </summary>
            <para>
            Usually faster (O(1)) that calling <c>VertexCount</c>.
            </para>
            <value>
            true if the vertex set is empty, false otherwise.
            </value>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredVertexListGraph.VerticesCount">
            <summary>
            Gets the filtered vertices count
            </summary>
            <remarks>
            <para>
            This method is <c>O(|V|)</c>.
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredVertexListGraph.Vertices">
            <summary>
            Filtered enumerable collection of vertices
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredVertexListGraph.QuickGraph#Concepts#Traversals#IVertexListGraph#Vertices">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph">
            <summary>
            Defines the union of VertexListGraph and EdgeListGraph.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.#ctor(QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph,QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Construct a graph that filters edges and vertices
            </summary>
            <param name="g">graph to filter</param>
            <param name="edgePredicate">edge predicate</param>
            <param name="vertexPredicate"></param>
            <exception cref="T:System.ArgumentNullException">
            g or edgePredicate is null
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.ContainsEdge(QuickGraph.Concepts.IEdge)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.VertexAndEdgeListGraph">
            <summary>
            Underlying incidence graph
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.FilteredEdgeList">
            <summary>
            Wrapped filtered edge list
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.EdgesEmpty">
            <summary>
            Gets a value indicating if the vertex set is empty
            </summary>
            <remarks>
            <para>
            Usually faster that calling <see cref="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.EdgesCount"/>.
            </para>
            </remarks>
            <value>
            true if the vertex set is empty, false otherwise.
            </value>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.EdgesCount">
            <summary>
            Returns the number of filtered edges in the graph
            </summary>
            <returns>number of edges</returns>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.Edges">
            <summary>
            Returns an iterable collection of filtered edges
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.Filtered.FilteredVertexAndEdgeListGraph.QuickGraph#Concepts#Traversals#IEdgeListGraph#Edges">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Collections.Filtered.NamespaceDoc">
            <summary>
            <para>
            The <b>QuickGraph.Collections.Filtered</b> namespace contains
            filtered graph proxies that enables to have filtered views of graph.
            </para>
            <para>
            Each traversal concept/interface is mapped with a corresponding 
            filtered class.
            </para>
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.FilteredEdgeEnumerable">
            <summary>
            Description résumée de FilteredEdgeCollection.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.FilteredEdgeEnumerable.#ctor(QuickGraph.Concepts.Collections.IEdgeEnumerable,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Filtered edge collection
            </summary>
            <param name="ec">base collection</param>
            <param name="ep">filtering predicate</param>
        </member>
        <member name="M:QuickGraph.Collections.FilteredEdgeEnumerable.GetEnumerator">
            <summary>
            Returns the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.FilteredEdgeEnumerable.QuickGraph#Concepts#Collections#IEdgeEnumerable#GetEnumerator">
            <summary>
            IEnumerable implementation
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.FilteredEdgeEnumerable.BaseCollection">
            <summary>
            Base collection
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.FilteredEdgeEnumerable.EdgePredicate">
            <summary>
            Edge predicate
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.FilteredEdgeEnumerable.Enumerator">
            <summary>
            Filetred enumerator class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.FilteredEdgeEnumerable.Enumerator.#ctor(QuickGraph.Concepts.Collections.IEdgeEnumerator,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="p"></param>
        </member>
        <member name="M:QuickGraph.Collections.FilteredEdgeEnumerable.Enumerator.Reset">
            <summary>
            Positions the cursor before the first element.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.FilteredEdgeEnumerable.Enumerator.MoveNext">
            <summary>
            Moves the cursor to the next in-edge.
            </summary>
            <returns>True if successful, false if the iteration ended.</returns>
        </member>
        <member name="P:QuickGraph.Collections.FilteredEdgeEnumerable.Enumerator.Current">
            <summary>
            Current edge
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.FilteredEdgeEnumerable.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            IEnumerator implementation
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.FilteredVertexEnumerable">
            <summary>
            Filtered vertex collectiohn
            </summary>
            <remarks>
            This colleciton is used to do filtered iteration.
            </remarks>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.IVertexEnumerable">
            <summary>
            Edge enumerable collection
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Collections.IVertexEnumerable.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.FilteredVertexEnumerable.#ctor(QuickGraph.Concepts.Collections.IVertexEnumerable,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Default constructor
            </summary>
            <param name="ec">base collection</param>
            <param name="ep">predicate</param>
            <exception cref="T:System.ArgumentNullException">ec or ep null</exception>
        </member>
        <member name="M:QuickGraph.Collections.FilteredVertexEnumerable.GetEnumerator">
            <summary>
            Returns a filtered enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:QuickGraph.Collections.FilteredVertexEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerable implementation
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.FilteredVertexEnumerable.QuickGraph#Concepts#Collections#IVertexEnumerable#GetEnumerator">
            <summary>
            IVertexEnumerable implementation
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.FilteredVertexEnumerable.BaseEnumerable">
            <summary>
            Base collection
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.FilteredVertexEnumerable.VertexPredicate">
            <summary>
            Predicate
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.FilteredVertexEnumerable.Enumerator">
            <summary>
            Filtered enumerator
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.IVertexEnumerator">
            <summary>
            An edge enumerator
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.Collections.IVertexEnumerator.Current">
            <summary>
            Current edge
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.FilteredVertexEnumerable.Enumerator.#ctor(QuickGraph.Concepts.Collections.IVertexEnumerator,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Constructor
            </summary>
            <param name="e">Base enumerator</param>
            <param name="p">predicate</param>
        </member>
        <member name="M:QuickGraph.Collections.FilteredVertexEnumerable.Enumerator.Reset">
            <summary>
            Positions the cursor before the first element.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.FilteredVertexEnumerable.Enumerator.MoveNext">
            <summary>
            Moves the cursor to the next Vertex.
            </summary>
            <returns>True if successful, false if the iteration ended.</returns>
        </member>
        <member name="P:QuickGraph.Collections.FilteredVertexEnumerable.Enumerator.Current">
            <summary>
            Current Vertex
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.FilteredVertexEnumerable.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            IEnumerator implementation
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.NamespaceDoc">
            <summary>
            <para>
            The <b>QuickGraph.Collections</b> namespace contains a bunch of
            strongly typed collections and dictionaries. 
            </para>
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.PriorithizedVertexBuffer">
            <summary>
            A Priorithized (with respect to distance) vertex buffer.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexBuffer">
            <summary>
            A vertex buffer that acts like a stack.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexBuffer.#ctor">
            <summary>
            Constructs an empty buffer
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexBuffer.Peek">
            <summary>
            Returns the latest vertex in the buffer. Leaves it in the buffer.
            </summary>
            <returns>Latest vertex</returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexBuffer.Push(QuickGraph.Concepts.IVertex)">
            <summary>
            Pushes a new vertex at the end of the buffer:
            </summary>
            <param name="v">Vertex to push</param>
        </member>
        <member name="M:QuickGraph.Collections.VertexBuffer.Pop">
            <summary>
            Removes the latest vertex.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexBuffer.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the buffer using the comparer
            </summary>
            <param name="comparer">Comparer used to sort the buffer</param>
        </member>
        <member name="M:QuickGraph.Collections.VertexBuffer.GetEnumerator">
            <summary>
            Returns an enumerator over the buffer
            </summary>
            <returns>Buffer enumerator</returns>
        </member>
        <member name="P:QuickGraph.Collections.VertexBuffer.Count">
            <summary>
            The number of vertices in the buffer
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.PriorithizedVertexBuffer.#ctor(QuickGraph.Collections.VertexDoubleDictionary)">
            <summary>
            Builds a priorithzied vertex buffer and fills a vertex distance map.
            </summary>
            <param name="distances">vertex distance map</param>
        </member>
        <member name="M:QuickGraph.Collections.PriorithizedVertexBuffer.Update(QuickGraph.Concepts.IVertex)">
            <summary>
            Updates the buffer order
            </summary>
            <param name="v">modified vertex</param>
        </member>
        <member name="M:QuickGraph.Collections.PriorithizedVertexBuffer.Push(QuickGraph.Concepts.IVertex)">
            <summary>
            Push a new vertex on the buffer.
            </summary>
            <param name="v">new vertex</param>
        </member>
        <member name="T:QuickGraph.Collections.ReversedEdge">
            <summary>
            Summary description for ReversedEdge.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.IEdge">
            <summary>
            Edge interface
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IEdge.ID">
            <summary>
            Edge identification number
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IEdge.Source">
            <summary>
            Source vertex
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IEdge.Target">
            <summary>
            Target vertex
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.ReversedEdge.op_Equality(QuickGraph.Collections.ReversedEdge,QuickGraph.Collections.ReversedEdge)">
            <summary>
            Defines the == operator
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.ReversedEdge.op_Inequality(QuickGraph.Collections.ReversedEdge,QuickGraph.Collections.ReversedEdge)">
            <summary>
            
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.ReversedEdge.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Collections.ReversedEdgeEnumerable">
            <summary>
            Summary description for ReversedEdgeEnumerable.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.ReversedEdgeEnumerator">
            <summary>
            Summary description for ReversedEdgeEnumerator.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.Sort.ComparableComparer">
            <summary>
            Default <see cref="T:System.IComparable"/> object comparer.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Sort.ComparableComparer.Compare(System.IComparable,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Collections.Sort.DefaultSwap">
            <summary>
            Default swap class
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.Sort.ISwap">
            <summary>
            Object swapper interface
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Sort.ISwap.Swap(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Swaps left and right in the list
            </summary>
            <param name="array"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:QuickGraph.Collections.Sort.DefaultSwap.Swap(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Default swap operation
            </summary>
            <param name="array"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="T:QuickGraph.Collections.Sort.ISorter">
            <summary>
            Summary description for ISorter.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Sort.ISorter.Sort(System.Collections.IList)">
            <summary>
            Sorts the <paramref name="list"/>.
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:QuickGraph.Collections.Sort.QuickSorter">
            <summary>
            http://www.codeproject.com/csharp/csquicksort.asp
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.Sort.SwapSorter">
            <summary>
            Abstract base class for Swap sort algorithms.
            </summary>
            <remarks>
            <para>
            This class serves as a base class for swap based sort algorithms.
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Collections.Sort.SwapSorter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Sort.SwapSorter.#ctor(System.Collections.IComparer,QuickGraph.Collections.Sort.ISwap)">
            <summary>
            
            </summary>
            <param name="comparer"></param>
            <param name="swapper"></param>
        </member>
        <member name="M:QuickGraph.Collections.Sort.SwapSorter.Sort(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="list"></param>
        </member>
        <member name="P:QuickGraph.Collections.Sort.SwapSorter.Comparer">
            <summary>
            Gets or sets the <see cref="T:System.Collections.IComparer"/> object
            </summary>
            <value>
            Comparer object
            </value>
            <exception cref="T:System.ArgumentNullException">
            Set property, the value is a null reference
            </exception>
        </member>
        <member name="P:QuickGraph.Collections.Sort.SwapSorter.Swapper">
            <summary>
            Gets or set the swapper object
            </summary>
            <value>
            The <see cref="T:QuickGraph.Collections.Sort.ISwap"/> swapper.
            </value>
            <exception cref="T:System.ArgumentNullException">Swapper is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Collections.Sort.QuickSorter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.Sort.QuickSorter.#ctor(System.Collections.IComparer,QuickGraph.Collections.Sort.ISwap)">
            <summary>
            
            </summary>
            <param name="comparer"></param>
            <param name="swapper"></param>
        </member>
        <member name="M:QuickGraph.Collections.Sort.QuickSorter.Sort(System.Collections.IList)">
            <summary>
            Sorts the array.
            </summary>
            <param name="array">The array to sort.</param>
        </member>
        <member name="M:QuickGraph.Collections.Sort.QuickSorter.Sort(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="lower"></param>
            <param name="upper"></param>
        </member>
        <member name="T:QuickGraph.Collections.StringEdgeDictionary">
            <summary>
            A dictionary with keys of type String and values of type IEdge
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.StringEdgeDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the StringEdgeDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.StringEdgeDictionary.Add(System.String,QuickGraph.Concepts.IEdge)">
            <summary>
            Adds an element with the specified key and value to this StringEdgeDictionary.
            </summary>
            <param name="key">
            The String key of the element to add.
            </param>
            <param name="value">
            The IEdge value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.StringEdgeDictionary.Contains(System.String)">
            <summary>
            Determines whether this StringEdgeDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringEdgeDictionary.
            </param>
            <returns>
            true if this StringEdgeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.StringEdgeDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this StringEdgeDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringEdgeDictionary.
            </param>
            <returns>
            true if this StringEdgeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.StringEdgeDictionary.ContainsValue(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this StringEdgeDictionary contains a specific value.
            </summary>
            <param name="value">
            The IEdge value to locate in this StringEdgeDictionary.
            </param>
            <returns>
            true if this StringEdgeDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.StringEdgeDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this StringEdgeDictionary.
            </summary>
            <param name="key">
            The String key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.StringEdgeDictionary.Item(System.String)">
            <summary>
            Gets or sets the IEdge associated with the given String
            </summary>
            <param name="key">
            The String whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.StringEdgeDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this StringEdgeDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.StringEdgeDictionary.Values">
            <summary>
            Gets a collection containing the values in this StringEdgeDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.StringVertexDictionary">
            <summary>
            A dictionary with keys of type String and values of type IVertex
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.StringVertexDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the StringVertexDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.StringVertexDictionary.Add(System.String,QuickGraph.Concepts.IVertex)">
            <summary>
            Adds an element with the specified key and value to this StringVertexDictionary.
            </summary>
            <param name="key">
            The String key of the element to add.
            </param>
            <param name="value">
            The IVertex value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.StringVertexDictionary.Contains(System.String)">
            <summary>
            Determines whether this StringVertexDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringVertexDictionary.
            </param>
            <returns>
            true if this StringVertexDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.StringVertexDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this StringVertexDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this StringVertexDictionary.
            </param>
            <returns>
            true if this StringVertexDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.StringVertexDictionary.ContainsValue(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this StringVertexDictionary contains a specific value.
            </summary>
            <param name="value">
            The IVertex value to locate in this StringVertexDictionary.
            </param>
            <returns>
            true if this StringVertexDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.StringVertexDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this StringVertexDictionary.
            </summary>
            <param name="key">
            The String key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.StringVertexDictionary.Item(System.String)">
            <summary>
            Gets or sets the IVertex associated with the given String
            </summary>
            <param name="key">
            The String whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.StringVertexDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this StringVertexDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.StringVertexDictionary.Values">
            <summary>
            Gets a collection containing the values in this StringVertexDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.TargetVertexEnumerator">
            <summary>
            Summary description for AdjacentVertexEnumerator.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.Vector2D">
            <summary>
            Summary description for Vector2D.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexCollection">
            <summary>
            A collection of elements of type Vertex
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.IVertexCollection">
            <summary>
            A vertex enumerable collection
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.#ctor">
            <summary>
            Initializes a new empty instance of the VertexCollection class.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.#ctor(QuickGraph.Concepts.IVertex[])">
            <summary>
            Initializes a new instance of the VertexCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new VertexCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.#ctor(QuickGraph.Concepts.Collections.IVertexEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickGraph.Concepts.Collections.IVertexEnumerable"/> 
            interface, containing elements
            copied from another instance of VertexCollection
            </summary>
            <param name="items">
            The <see cref="T:QuickGraph.Concepts.Collections.IVertexEnumerable"/> whose elements are to be added to the new VertexCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.AddRange(QuickGraph.Concepts.IVertex[])">
            <summary>
            Adds the elements of an array to the end of this VertexCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this VertexCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.AddRange(QuickGraph.Concepts.Collections.IVertexEnumerable)">
            <summary>
            Adds the elements of another <see cref="T:QuickGraph.Concepts.Collections.IVertexEnumerable"/> 
            to the end of this VertexCollection.
            </summary>
            <param name="items">
            The <see cref="T:QuickGraph.Concepts.Collections.IVertexEnumerable"/> whose elements are to 
            be added to the end of this VertexCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.Add(QuickGraph.Concepts.IVertex)">
            <summary>
            Adds an instance of type Vertex to the end of this VertexCollection.
            </summary>
            <param name="value">
            The Vertex to be added to the end of this VertexCollection.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether a specfic Vertex value is in this VertexCollection.
            </summary>
            <param name="value">
            The Vertex value to locate in this VertexCollection.
            </param>
            <returns>
            true if value is found in this VertexCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.IndexOf(QuickGraph.Concepts.IVertex)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this VertexCollection
            </summary>
            <param name="value">
            The Vertex value to locate in the VertexCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.Insert(System.Int32,QuickGraph.Concepts.IVertex)">
            <summary>
            Inserts an element into the VertexCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Vertex is to be inserted.
            </param>
            <param name="value">
            The Vertex to insert.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this VertexCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the first occurrence of a specific Vertex from this VertexCollection.
            </summary>
            <param name="value">
            The Vertex value to remove from this VertexCollection.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Vertex at the given index in this VertexCollection.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by VertexCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.Enumerator.#ctor(QuickGraph.Collections.VertexCollection)">
            <summary>
            Builds a enumerator on the collection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexCollection.Enumerator.Current">
            <summary>
            Current vertex
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexColorDictionary">
            <summary>
            A dictionary with keys of type Vertex and values of type GraphColor
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexColorDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexColorDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexColorDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.GraphColor)">
            <summary>
            Adds an element with the specified key and value to this VertexColorDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to add.
            </param>
            <param name="value">
            The GraphColor value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexColorDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexColorDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexColorDictionary.
            </param>
            <returns>
            true if this VertexColorDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexColorDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexColorDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexColorDictionary.
            </param>
            <returns>
            true if this VertexColorDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexColorDictionary.ContainsValue(QuickGraph.Concepts.GraphColor)">
            <summary>
            Determines whether this VertexColorDictionary contains a specific value.
            </summary>
            <param name="value">
            The GraphColor value to locate in this VertexColorDictionary.
            </param>
            <returns>
            true if this VertexColorDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexColorDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexColorDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexColorDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the GraphColor associated with the given Vertex
            </summary>
            <param name="key">
            The Vertex whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexColorDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexColorDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexColorDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexColorDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexDoubleDictionary">
            <summary>
            A dictionary with keys of type Vertex and values of type Double
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoubleDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexDistanceDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoubleDictionary.Add(QuickGraph.Concepts.IVertex,System.Double)">
            <summary>
            Adds an element with the specified key and value to this VertexDistanceDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to add.
            </param>
            <param name="value">
            The Double value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoubleDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexDistanceDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexDistanceDictionary.
            </param>
            <returns>
            true if this VertexDistanceDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoubleDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexDistanceDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexDistanceDictionary.
            </param>
            <returns>
            true if this VertexDistanceDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoubleDictionary.ContainsValue(System.Double)">
            <summary>
            Determines whether this VertexDistanceDictionary contains a specific value.
            </summary>
            <param name="value">
            The Double value to locate in this VertexDistanceDictionary.
            </param>
            <returns>
            true if this VertexDistanceDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoubleDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexDistanceDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexDoubleDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the Double associated with the given Vertex
            </summary>
            <param name="key">
            The Vertex whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexDoubleDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexDistanceDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexDoubleDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexDistanceDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexDoublesDictionary">
            <summary>
            A dictionary with keys of type IVertex and values of type DoubleCollection
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoublesDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexDoublesDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoublesDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Collections.DoubleCollection)">
            <summary>
            Adds an element with the specified key and value to this VertexDoublesDictionary.
            </summary>
            <param name="key">
            The IVertex key of the element to add.
            </param>
            <param name="value">
            The DoubleCollection value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoublesDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexDoublesDictionary contains a specific key.
            </summary>
            <param name="key">
            The IVertex key to locate in this VertexDoublesDictionary.
            </param>
            <returns>
            true if this VertexDoublesDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoublesDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexDoublesDictionary contains a specific key.
            </summary>
            <param name="key">
            The IVertex key to locate in this VertexDoublesDictionary.
            </param>
            <returns>
            true if this VertexDoublesDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoublesDictionary.ContainsValue(QuickGraph.Collections.DoubleCollection)">
            <summary>
            Determines whether this VertexDoublesDictionary contains a specific value.
            </summary>
            <param name="value">
            The DoubleCollection value to locate in this VertexDoublesDictionary.
            </param>
            <returns>
            true if this VertexDoublesDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexDoublesDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexDoublesDictionary.
            </summary>
            <param name="key">
            The IVertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexDoublesDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the DoubleCollection associated with the given IVertex
            </summary>
            <param name="key">
            The IVertex whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexDoublesDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexDoublesDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexDoublesDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexDoublesDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexEdgeDictionary">
            <summary>
            A dictionary with keys of type Vertex and values of type Edge
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgeDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexEdgeDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgeDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IEdge)">
            <summary>
            Adds an element with the specified key and value to this VertexEdgeDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to add.
            </param>
            <param name="value">
            The Edge value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgeDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexEdgeDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexEdgeDictionary.
            </param>
            <returns>
            true if this VertexEdgeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgeDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexEdgeDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexEdgeDictionary.
            </param>
            <returns>
            true if this VertexEdgeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgeDictionary.ContainsValue(QuickGraph.Concepts.IEdge)">
            <summary>
            Determines whether this VertexEdgeDictionary contains a specific value.
            </summary>
            <param name="value">
            The Edge value to locate in this VertexEdgeDictionary.
            </param>
            <returns>
            true if this VertexEdgeDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgeDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexEdgeDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexEdgeDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the Edge associated with the given Vertex
            </summary>
            <param name="key">
            The Vertex whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexEdgeDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexEdgeDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexEdgeDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexEdgeDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexEdgesDictionary">
            <summary>
            A dictionary with keys of type Vertex and values of type EdgeCollection
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexEdgesDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Collections.EdgeCollection)">
            <summary>
            Adds an element with the specified key and value to this VertexEdgesDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to add.
            </param>
            <param name="value">
            The EdgeCollection value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexEdgesDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexEdgesDictionary.
            </param>
            <returns>
            true if this VertexEdgesDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexEdgesDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexEdgesDictionary.
            </param>
            <returns>
            true if this VertexEdgesDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesDictionary.ContainsValue(QuickGraph.Collections.EdgeCollection)">
            <summary>
            Determines whether this VertexEdgesDictionary contains a specific value.
            </summary>
            <param name="value">
            The EdgeCollection value to locate in this VertexEdgesDictionary.
            </param>
            <returns>
            true if this VertexEdgesDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexEdgesDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexEdgesDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the EdgeCollection associated with the given Vertex
            </summary>
            <param name="key">
            The Vertex whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexEdgesDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexEdgesDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexEdgesDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexEdgesDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexEdgesEnumerable">
            <summary>
            A simple IEnumerable class that provides an enumerator over
            the graph edges.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesEnumerable.#ctor(QuickGraph.Collections.VertexEdgesDictionary)">
            <summary>
            Construct an enumerable collection of edges
            </summary>
            <param name="vertexOutEdges">vertex out edges dictionary</param>
            <exception cref="T:System.ArgumentNullException">vertexOutEdges is null</exception>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesEnumerable.GetEnumerator">
            <summary>
            Provides an enumerator over the graph edges
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements the IEnumerable method.
            </summary>
            <returns>An enumerator over the edges</returns>
        </member>
        <member name="T:QuickGraph.Collections.VertexEdgesEnumerator">
            <summary>
            An adaptor class to enumerate edges.
            </summary>
            <remarks>
            <para>
            The enumerator works be succesively iterating the vertices 
            out-edges.
            </para>
            <para>
            This class should not be constructed directly. It is created on
            a <c>GetEnumerator()</c> call.
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesEnumerator.#ctor(QuickGraph.Collections.VertexEdgesDictionary)">
            <summary>
            Construct an enumerator over the out-edges
            </summary>
            <param name="vertexOutEdges">Out edge dictionary to iterate</param>
            <exception cref="T:System.ArgumentNullException">vertexOutEdges is null</exception>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, 
            which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the 
            collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the 
            next edge; false if the enumerator has passed the end of 
            the collection.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexEdgesEnumerator.MoveNextVertex">
            <summary>
            Move the vertex iterator to the next vertex.
            </summary>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.VertexEdgesEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The enumerator 
            is positioned before the first element of the collection 
            or after the last element.</exception>
        </member>
        <member name="P:QuickGraph.Collections.VertexEdgesEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Implement IEnumerator.Current.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexEnumerable">
            <summary>
            A wrapper class for weak collection of IVertex
            </summary>
            <remarks>
            <para>
            This class works as a proxy for a weakly named collection of IVertex by
            implementing the IVertexEnumerable interface.
            </para>
            </remarks>
            <example>
            In this example, we show how to convert the key collection of
            a vertex dictionary to a stronly typed collection:
            <code>
            VertexStringDictionary names = new VertexStringDictionary();
            // adding names
            ...
            // this will fail names.Keys implements IEnumerable.
            IVertexEnumerable c = names.Keys;
            // wrapping the keys
            IVertexEnumrable c = new VertexEnumerable(names.Keys);
            </code>
            </example>
        </member>
        <member name="M:QuickGraph.Collections.VertexEnumerable.#ctor(System.Collections.IEnumerable)">
            <summary>
            Constructor
            </summary>
            <param name="en">Wrapped enumerable</param>
            <exception cref="T:System.ArgumentNullException">en is null</exception>
        </member>
        <member name="M:QuickGraph.Collections.VertexEnumerable.Wrap(System.Collections.IEnumerable)">
            <summary>
            Wraps up the weakly typed collection in a strongly typed (IVertex)
            collection.
            </summary>
            <param name="en">Collection to wrap</param>
            <returns>vertex enumerable collection</returns>
            <remarks>
            <para>
            The method is thread-safe.
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Collections.VertexEnumerable.GetEnumerator">
            <summary>
            Return a strongly typed enumerator
            </summary>
            <returns>strongly typed enumerator</returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexEnumerable.QuickGraph#Concepts#Collections#IVertexEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.VertexEnumerable.Enumerable">
            <summary>
            Wrapped enumerable
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexEnumerable.Enumerator">
            <summary>
            Strongly typed enumerator
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexEnumerable.Enumerator.#ctor(System.Collections.IEnumerator)">
            <summary>
            Builds a new enumrator
            </summary>
            <param name="e">wrapped enumerator</param>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="M:QuickGraph.Collections.VertexEnumerable.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexEnumerable.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.VertexEnumerable.Enumerator.Wrapped">
            <summary>
            Wrapped enumerator
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexEnumerable.Enumerator.Current">
            <summary>
            Current vertex
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexEnumerable.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexIntDictionary">
            <summary>
            A dictionary with keys of type Vertex and values of type int
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexIntDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexIntDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexIntDictionary.Add(QuickGraph.Concepts.IVertex,System.Int32)">
            <summary>
            Adds an element with the specified key and value to this VertexIntDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to add.
            </param>
            <param name="value">
            The int value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexIntDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexIntDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexIntDictionary.
            </param>
            <returns>
            true if this VertexIntDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexIntDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexIntDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexIntDictionary.
            </param>
            <returns>
            true if this VertexIntDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexIntDictionary.ContainsValue(System.Int32)">
            <summary>
            Determines whether this VertexIntDictionary contains a specific value.
            </summary>
            <param name="value">
            The int value to locate in this VertexIntDictionary.
            </param>
            <returns>
            true if this VertexIntDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexIntDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexIntDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexIntDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the int associated with the given Vertex
            </summary>
            <param name="key">
            The Vertex whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexIntDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexIntDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexIntDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexIntDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexObjectDictionary">
            <summary>
            A dictionary with keys of type Vertex and values of type Object
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexObjectDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexObjectDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexObjectDictionary.Add(QuickGraph.Concepts.IVertex,System.Object)">
            <summary>
            Adds an element with the specified key and value to this VertexObjectDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to add.
            </param>
            <param name="value">
            The Object value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexObjectDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexObjectDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexObjectDictionary.
            </param>
            <returns>
            true if this VertexObjectDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexObjectDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexObjectDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexObjectDictionary.
            </param>
            <returns>
            true if this VertexObjectDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexObjectDictionary.ContainsValue(System.Object)">
            <summary>
            Determines whether this VertexObjectDictionary contains a specific value.
            </summary>
            <param name="value">
            The Object value to locate in this VertexObjectDictionary.
            </param>
            <returns>
            true if this VertexObjectDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexObjectDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexObjectDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexObjectDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the Object associated with the given Vertex
            </summary>
            <param name="key">
            The Vertex whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexObjectDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexObjectDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexObjectDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexObjectDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexPair">
            <summary>
            A class containing a pair of <see cref="T:QuickGraph.Concepts.IVertex"/>.
            </summary>
            <remarks>
            Mini-class useful in a number of situations.
            </remarks>
        </member>
        <member name="M:QuickGraph.Collections.VertexPair.#ctor(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Create a <see cref="T:QuickGraph.Concepts.IVertex"/> pair
            </summary>
            <param name="first">first <see cref="T:QuickGraph.Concepts.IVertex"/> instance</param>
            <param name="second">second <see cref="T:QuickGraph.Concepts.IVertex"/> instance</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="first"/> or <paramref name="second"/> is a null 
            reference
            </exception>
        </member>
        <member name="M:QuickGraph.Collections.VertexPair.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.VertexPair.First">
            <summary>
            Gets or sets the first <see cref="T:QuickGraph.Concepts.IVertex"/> instance
            </summary>
            <value>
            First <see cref="T:QuickGraph.Concepts.IVertex"/> instance.
            </value>
            <exception cref="T:System.ArgumentNullException">
            set property, value is a null reference
            </exception>
        </member>
        <member name="P:QuickGraph.Collections.VertexPair.Second">
            <summary>
            Gets or sets the second <see cref="T:QuickGraph.Concepts.IVertex"/> instance
            </summary>
            <value>
            Second <see cref="T:QuickGraph.Concepts.IVertex"/> instance.
            </value>
            <exception cref="T:System.ArgumentNullException">
            set property, value is a null reference
            </exception>
        </member>
        <member name="T:QuickGraph.Collections.VertexPairDoubleDictionary">
            <summary>
            A dictionary with keys of type VertexPair and values of type double
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.IVertexDistanceMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Collections.IVertexDistanceMatrix.Distance(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Concepts.Collections.IVertexDistanceMatrix.SetDistance(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex,System.Double)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="distance"></param>
        </member>
        <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexPairDoubleDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.Distance(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.SetDistance(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex,System.Double)">
            <summary>
            
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="d"></param>
        </member>
        <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.Add(QuickGraph.Collections.VertexPair,System.Double)">
            <summary>
            Adds an element with the specified key and value to this VertexPairDoubleDictionary.
            </summary>
            <param name="key">
            The VertexPair key of the element to add.
            </param>
            <param name="value">
            The double value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.Contains(QuickGraph.Collections.VertexPair)">
            <summary>
            Determines whether this VertexPairDoubleDictionary contains a specific key.
            </summary>
            <param name="key">
            The VertexPair key to locate in this VertexPairDoubleDictionary.
            </param>
            <returns>
            true if this VertexPairDoubleDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.ContainsKey(QuickGraph.Collections.VertexPair)">
            <summary>
            Determines whether this VertexPairDoubleDictionary contains a specific key.
            </summary>
            <param name="key">
            The VertexPair key to locate in this VertexPairDoubleDictionary.
            </param>
            <returns>
            true if this VertexPairDoubleDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.ContainsValue(System.Double)">
            <summary>
            Determines whether this VertexPairDoubleDictionary contains a specific value.
            </summary>
            <param name="value">
            The double value to locate in this VertexPairDoubleDictionary.
            </param>
            <returns>
            true if this VertexPairDoubleDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexPairDoubleDictionary.Remove(QuickGraph.Collections.VertexPair)">
            <summary>
            Removes the element with the specified key from this VertexPairDoubleDictionary.
            </summary>
            <param name="key">
            The VertexPair key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexPairDoubleDictionary.Item(QuickGraph.Collections.VertexPair)">
            <summary>
            Gets or sets the double associated with the given VertexPair
            </summary>
            <param name="key">
            The VertexPair whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexPairDoubleDictionary.Item(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Returns
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Collections.VertexPairDoubleDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexPairDoubleDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexPairDoubleDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexPairDoubleDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexPointFDictionary">
            <summary>
            A dictionary with keys of type IVertex and values of type PointF
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexPointFDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexPointFDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexPointFDictionary.Add(QuickGraph.Concepts.IVertex,System.Drawing.PointF)">
            <summary>
            Adds an element with the specified key and value to this VertexPointFDictionary.
            </summary>
            <param name="key">
            The IVertex key of the element to add.
            </param>
            <param name="value">
            The PointF value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexPointFDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexPointFDictionary contains a specific key.
            </summary>
            <param name="key">
            The IVertex key to locate in this VertexPointFDictionary.
            </param>
            <returns>
            true if this VertexPointFDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexPointFDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexPointFDictionary contains a specific key.
            </summary>
            <param name="key">
            The IVertex key to locate in this VertexPointFDictionary.
            </param>
            <returns>
            true if this VertexPointFDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexPointFDictionary.ContainsValue(System.Drawing.PointF)">
            <summary>
            Determines whether this VertexPointFDictionary contains a specific value.
            </summary>
            <param name="value">
            The PointF value to locate in this VertexPointFDictionary.
            </param>
            <returns>
            true if this VertexPointFDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexPointFDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexPointFDictionary.
            </summary>
            <param name="key">
            The IVertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexPointFDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the PointF associated with the given IVertex
            </summary>
            <param name="key">
            The IVertex whose value to get or set.
            </param>
        </member>
        <member name="T:QuickGraph.Collections.VertexSizeFDictionary">
            <summary>
            A dictionary with keys of type IVertex and values of type Size
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexSizeFDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexSizeDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexSizeFDictionary.Add(QuickGraph.Concepts.IVertex,System.Drawing.SizeF)">
            <summary>
            Adds an element with the specified key and value to this VertexSizeDictionary.
            </summary>
            <param name="key">
            The IVertex key of the element to add.
            </param>
            <param name="value">
            The Size value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexSizeFDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexSizeDictionary contains a specific key.
            </summary>
            <param name="key">
            The IVertex key to locate in this VertexSizeDictionary.
            </param>
            <returns>
            true if this VertexSizeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexSizeFDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexSizeDictionary contains a specific key.
            </summary>
            <param name="key">
            The IVertex key to locate in this VertexSizeDictionary.
            </param>
            <returns>
            true if this VertexSizeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexSizeFDictionary.ContainsValue(System.Drawing.SizeF)">
            <summary>
            Determines whether this VertexSizeDictionary contains a specific value.
            </summary>
            <param name="value">
            The Size value to locate in this VertexSizeDictionary.
            </param>
            <returns>
            true if this VertexSizeDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexSizeFDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexSizeDictionary.
            </summary>
            <param name="key">
            The IVertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexSizeFDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the Size associated with the given IVertex
            </summary>
            <param name="key">
            The IVertex whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexSizeFDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexSizeDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexSizeFDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexSizeDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexStringDictionary">
            <summary>
            A dictionary with keys of type Vertex and values of type String
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexStringDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexStringDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexStringDictionary.Add(QuickGraph.Concepts.IVertex,System.String)">
            <summary>
            Adds an element with the specified key and value to this VertexStringDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to add.
            </param>
            <param name="value">
            The String value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexStringDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexStringDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexStringDictionary.
            </param>
            <returns>
            true if this VertexStringDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexStringDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexStringDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexStringDictionary.
            </param>
            <returns>
            true if this VertexStringDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexStringDictionary.ContainsValue(System.String)">
            <summary>
            Determines whether this VertexStringDictionary contains a specific value.
            </summary>
            <param name="value">
            The String value to locate in this VertexStringDictionary.
            </param>
            <returns>
            true if this VertexStringDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexStringDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexStringDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexStringDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the String associated with the given Vertex
            </summary>
            <param name="key">
            The Vertex whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexStringDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexStringDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexStringDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexStringDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexVector2DDictionary">
            <summary>
            A dictionary with keys of type IVertex and values of type Vector2D
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexVector2DDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexVector2DDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexVector2DDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Collections.Vector2D)">
            <summary>
            Adds an element with the specified key and value to this VertexVector2DDictionary.
            </summary>
            <param name="key">
            The IVertex key of the element to add.
            </param>
            <param name="value">
            The Vector2D value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexVector2DDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexVector2DDictionary contains a specific key.
            </summary>
            <param name="key">
            The IVertex key to locate in this VertexVector2DDictionary.
            </param>
            <returns>
            true if this VertexVector2DDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexVector2DDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexVector2DDictionary contains a specific key.
            </summary>
            <param name="key">
            The IVertex key to locate in this VertexVector2DDictionary.
            </param>
            <returns>
            true if this VertexVector2DDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexVector2DDictionary.ContainsValue(QuickGraph.Collections.Vector2D)">
            <summary>
            Determines whether this VertexVector2DDictionary contains a specific value.
            </summary>
            <param name="value">
            The Vector2D value to locate in this VertexVector2DDictionary.
            </param>
            <returns>
            true if this VertexVector2DDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexVector2DDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexVector2DDictionary.
            </summary>
            <param name="key">
            The IVertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexVector2DDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the Vector2D associated with the given IVertex
            </summary>
            <param name="key">
            The IVertex whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexVector2DDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexVector2DDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexVector2DDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexVector2DDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Collections.VertexVertexDictionary">
            <summary>
            A dictionary with keys of type Vertex and values of type Vertex
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexVertexDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the VertexVertexDictionary class
            </summary>
        </member>
        <member name="M:QuickGraph.Collections.VertexVertexDictionary.Add(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Adds an element with the specified key and value to this VertexVertexDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to add.
            </param>
            <param name="value">
            The Vertex value of the element to add.
            </param>
        </member>
        <member name="M:QuickGraph.Collections.VertexVertexDictionary.Contains(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexVertexDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexVertexDictionary.
            </param>
            <returns>
            true if this VertexVertexDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexVertexDictionary.ContainsKey(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexVertexDictionary contains a specific key.
            </summary>
            <param name="key">
            The Vertex key to locate in this VertexVertexDictionary.
            </param>
            <returns>
            true if this VertexVertexDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexVertexDictionary.ContainsValue(QuickGraph.Concepts.IVertex)">
            <summary>
            Determines whether this VertexVertexDictionary contains a specific value.
            </summary>
            <param name="value">
            The Vertex value to locate in this VertexVertexDictionary.
            </param>
            <returns>
            true if this VertexVertexDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:QuickGraph.Collections.VertexVertexDictionary.Remove(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes the element with the specified key from this VertexVertexDictionary.
            </summary>
            <param name="key">
            The Vertex key of the element to remove.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexVertexDictionary.Item(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets or sets the Vertex associated with the given Vertex
            </summary>
            <param name="key">
            The Vertex whose value to get or set.
            </param>
        </member>
        <member name="P:QuickGraph.Collections.VertexVertexDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this VertexVertexDictionary.
            </summary>
        </member>
        <member name="P:QuickGraph.Collections.VertexVertexDictionary.Values">
            <summary>
            Gets a collection containing the values in this VertexVertexDictionary.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Algorithms.IAlgorithm">
            <summary>
            IAlgorithm interface.
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.Algorithms.IAlgorithm.VisitedGraph">
            <summary>
            Visited graph object
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Algorithms.IDistanceRecorderAlgorithm">
            <summary>
            Defines an algorithm that supports vertex distance recording.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Algorithms.IDistanceRecorderAlgorithm.RegisterDistanceRecorderHandlers(QuickGraph.Concepts.Visitors.IDistanceRecorderVisitor)">
            <summary>
            Add event handlers to the corresponding events.
            </summary>
            <param name="vis">Distance recorder visitor</param>
        </member>
        <member name="T:QuickGraph.Concepts.Algorithms.IEdgeColorizerAlgorithm">
            <summary>
            Edge colorzing algorithm
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Algorithms.IEdgeColorizerAlgorithm.RegisterEdgeColorizerHandlers(QuickGraph.Concepts.Visitors.IEdgeColorizerVisitor)">
            <summary>
            
            </summary>
            <param name="vis"></param>
        </member>
        <member name="P:QuickGraph.Concepts.Algorithms.IEdgeColorizerAlgorithm.EdgeColors">
            <summary>
            Edge color map
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Algorithms.IEdgePredecessorRecorderAlgorithm">
            <summary>
            Defines an algorithm that support edge predecessor recording.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Algorithms.IEdgePredecessorRecorderAlgorithm.RegisterEdgePredecessorRecorderHandlers(QuickGraph.Concepts.Visitors.IEdgePredecessorRecorderVisitor)">
            <summary>
            Register the predecessor handlers
            </summary>
            <param name="vis">visitor</param>
        </member>
        <member name="T:QuickGraph.Concepts.Algorithms.IPredecessorRecorderAlgorithm">
            <summary>
            Defines an algorithm that support predecessor recording.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Algorithms.IPredecessorRecorderAlgorithm.RegisterPredecessorRecorderHandlers(QuickGraph.Concepts.Visitors.IPredecessorRecorderVisitor)">
            <summary>
            Register the predecessor handlers
            </summary>
            <param name="vis">visitor</param>
        </member>
        <member name="T:QuickGraph.Concepts.Algorithms.ITimeStamperAlgorithm">
            <summary>
            Defines an algorithm that supports time stamping.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Algorithms.ITimeStamperAlgorithm.RegisterTimeStamperHandlers(QuickGraph.Concepts.Visitors.ITimeStamperVisitor)">
            <summary>
            
            </summary>
            <param name="vis"></param>
        </member>
        <member name="T:QuickGraph.Concepts.Algorithms.ITreeEdgeBuilderAlgorithm">
            <summary>
            An algorithm that implement TreeEdge event.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Algorithms.ITreeEdgeBuilderAlgorithm.RegisterTreeEdgeBuilderHandlers(QuickGraph.Concepts.Visitors.ITreeEdgeBuilderVisitor)">
            <summary>
            
            </summary>
            <param name="vis"></param>
        </member>
        <member name="T:QuickGraph.Concepts.Algorithms.IVertexColorizerAlgorithm">
            <summary>
            Description résumée de IVertexColorizerAlgorithm.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Algorithms.IVertexColorizerAlgorithm.RegisterVertexColorizerHandlers(QuickGraph.Concepts.Visitors.IVertexColorizerVisitor)">
            <summary>
            
            </summary>
            <param name="vis"></param>
        </member>
        <member name="P:QuickGraph.Concepts.Algorithms.IVertexColorizerAlgorithm.Colors">
            <summary>
            Vertex color map
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Algorithms.NamespaceDoc">
            <summary>
            <para>
            The <b>QuickGraph.Concepts.Algorithms</b> namespace contains 
            the interfaces that define algorithm concept and behaviors.
            </para>
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.IPortCollection">
            <summary>
            A collection of <see cref="T:QuickGraph.Concepts.IPort"/> instance
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.IPortEnumerable">
            <summary>
            <see cref="T:QuickGraph.Concepts.IVertex"/> enumerable collection
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Collections.IPortEnumerable.GetEnumerator">
            <summary>
            Gets an <see cref="T:QuickGraph.Concepts.Collections.IPortEnumerator"/> instance
            </summary>
            <returns>
            A <see cref="T:QuickGraph.Concepts.Collections.IPortEnumerator"/> instance.
            </returns>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.IPortEnumerator">
            <summary>
            An <see cref="T:QuickGraph.Concepts.IPort"/> enumerator
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.Collections.IPortEnumerator.Current">
            <summary>
            Current <see cref="T:QuickGraph.Concepts.IPort"/>
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.IVertexPredecessorMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Collections.IVertexPredecessorMatrix.Predecessor(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Concepts.Collections.IVertexPredecessorMatrix.SetPredecessor(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="predecessor"></param>
        </member>
        <member name="T:QuickGraph.Concepts.Collections.NamespaceDoc">
            <summary>
            The <b>QuickGraph.Concepts.Collections</b> defines strongly typed
            interface for iterating vertices and edges.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.VertexEventArgs">
            <summary>
            Event argument that contains a <seealso cref="P:QuickGraph.Concepts.VertexEventArgs.Vertex"/>.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.VertexEventArgs.#ctor(QuickGraph.Concepts.IVertex)">
            <summary>
            Builds a new event argument object
            </summary>
            <param name="v">vertex to store</param>
        </member>
        <member name="P:QuickGraph.Concepts.VertexEventArgs.Vertex">
            <summary>
            Vertex passed to the event
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.VertexEventHandler">
            <summary>
            Delegate that handles an event that sends a vertex.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.EdgeEventArgs">
            <summary>
            Event argument that contains an <seealso cref="T:QuickGraph.Concepts.IEdge"/>.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.EdgeEventArgs.#ctor(QuickGraph.Concepts.IEdge)">
            <summary>
            Create a new event argument
            </summary>
            <param name="e">edge to store</param>
        </member>
        <member name="P:QuickGraph.Concepts.EdgeEventArgs.Edge">
            <summary>
            Edge passed to the event
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.EdgeEventHandler">
            <summary>
            Delegate that handles an edge that sends a vertex.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.EdgeEdgeEventArgs">
            <summary>
            Event argument that contains two <seealso cref="T:QuickGraph.Concepts.IEdge"/>.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.EdgeEdgeEventArgs.#ctor(QuickGraph.Concepts.IEdge,QuickGraph.Concepts.IEdge)">
            <summary>
            Create a new event argument
            </summary>
            <param name="e">edge to store</param>
            <param name="targetEdge"></param>
        </member>
        <member name="P:QuickGraph.Concepts.EdgeEdgeEventArgs.TargetEdge">
            <summary>
            Edge passed to the event
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.EdgeEdgeEventHandler">
            <summary>
            Delegate that handles an edge that sends a vertex.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.EdgePort">
            <summary>
            Edge port enumeration
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.EdgePort.Undefined">
            <summary>
            Unknown port
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.EdgePort.LowerLeft">
            <summary>
            Lower left port
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.EdgePort.LowerRight">
            <summary>
            Lower right port
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.EdgePort.UpperLeft">
            <summary>
            Upper left port
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.EdgePort.UpperRight">
            <summary>
            Upper right port
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.EdgePort.MiddleLeft">
            <summary>
            Middle left port
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.EdgePort.MiddleRight">
            <summary>
            Middle right port
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.EdgePort.MiddleTop">
            <summary>
            Middle top port
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.EdgePort.MiddleBottom">
            <summary>
            Middle bottom port
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.GraphColor">
            <summary>
            Colors used to mark the vertex and edges in the algorithms
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.GraphColor.White">
            <summary>
            White color, usually describes describes vertex.
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.GraphColor.Black">
            <summary>
            Black color, usually describes finished vertex.
            </summary>
        </member>
        <member name="F:QuickGraph.Concepts.GraphColor.Gray">
            <summary>
            Gray color
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.GraphColorConverter">
            <summary>
            Utility class for graph color conversion
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.GraphColorConverter.#ctor">
            <summary>
            No constructor
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.GraphColorConverter.Convert(QuickGraph.Concepts.GraphColor,System.Int32)">
            <summary>
            Converts GraphColor to System.Drawing.Color
            </summary>
            <param name="c">graph color to convert</param>
            <param name="alpha">alpha component</param>
            <returns>corresponding Color</returns>
        </member>
        <member name="M:QuickGraph.Concepts.GraphColorConverter.Convert(QuickGraph.Concepts.GraphColor)">
            <summary>
            Converts GraphColor to System.Drawing.Color
            </summary>
            <param name="c">graph color to convert</param>
            <returns>corresponding Color</returns>
        </member>
        <member name="T:QuickGraph.Concepts.IPort">
            <summary>
            A port represents an anchor between an edge and a vertex
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IPort.ID">
            <summary>
            Port identification number
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IPort.name">
            <summary>
            The name of the port
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IPort.Parent">
            <summary>
            Gets or sets the parent vertex
            </summary>
            <value>
            The parent <see cref="T:QuickGraph.Concepts.IVertex"/> instance
            </value>
        </member>
        <member name="T:QuickGraph.Concepts.IPortEdge">
            <summary>
            An edge with ports attachement
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IPortEdge.Source">
            <summary>
            Source vertex
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IPortEdge.Target">
            <summary>
            Target vertex
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IPortEdge.SourcePort">
            <summary>
            Source port
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IPortEdge.TargetPort">
            <summary>
            Target port
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.IPortVertex">
            <summary>
            A <see cref="T:QuickGraph.Concepts.IVertex"/> with <see cref="T:QuickGraph.Concepts.IPort"/>.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.IVertex">
            <summary>
            Vertex interface
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IVertex.ID">
            <summary>
            Vertex unique identification number
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.IPortVertex.Ports">
            <summary>
            Gets a collection of <see cref="T:QuickGraph.Concepts.IPort"/> associated
            to the vertex
            </summary>
            <value>
            A <see cref="T:QuickGraph.Concepts.Collections.IPortCollection"/> of <see cref="T:QuickGraph.Concepts.IPort"/>
            instance attached to the vertex
            </value>
        </member>
        <member name="T:QuickGraph.Concepts.Modifications.IEdgeMutableGraph">
            <summary>
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Modifications.IVertexMutableGraph">
            <summary>
             Defines a graph that can be modified by adding or removing vertices.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IMutableGraph.Clear">
            <summary>
            Clears the graph.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IVertexMutableGraph.AddVertex">
            <summary>
            Adds a new vertex to the graph.
            </summary>
            <remarks>
            Creates a new <see cref="T:QuickGraph.Concepts.IVertex"/> instance and adds it to the
            graph.
            </remarks>
            <returns>new <see cref="T:QuickGraph.Concepts.IVertex"/> instance</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IVertexMutableGraph.RemoveVertex(QuickGraph.Concepts.IVertex)">
            <summary>
            Remove u from the vertex set of the graph. 
            Note that undefined behavior may result if there are edges 
            remaining in the graph who's target is u. 
            
            Typically the ClearVertex function should be called first.
            </summary>
            <param name="u">vertex to clear</param>
            <exception cref="T:System.ArgumentNullException">u is a null reference</exception>
        </member>
        <member name="P:QuickGraph.Concepts.Modifications.IVertexMutableGraph.VertexProvider">
            <summary>
            Returns the vertex provider
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IEdgeMutableGraph.ClearVertex(QuickGraph.Concepts.IVertex)">
            <summary>
            Remove all edges to and from vertex u from the graph.
            </summary>
            <param name="u"></param>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IEdgeMutableGraph.AddEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Inserts the edge (u,v) into the graph, and returns the new edge.
            </summary>
            <remarks>
            <para>
            This method attemps to insert the edge (u,v) into the graph, 
            returning the inserted edge or a parrallel edge. If the insertion
            was not successful, the returned edge is null.
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IEdgeMutableGraph.RemoveEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Remove the edge (u,v) from the graph. 
            If the graph allows parallel edges this remove all occurrences of 
            (u,v).
            </summary>
            <param name="u">source vertex</param>
            <param name="v">target vertex</param>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IEdgeMutableGraph.RemoveEdge(QuickGraph.Concepts.IEdge)">
            <summary>
            Removes the edge e
            </summary>
            <param name="e">edge to remove</param>
            <exception cref="T:System.ArgumentException">Edge not found</exception>
        </member>
        <member name="P:QuickGraph.Concepts.Modifications.IEdgeMutableGraph.EdgeProvider">
            <summary>
            Returns the vertex provider
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Modifications.IMutableBidirectionalGraph">
            <summary>
            Description résumée de IMutableBidirectionalGraph.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Modifications.IMutableIncidenceGraph">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IMutableIncidenceGraph.RemoveOutEdgeIf(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Remove all the out-edges of vertex u for which the predicate pred 
            returns true.
            </summary>
            <param name="u">vertex</param>
            <param name="pred">edge predicate</param>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IMutableBidirectionalGraph.RemoveInEdgeIf(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Remove all the in-edges of vertex u for which the predicate pred 
            returns true.
            </summary>
            <param name="u">vertex</param>
            <param name="pred">edge predicate</param>
        </member>
        <member name="T:QuickGraph.Concepts.Modifications.IMutableEdgeListGraph">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IMutableEdgeListGraph.RemoveEdgeIf(QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Remove all the edges from graph g for which the predicate pred
            returns true.
            </summary>
            <param name="pred">edge predicate</param>
        </member>
        <member name="T:QuickGraph.Concepts.Modifications.IMutableTreeGraph">
            <summary>
            A mutable tree-like graph
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IMutableTreeGraph.AddChild(QuickGraph.Concepts.IVertex)">
            <summary>
            Adds a child vertex to the tree
            </summary>
            <param name="parent">parent vertex</param>
            <returns>created vertex</returns>
            <exception cref="T:System.ArgumentNullException">parent is a null reference</exception>
            <exception cref="T:QuickGraph.Exceptions.NonAcyclicGraphException">
            if <c>AllowCycles</c> is false and the edge creates a cycle
            </exception>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.IMutableTreeGraph.RemoveTree(QuickGraph.Concepts.IVertex)">
            <summary>
            Removes vertex and sub-tree
            </summary>
            <param name="root">vertex to remove</param>
            <exception cref="T:System.ArgumentNullException">v is a null reference</exception>
            <exception cref="T:QuickGraph.Exceptions.GraphNotStronglyConnectedException">
            Removing the vertex breaks the graph connectivity
            </exception>
        </member>
        <member name="P:QuickGraph.Concepts.Modifications.IMutableTreeGraph.AllowCycles">
            <summary>
            Gets a value indicating if the tree allows cycles
            </summary>
            <value>
            true if it allows cycle, false otherwise
            </value>
        </member>
        <member name="T:QuickGraph.Concepts.Modifications.IVertexAndEdgeMutableGraph">
            <summary>
            Fusion of <see cref="T:QuickGraph.Concepts.Modifications.IEdgeMutableGraph"/>
            and <see cref="T:QuickGraph.Concepts.Modifications.IVertexMutableGraph"/>.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Modifications.NamespaceDoc">
            <summary>
            <para>
            The <b>QuickGraph.Concepts.Modifications</b> namespace contains 
            the interfaces that implement the <b>graph modification concepts</b>.
            </para>
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Modifications.RandomGraph">
            <summary>
            Description résumée de RandomGraph.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.RandomGraph.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.RandomGraph.Vertex(QuickGraph.Concepts.Traversals.IVertexListGraph,System.Random)">
            <summary>
            Picks a vertex randomly in the vertex list
            </summary>
            <param name="g">vertex list</param>
            <param name="rnd">random generator</param>
            <returns>randomaly chosen vertex</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.RandomGraph.Vertex(QuickGraph.Concepts.Collections.IVertexEnumerable,System.Int32,System.Random)">
            <summary>
            
            </summary>
            <param name="vertices"></param>
            <param name="count"></param>
            <param name="rnd"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.RandomGraph.Edge(QuickGraph.Concepts.Traversals.IEdgeListGraph,System.Random)">
            <summary>
            Picks an edge randomly in the edge list
            </summary>
            <param name="g">edge list</param>
            <param name="rnd">random generator</param>
            <returns>randomaly chosen edge</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.RandomGraph.Edge(QuickGraph.Concepts.Collections.IEdgeEnumerable,System.Int32,System.Random)">
            <summary>
            
            </summary>
            <param name="edges"></param>
            <param name="count"></param>
            <param name="rnd"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Concepts.Modifications.RandomGraph.Graph(QuickGraph.Concepts.Modifications.IEdgeMutableGraph,System.Int32,System.Int32,System.Random,System.Boolean)">
            <summary>
            Generates a random graph
            </summary>
            <param name="g">Graph to fill</param>
            <param name="vertexCount">number of vertices</param>
            <param name="edgeCount">number of edges</param>
            <param name="rnd">random generator</param>
            <param name="selfEdges">self edges allowed</param>
        </member>
        <member name="T:QuickGraph.Concepts.MutableTraversals.IMutableBidirectionalVertexAndEdgeListGraph">
            <summary>
            A fusion of <see cref="!:IBidirectionalGraph"/>,
            
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.MutableTraversals.IMutableVertexAndEdgeListGraph">
            <summary>
            Union of <see cref="T:QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph"/>,
            <see cref="T:QuickGraph.Concepts.MutableTraversals.IMutableVertexAndEdgeListGraph"/>
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.NamespaceDoc">
            <summary>
            <para>
            The <b>QuickGraph.Concepts</b> namespace contains all the interfaces 
            that define the different graph concepts.
            </para>
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Petri.IArc">
            <summary>
            A directed edge of a net which may connect a <see cref="T:QuickGraph.Concepts.Petri.IPlace"/>
            to a <see cref="T:QuickGraph.Concepts.Petri.ITransition"/> or a <see cref="T:QuickGraph.Concepts.Petri.ITransition"/> to
            a <see cref="T:QuickGraph.Concepts.Petri.IPlace"/>.
            </summary>
            <remarks>
            <para>
            Usually represented by an arrow.
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Concepts.Petri.IArc.IsInputArc">
            <summary>
            Gets or sets a value indicating if the <see cref="T:QuickGraph.Concepts.Petri.IArc"/>
            instance is a <strong>input arc.</strong>
            </summary>
            <remarks>
            <para>
            An arc that leads from an input <see cref="T:QuickGraph.Concepts.Petri.IPlace"/> to a
            <see cref="T:QuickGraph.Concepts.Petri.ITransition"/> is called an <em>Input Arc</em> of
            the transition.
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Concepts.Petri.IArc.Place">
            <summary>
            Gets or sets the <see cref="T:QuickGraph.Concepts.Petri.IPlace"/> instance attached to the
            <see cref="T:QuickGraph.Concepts.Petri.IArc"/>.
            </summary>
            <value>
            The <see cref="T:QuickGraph.Concepts.Petri.IPlace"/> attached to the <see cref="T:QuickGraph.Concepts.Petri.IArc"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            set property, value is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="P:QuickGraph.Concepts.Petri.IArc.Transition">
            <summary>
            Gets or sets the <see cref="T:QuickGraph.Concepts.Petri.ITransition"/> instance attached to the
            <see cref="T:QuickGraph.Concepts.Petri.IArc"/>.
            </summary>
            <value>
            The <see cref="T:QuickGraph.Concepts.Petri.ITransition"/> attached to the <see cref="T:QuickGraph.Concepts.Petri.IArc"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            set property, value is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "P:QuickGraph.Concepts.Petri.IArc.Annotation" -->
        <member name="T:QuickGraph.Concepts.Petri.IPetriNet">
            <summary>
            A High Level Petri Graph.
            </summary>
            <remarks>
            <para>
            This object is called a Petri Net in honour of Petri's work. In fact,
            it should be named High Level Petri Graph.
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Concepts.Petri.IPetriNet.Places">
            <summary>
            Gets a collection of <see cref="T:QuickGraph.Concepts.Petri.IPlace"/> instances.
            </summary>
            <value>
            A collection of <see cref="T:QuickGraph.Concepts.Petri.IPlace"/> instances.
            </value>
        </member>
        <member name="P:QuickGraph.Concepts.Petri.IPetriNet.Transitions">
            <summary>
            Gets a collection of <see cref="T:QuickGraph.Concepts.Petri.ITransition"/> instances.
            </summary>
            <value>
            A collection of <see cref="T:QuickGraph.Concepts.Petri.ITransition"/> instances.
            </value>
        </member>
        <member name="P:QuickGraph.Concepts.Petri.IPetriNet.Arcs">
            <summary>
            Gets a collection of <see cref="T:QuickGraph.Concepts.Petri.IArc"/> instances.
            </summary>
            <value>
            A collection of <see cref="T:QuickGraph.Concepts.Petri.IArc"/> instances.
            </value>
        </member>
        <member name="T:QuickGraph.Concepts.Petri.IPetriVertex">
            <summary>
            A vertex (node) of a Petri Graph.
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.Petri.IPetriVertex.Name">
            <summary>
            Gets or sets the name of the node
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the node.
            </value>
        </member>
        <member name="T:QuickGraph.Concepts.Petri.IPlace">
            <summary>
            A Place in the HLPN framework
            </summary>
            <remarks>
            <para>
            A <see cref="!:Place"/> is characterized by a set of tokens, called the
            <see cref="P:QuickGraph.Concepts.Petri.IPlace.Marking"/> of the place. The place is <strong>typed</strong>
            by the <see cref="!:StrongType"/> instance. This means only object
            of <see cref="T:System.Type"/> assignable to <see cref="!:StrongType"/> can reside
            in the place.
            </para>
            <para>
            Usually represented by an ellipses (often circles).
            </para>
            </remarks>
        </member>
        <member name="T:QuickGraph.Concepts.Petri.ITransition">
            <summary>
            A node of a net, taken from the transition kind.
            </summary>
            <remarks>
            <para>
            Usually represented by a rectangle.
            </para>
            </remarks>
        </member>
        <member name="P:QuickGraph.Concepts.Petri.ITransition.Condition">
            <summary>
            A boolean expression associated with the transition
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Predicates.IEdgePredicate">
            <summary>
            A predicate applied to an edge
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Predicates.IEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            Tests the predicate and returns the result
            </summary>
            <param name="e">edge to test</param>
            <returns>true if successful</returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:QuickGraph.Concepts.Predicates.IVertexPredicate">
            <summary>
            A predicate applied to a vertex
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Predicates.IVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
            <summary>
            Tests the predicate and returns the result
            </summary>
            <param name="v">Vertex to test</param>
            <returns>true if successful</returns>
            <exception cref="T:System.ArgumentNullException">v is null</exception>
        </member>
        <member name="T:QuickGraph.Concepts.Providers.IEdgeProvider">
            <summary>
            A edge generator
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Providers.IEdgeProvider.ProvideEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Returns an edge e=(u,v)
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Providers.IEdgeProvider.UpdateEdge(QuickGraph.Concepts.IEdge)">
            <summary>
            Updates edge that has not been created with the provider
            </summary>
            <param name="v">vertex to update</param>
        </member>
        <member name="P:QuickGraph.Concepts.Providers.IEdgeProvider.EdgeType">
            <summary>
            The edge full type.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Providers.IVertexProvider">
            <summary>
            A vertex generator object
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Providers.IVertexProvider.ProvideVertex">
            <summary>
            Generates a new vertex
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Providers.IVertexProvider.UpdateVertex(QuickGraph.Concepts.IVertex)">
            <summary>
            Updates a vertex that has not been created with the provider
            </summary>
            <param name="v">vertex to update</param>
        </member>
        <member name="P:QuickGraph.Concepts.Providers.IVertexProvider.VertexType">
            <summary>
            The vertex full type.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Providers.NamespaceDoc">
            <summary>
            <para>
            The <b>QuickGraph.Concepts.Providers</b> namespace contains 
            the interfaces that define the vertex and edge provider classes.
            </para>
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Serialization.IGraphSerializable">
            <summary>
            A serializable graph structure (graph, vertex or edge)
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Serialization.IGraphSerializable.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Adds data to serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is not serializing</exception>
        </member>
        <member name="T:QuickGraph.Concepts.Serialization.IGraphDeSerializable">
            <summary>
            Defines an instance that can be deserialized from a
            <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializationInfo"/> instance.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:QuickGraph.Concepts.Serialization.IGraphDeSerializable.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Reads data from serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is a null reference</exception>
            <exception cref="T:System.ArgumentException">info is serializing</exception>
        </member>
        <member name="T:QuickGraph.Concepts.Serialization.IGraphSerializationInfo">
            <summary>
            A class for adding and retreiving atomic data.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Serialization.IGraphSerializationInfo.Add(System.String,System.Object)">
            <summary>
            Adds a new key-value pair
            </summary>
            <param name="key">value identifier</param>
            <param name="value">value</param>
            <exception cref="T:System.ArgumentNullException">key is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Concepts.Serialization.IGraphSerializationInfo.Contains(System.String)">
            <summary>
            Gets a value indicating if the key is in the entry collection
            </summary>
            <param name="key">key to test</param>
            <returns>true if key is in the dictionary, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">key is a null reference</exception>
        </member>
        <member name="P:QuickGraph.Concepts.Serialization.IGraphSerializationInfo.IsSerializing">
            <summary>
            Get a value indicating if the object is serializing
            </summary>
            <value>
            true if serializing, false if deserializing
            </value>
        </member>
        <member name="P:QuickGraph.Concepts.Serialization.IGraphSerializationInfo.Item(System.String)">
            <summary>
            Gets or sets a value from a key
            </summary>
            <param name="key">value identifier</param>
            <returns>
            value associated with the key. If the key is not present
            in the data, null value is returned
            </returns>
            <exception cref="T:System.ArgumentNullException">
            get,set property, key is a null reference
            </exception>
        </member>
        <member name="T:QuickGraph.Concepts.Serialization.ISerializableEdgeListGraph">
            <summary>
            Summary description for ISerializableEdgeListGraph.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Serialization.ISerializableEdgeListGraph.AddEdge(QuickGraph.Concepts.IEdge)">
            <summary>
            Adds an edge to the graph
            </summary>
            <param name="e">edge to add</param>
        </member>
        <member name="T:QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph">
            <summary>
            Union of the <see cref="T:QuickGraph.Concepts.Traversals.IVertexListGraph"/> 
            , <see cref="T:QuickGraph.Concepts.Modifications.IVertexMutableGraph"/> and
            <see cref="T:QuickGraph.Concepts.Modifications.IEdgeMutableGraph"/>
            interfaces.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Serialization.ISerializableVertexListGraph.AddVertex(QuickGraph.Concepts.IVertex)">
            <summary>
            Add a vertex to the graph
            </summary>
            <param name="v">vertex to add</param>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IBidirectionalVertexAndEdgeListGraph">
            <summary>
            Summary description for IBidirectionalVertexAndEdgeListGraph.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IBidirectionalVertexListGraph">
            <summary>
            A fusion of <see cref="T:QuickGraph.Concepts.Traversals.IBidirectionalGraph"/> and
            <see cref="T:QuickGraph.Concepts.Traversals.IVertexListGraph"/>.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IClusteredGraph">
            <summary>
            A graph with clusters.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IClusteredGraph.AddCluster">
            <summary>
            Adds a new cluster to the graph.
            </summary>
            <returns>Added cluster</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IClusteredGraph.RemoveCluster(QuickGraph.Concepts.Traversals.IClusteredGraph)">
            <summary>
            Removes a cluster from the graph
            </summary>
            <param name="g">cluster to remove</param>
            <exception cref="T:System.ArgumentNullException">g is null</exception>
        </member>
        <member name="P:QuickGraph.Concepts.Traversals.IClusteredGraph.Clusters">
            <summary>
            Gets an enumerable collection of <see cref="T:QuickGraph.Concepts.Traversals.IClusteredGraph"/>.
            </summary>
        </member>
        <member name="P:QuickGraph.Concepts.Traversals.IClusteredGraph.ClustersCount">
            <summary>
            Gets the number of clusters
            </summary>
            <remarks>
            Number of clusters.
            </remarks>
        </member>
        <member name="P:QuickGraph.Concepts.Traversals.IClusteredGraph.Colapsed">
            <summary>
            Gets a value indicating wheter the cluster is collapsed
            </summary>
            <value>
            true if the cluster is colapsed; otherwize, false.
            </value>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IFilteredBidirectionalGraph">
            <summary>
            A bidirectional graph that supports filtered traversals
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IFilteredIncidenceGraph">
            <summary>
            An incidence graph that supports filtered traversals
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IFilteredIncidenceGraph.SelectSingleOutEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Returns the first out-edge that matches the predicate
            </summary>
            <param name="v"></param>
            <param name="ep">Edge predicate</param>
            <returns>null if not found, otherwize the first Edge that
            matches the predicate.</returns>
            <exception cref="T:System.ArgumentNullException">v or ep is null</exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IFilteredIncidenceGraph.SelectOutEdges(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Returns the collection of out-edges that matches the predicate
            </summary>
            <param name="v"></param>
            <param name="ep">Edge predicate</param>
            <returns>enumerable colleciton of vertices that matches the 
            criteron</returns>
            <exception cref="T:System.ArgumentNullException">v or ep is null</exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IFilteredBidirectionalGraph.SelectSingleInEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Returns the first in-edge that matches the predicate
            </summary>
            <param name="v"></param>
            <param name="ep">Edge predicate</param>
            <returns>null if not found, otherwize the first Edge that
            matches the predicate.</returns>
            <exception cref="T:System.ArgumentNullException">v or ep is null</exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IFilteredBidirectionalGraph.SelectInEdges(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Returns the collection of in-edges that matches the predicate
            </summary>
            <param name="v"></param>
            <param name="ep">Edge predicate</param>
            <returns>enumerable colleciton of vertices that matches the 
            criteron</returns>
            <exception cref="T:System.ArgumentNullException">v or ep is null</exception>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IFilteredEdgeListGraph">
            <summary>
            A edge list graph that supports filtered traversals
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IFilteredEdgeListGraph.SelectSingleEdge(QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Returns the first Edge that matches the predicate
            </summary>
            <param name="vp">Edge predicate</param>
            <returns>null if not found, otherwize the first Edge that
            matches the predicate.</returns>
            <exception cref="T:System.ArgumentNullException">vp is null</exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IFilteredEdgeListGraph.SelectEdges(QuickGraph.Concepts.Predicates.IEdgePredicate)">
            <summary>
            Returns the collection of edges that matches the predicate
            </summary>
            <param name="vp">Edge predicate</param>
            <returns>enumerable colleciton of vertices that matches the 
            criteron</returns>
            <exception cref="T:System.ArgumentNullException">vp is null</exception>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IFilteredVertexAndEdgeListGraph">
            <summary>
            Union of <see cref="T:QuickGraph.Concepts.Traversals.IFilteredVertexListGraph"/>,
            <see cref="T:QuickGraph.Concepts.Traversals.IFilteredEdgeListGraph"/> and <see cref="T:QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph"/>.
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.IFilteredVertexListGraph">
            <summary>
            A vertex list graph that supports filtered traversals
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IFilteredVertexListGraph.SelectSingleVertex(QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Returns the first vertex that matches the predicate
            </summary>
            <param name="vp">vertex predicate</param>
            <returns>null if not found, otherwize the first vertex that
            matches the predicate.</returns>
            <exception cref="T:System.ArgumentNullException">vp is null</exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.IFilteredVertexListGraph.SelectVertices(QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Returns the collection of vertices that matches the predicate
            </summary>
            <param name="vp">vertex predicate</param>
            <returns>enumerable colleciton of vertices that matches the 
            criteron</returns>
            <exception cref="T:System.ArgumentNullException">vp is null</exception>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.ITreeGraph">
            <summary>
            A tree-like interface definition
            </summary>
            <remarks>
            <para>
            This interface defines a DOM like tree node structure.
            </para>
            <para>
            Graphs used with this interface must be directed, not
            allowing parrallel edges. However, they can be cylic
            but the in-degree of each vertex must be equal to 1.
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.ITreeGraph.ParentVertex(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets the <see cref="T:QuickGraph.Concepts.IVertex"/> parent.
            </summary>
            <param name="v">current vertex</param>
            <returns>
            parent vertex if any, null reference otherwize
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="v"/> is a null reference
            </exception>
            <exception cref="T:QuickGraph.Exceptions.MultipleInEdgeException">
            <paramref name="v"/> has multiple in-edges
            </exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.ITreeGraph.FirstChild(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets the first adjacent vertex
            </summary>
            <param name="v">current vertex</param>
            <returns>first out-vertex</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="v"/> is a null reference
            </exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.ITreeGraph.LastChild(QuickGraph.Concepts.IVertex)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="v"/> is a null reference
            </exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.ITreeGraph.HasChildVertices(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if the <see cref="T:QuickGraph.Concepts.IVertex"/> has out-edges
            </summary>
            <param name="v"><see cref="T:QuickGraph.Concepts.IVertex"/> to test</param>
            <returns>true if <paramref name="v"/> has out-edges.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="v"/> is a null reference
            </exception>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.ITreeGraph.ChildVertices(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets an enumerable collection of child <see cref="T:QuickGraph.Concepts.IVertex"/>
            </summary>
            <param name="v">current <see cref="T:QuickGraph.Concepts.IVertex"/></param>
            <returns>An enumerable collection of adjacent vertices</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="v"/> is a null reference
            </exception>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.NamespaceDoc">
            <summary>
            <para>
            The <b>QuickGraph.Concepts.Traversals</b> namespace contains 
            the interfaces that implement the <b>graph traversal concepts</b>.
            </para>
            </summary>
        </member>
        <member name="T:QuickGraph.Concepts.Traversals.Traversal">
            <summary>
            A small helper class for traversals
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstVertexIf(QuickGraph.Concepts.Collections.IVertexEnumerable,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Returns the first vertex of the enumerable that matches the predicate.
            </summary>
            <param name="vertices">enumerable collection of <see cref="T:QuickGraph.Concepts.IVertex"/></param>
            <param name="pred">vertex predicate</param>
            <returns>first vertex if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstVertex(QuickGraph.Concepts.Collections.IVertexEnumerable)">
            <summary>
            Returns the first vertex of the enumerable
            </summary>
            <param name="vertices">enumerable collection of <see cref="T:QuickGraph.Concepts.IVertex"/></param>
            <returns>first vertex if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstVertex(QuickGraph.Concepts.Traversals.IVertexListGraph)">
            <summary>
            Returns the first vertex of the graph
            </summary>
            <param name="g">graph</param>
            <returns>first vertex if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastVertex(QuickGraph.Concepts.Collections.IVertexEnumerable)">
            <summary>
            Returns the first vertex of the enumerable
            </summary>
            <param name="vertices">enumerable collection of <see cref="T:QuickGraph.Concepts.IVertex"/></param>
            <returns>first vertex if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastVertex(QuickGraph.Concepts.Traversals.IVertexListGraph)">
            <summary>
            Returns the last vertex of the graph
            </summary>
            <param name="g">graph</param>
            <returns>last vertex if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstEdge(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
            <summary>
            Returns the first edge of the graph
            </summary>
            <param name="edges">graph</param>
            <returns>first edge if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstEdge(QuickGraph.Concepts.Traversals.IEdgeListGraph)">
            <summary>
            Returns the first edge of the graph
            </summary>
            <param name="g">graph</param>
            <returns>first edge if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastEdge(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
            <summary>
            Returns the last edge of the edge collection
            </summary>
            <param name="edges">edge collection</param>
            <returns>last edge if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastEdge(QuickGraph.Concepts.Traversals.IEdgeListGraph)">
            <summary>
            Returns the last edge of the graph
            </summary>
            <param name="g">graph</param>
            <returns>last edge if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstTargetVertex(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
            <summary>
            Returns the first vertex of the enumerable
            </summary>
            <param name="edges">enumerable collection of <see cref="T:QuickGraph.Concepts.IEdge"/></param>
            <returns>first target vertex if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.FirstSourceVertex(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
            <summary>
            Returns the first source vertex of the enumerable
            </summary>
            <param name="edges">enumerable collection of <see cref="T:QuickGraph.Concepts.IEdge"/></param>
            <returns>first source vertex if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastTargetVertex(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
            <summary>
            Returns the last vertex of the enumerable
            </summary>
            <param name="edges">enumerable collection of <see cref="T:QuickGraph.Concepts.IEdge"/></param>
            <returns>last target vertex if any, otherwise a null reference</returns>
        </member>
        <member name="M:QuickGraph.Concepts.Traversals.Traversal.LastSourceVertex(QuickGraph.Concepts.Collections.IEdgeEnumerable)">
            <summary>
            Returns the last source vertex of the enumerable
            </summary>
            <param name="edges">enumerable collection of <see cref="T:QuickGraph.Concepts.IEdge"/></param>
            <returns>last source vertex if any, otherwise a null reference</returns>
        </member>
        <member name="T:QuickGraph.Concepts.Visitors.IDistanceRecorderVisitor">
            <summary>
            A distance recorder visitor
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IDistanceRecorderVisitor.InitializeVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IDistanceRecorderVisitor.DiscoverVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IDistanceRecorderVisitor.TreeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:QuickGraph.Concepts.Visitors.IEdgeColorizerVisitor">
            <summary>
            Summary description for IEdgeColorizerVisitor.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IEdgeColorizerVisitor.InitializeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IEdgeColorizerVisitor.TreeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IEdgeColorizerVisitor.FinishEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:QuickGraph.Concepts.Visitors.IEdgePredecessorRecorderVisitor">
            <summary>
            Visitor that records the edge predecessor from a vertex.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IEdgePredecessorRecorderVisitor.InitializeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
            <summary>
            Not used
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IEdgePredecessorRecorderVisitor.DiscoverTreeEdge(System.Object,QuickGraph.Concepts.EdgeEdgeEventArgs)">
            <summary>
            Records edge predecessor
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IEdgePredecessorRecorderVisitor.FinishEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
            <summary>
            Records end path edges
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:QuickGraph.Concepts.Visitors.IPredecessorRecorderVisitor">
            <summary>
            Visitor that records the edge predecessor from a vertex.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IPredecessorRecorderVisitor.TreeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
            <summary>
            Predecessor record
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IPredecessorRecorderVisitor.FinishVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
            <summary>
            Finished a vertex exploration
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:QuickGraph.Concepts.Visitors.ITimeStamperVisitor">
            <summary>
            Description résumée de ITimeStamperVisitior.
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.ITimeStamperVisitor.DiscoverVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.ITimeStamperVisitor.FinishVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:QuickGraph.Concepts.Visitors.ITreeEdgeBuilderVisitor">
            <summary>
            Tree edge visitor
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.ITreeEdgeBuilderVisitor.TreeEdge(System.Object,QuickGraph.Concepts.EdgeEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:QuickGraph.Concepts.Visitors.IVertexColorizerVisitor">
            <summary>
            A vertex colorizer visitor
            </summary>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IVertexColorizerVisitor.InitializeVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IVertexColorizerVisitor.DiscoverVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:QuickGraph.Concepts.Visitors.IVertexColorizerVisitor.FinishVertex(System.Object,QuickGraph.Concepts.VertexEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:QuickGraph.Concepts.Visitors.NamespaceDoc">
            <summary>
            <para>
            The <b>QuickGraph.Concepts.Visitors</b> namespace contains 
            interfaces that define "classic" visitors.
            </para>
            </summary>
        </member>
        <member name="T:QuickGraph.CustomEdge">
            <summary>
            An edge that can hold a value
            </summary>
        </member>
        <member name="T:QuickGraph.Edge">
            <summary>
            A graph edge
            </summary>
            <remarks>
            This class represents a directed edge. It links
            a source <seealso cref="T:QuickGraph.Vertex"/> to a target <seealso cref="T:QuickGraph.Vertex"/>.
            
            The source and target vertices can be accessed as properties.
            </remarks>
            <example>
            This sample shows a basic usage of an edge:
            <code>
            Vertex v;   // vertex
            foreach(Edge e in v.InEdges)
            {
                Console.WriteLine("{0} -&gt; {1}",
            		e.Source.GetHashCode(),
            		e.Target.GetHashCode()
            		);
            }
            </code>
            </example>
        </member>
        <member name="M:QuickGraph.Edge.#ctor">
            <summary>
            Empty Method. Used for serialization.
            </summary>
        </member>
        <member name="M:QuickGraph.Edge.#ctor(System.Int32,QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Builds an edge from source to target
            </summary>
            <param name="id">unique identification number</param>
            <param name="source">Source vertex</param>
            <param name="target">Target vertex</param>
            <exception cref="T:System.ArgumentNullException">Source or Target is null</exception>
        </member>
        <member name="M:QuickGraph.Edge.op_LessThan(QuickGraph.Edge,QuickGraph.Edge)">
            <summary>
            
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Edge.op_GreaterThan(QuickGraph.Edge,QuickGraph.Edge)">
            <summary>
            
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Edge.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Edge.CompareTo(QuickGraph.Edge)">
            <summary>
            Compares two edges
            </summary>
            <param name="obj">Edge to compare</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">obj is not of type Edge.</exception>
        </member>
        <member name="M:QuickGraph.Edge.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Edge.ToString(System.IFormatProvider)">
            <summary>
            Converts to string by returning the formatted ID
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Edge.GetHashCode">
            <summary>
            Hash code, using ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Edge.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Adds nothing to serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is not serializing</exception>
        </member>
        <member name="M:QuickGraph.Edge.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Reads no data from serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is serializing</exception>
        </member>
        <member name="P:QuickGraph.Edge.ID">
            <summary>
            Edge unique identification number
            </summary>
        </member>
        <member name="P:QuickGraph.Edge.Source">
            <summary>
            Source vertex
            </summary>
        </member>
        <member name="P:QuickGraph.Edge.SourceID">
            <summary>
            Source vertex id, for serialization
            </summary>
        </member>
        <member name="P:QuickGraph.Edge.Target">
            <summary>
            Target Vertex
            </summary>
        </member>
        <member name="P:QuickGraph.Edge.TargetID">
            <summary>
            Source vertex id, for serialization
            </summary>
        </member>
        <member name="M:QuickGraph.CustomEdge.#ctor(System.Int32,QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Default constructor
            </summary>
            <remarks>
            This constructors defaults the value to null
            </remarks>
            <param name="id">unique edge identification number</param>
            <param name="source">source vertex</param>
            <param name="target">target vertex</param>
        </member>
        <member name="P:QuickGraph.CustomEdge.Value">
            <summary>
            associated property value
            </summary>
        </member>
        <member name="T:QuickGraph.CustomVertex">
            <summary>
            A vertex that can hold a value
            </summary>
        </member>
        <member name="T:QuickGraph.Vertex">
            <summary>
            A Graph Vertex.
            </summary>
        </member>
        <member name="M:QuickGraph.Vertex.#ctor">
            <summary>
            Default constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:QuickGraph.Vertex.#ctor(System.Int32)">
            <summary>
            Builds a new vertex
            </summary>
        </member>
        <member name="M:QuickGraph.Vertex.op_LessThan(QuickGraph.Vertex,QuickGraph.Vertex)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Vertex.op_GreaterThan(QuickGraph.Vertex,QuickGraph.Vertex)">
            <summary>
            
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Vertex.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Vertex.CompareTo(QuickGraph.Vertex)">
            <summary>
            Compares two vertices
            </summary>
            <param name="obj">vertex to compare</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">obj is not of type Vertex</exception>
        </member>
        <member name="M:QuickGraph.Vertex.ToString">
            <summary>
            Converts to string by returning the ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Vertex.ToString(System.IFormatProvider)">
            <summary>
            Converts to string by returning the formatted ID
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Vertex.GetHashCode">
            <summary>
            Hash code. ID used as identification number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Vertex.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Adds nothing to serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is not serializing</exception>
        </member>
        <member name="M:QuickGraph.Vertex.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Reads no data from serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is serializing</exception>
        </member>
        <member name="P:QuickGraph.Vertex.ID">
            <summary>
            Unique identification number
            </summary>
        </member>
        <member name="M:QuickGraph.CustomVertex.#ctor">
            <summary>
            Custom constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:QuickGraph.CustomVertex.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="id">unique vertex identification number</param>
            <remarks>
            This constructors defaults the value to null
            </remarks>
        </member>
        <member name="P:QuickGraph.CustomVertex.Value">
            <summary>
            Vertex associated property value
            </summary>
        </member>
        <member name="T:QuickGraph.Exceptions.AttributeNotFoundException">
            <summary>
            Exception throwed when not finding a vertex.
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.AttributeNotFoundException.#ctor(System.String)">
            <summary>
            Build a new exception
            </summary>
            <param name="name">vertex name</param>
        </member>
        <member name="M:QuickGraph.Exceptions.AttributeNotFoundException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.AttributeNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="ex"></param>
        </member>
        <member name="M:QuickGraph.Exceptions.AttributeNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:QuickGraph.Exceptions.AttributeNotFoundException.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Exceptions.EdgeNotFoundException">
            <summary>
            Exception throwed when not finding a vertex.
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.EdgeNotFoundException.#ctor(System.String)">
            <summary>
            Construct an <see cref="T:QuickGraph.Exceptions.EdgeNotFoundException"/> instance.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:QuickGraph.Exceptions.EdgeNotFoundException.#ctor">
            <summary>
            Constructs an empty exception
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.EdgeNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an exception with a message
            and an inner exception.
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Inner exception</param>
        </member>
        <member name="M:QuickGraph.Exceptions.EdgeNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctx"></param>
        </member>
        <member name="P:QuickGraph.Exceptions.EdgeNotFoundException.Message">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Exceptions.GraphNotStronglyConnectedException">
            <summary>
            Not a acyclic graph execption
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.GraphNotStronglyConnectedException.#ctor">
            <summary>
            Default consturctor
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.GraphNotStronglyConnectedException.#ctor(System.String)">
            <summary>
            Constructor with message
            </summary>
            <param name="name">message</param>
        </member>
        <member name="M:QuickGraph.Exceptions.GraphNotStronglyConnectedException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="ex"></param>
        </member>
        <member name="M:QuickGraph.Exceptions.GraphNotStronglyConnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:QuickGraph.Exceptions.MultipleInEdgeException">
            <summary>
            Multiple In Edge exception
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.MultipleInEdgeException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name">vertex name</param>
        </member>
        <member name="M:QuickGraph.Exceptions.MultipleInEdgeException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="ex"></param>
        </member>
        <member name="M:QuickGraph.Exceptions.MultipleInEdgeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:QuickGraph.Exceptions.NamespaceDoc">
            <summary>
            The <b>QuickGraph.Exceptions</b> namespace contains graph related
            exceptions.
            </summary>
        </member>
        <member name="T:QuickGraph.Exceptions.NegativeCycleException">
            <summary>
            Negative cycle execption
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.NegativeCycleException.#ctor">
            <summary>
            Default consturctor
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.NegativeCycleException.#ctor(System.String)">
            <summary>
            Constructor with message
            </summary>
            <param name="name">message</param>
        </member>
        <member name="M:QuickGraph.Exceptions.NegativeCycleException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="ex"></param>
        </member>
        <member name="M:QuickGraph.Exceptions.NegativeCycleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:QuickGraph.Exceptions.NonAcyclicGraphException">
            <summary>
            Not a acyclic graph execption
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.NonAcyclicGraphException.#ctor">
            <summary>
            Default consturctor
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.NonAcyclicGraphException.#ctor(System.String)">
            <summary>
            Constructor with message
            </summary>
            <param name="name">message</param>
        </member>
        <member name="M:QuickGraph.Exceptions.NonAcyclicGraphException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="ex"></param>
        </member>
        <member name="M:QuickGraph.Exceptions.NonAcyclicGraphException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:QuickGraph.Exceptions.ParrallelEdgeNotAllowedException">
            <summary>
            ParrallelEdgeNotAllowedException.
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.ParrallelEdgeNotAllowedException.#ctor">
            <summary>
            Default construcotr
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.ParrallelEdgeNotAllowedException.#ctor(System.String)">
            <summary>
            Constructor with message
            </summary>
            <param name="name">Additional message</param>
        </member>
        <member name="M:QuickGraph.Exceptions.ParrallelEdgeNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="ex"></param>
        </member>
        <member name="M:QuickGraph.Exceptions.ParrallelEdgeNotAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:QuickGraph.Exceptions.VertexNotConnectedByEdgeException">
            <summary>
            Exception throwed when not finding a vertex.
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.VertexNotConnectedByEdgeException.#ctor(System.String)">
            <summary>
            Build a new exception
            </summary>
            <param name="name">vertex name</param>
        </member>
        <member name="M:QuickGraph.Exceptions.VertexNotConnectedByEdgeException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.VertexNotConnectedByEdgeException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="ex"></param>
        </member>
        <member name="M:QuickGraph.Exceptions.VertexNotConnectedByEdgeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:QuickGraph.Exceptions.VertexNotFoundException">
            <summary>
            Exception throwed when not finding a vertex.
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.VertexNotFoundException.#ctor(System.String)">
            <summary>
            Build a new exception
            </summary>
            <param name="name">vertex name</param>
        </member>
        <member name="M:QuickGraph.Exceptions.VertexNotFoundException.#ctor">
            <summary>
            Constructs an empty exception
            </summary>
        </member>
        <member name="M:QuickGraph.Exceptions.VertexNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an exception with a vertex name
            and an inner exception.
            </summary>
            <param name="name">Vertex name</param>
            <param name="ex">Inner exception</param>
        </member>
        <member name="M:QuickGraph.Exceptions.VertexNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctx"></param>
        </member>
        <member name="P:QuickGraph.Exceptions.VertexNotFoundException.Message">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.NamedEdge">
            <summary>
            A vertex with a name
            </summary>
        </member>
        <member name="M:QuickGraph.NamedEdge.#ctor">
            <summary>
            Empty constructor. Used internally
            </summary>
        </member>
        <member name="M:QuickGraph.NamedEdge.#ctor(System.Int32,QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Constructs a new named edge
            </summary>
            <param name="id"></param>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:QuickGraph.NamedEdge.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Adds nothing to serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is not serializing</exception>
        </member>
        <member name="M:QuickGraph.NamedEdge.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Reads no data from serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is serializing</exception>
        </member>
        <member name="P:QuickGraph.NamedEdge.Name">
            <summary>
            Vertex name
            </summary>
        </member>
        <member name="T:QuickGraph.NamedVertex">
            <summary>
            A vertex with a name
            </summary>
        </member>
        <member name="M:QuickGraph.NamedVertex.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:QuickGraph.NamedVertex.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:QuickGraph.NamedVertex.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Adds nothing to serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is not serializing</exception>
        </member>
        <member name="M:QuickGraph.NamedVertex.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Reads no data from serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is serializing</exception>
        </member>
        <member name="P:QuickGraph.NamedVertex.Name">
            <summary>
            Vertex name
            </summary>
        </member>
        <member name="T:QuickGraph.NameEqualPredicate">
            <summary>
            Summary description for NameEqualVertexPredicate.
            </summary>
        </member>
        <member name="T:QuickGraph.NamespaceDoc">
            <summary>
            <para>
            The <b>QuickGraph</b> namespace contains default vertex and edge 
            implementations.
            </para>
            <para>
            <para>
            QuickGraph Library License
            </para>
            <pre>
            Copyright (c) 2004 Jonathan de Halleux
            
            This software is provided 'as-is', without any express or implied warranty. 
            
            In no event will the authors be held liable for any damages arising from 
            the use of this software.
            Permission is granted to anyone to use this software for any purpose, 
            including commercial applications, and to alter it and redistribute it 
            freely, subject to the following restrictions:
            
            1. The origin of this software must not be misrepresented; 
            you must not claim that you wrote the original software. 
            If you use this software in a product, an acknowledgment in the product 
            documentation would be appreciated but is not required.
            
            2. Altered source versions must be plainly marked as such, and must 
            not be misrepresented as being the original software.
            
            3. This notice may not be removed or altered from any source 
            distribution.
            	
            QuickGraph Library HomePage: http://www.mbunit.com
            Author: Jonathan de Halleux
            </pre>
            </para>
            </summary>
        </member>
        <member name="T:QuickGraph.Predicates.ConnectsEdgePredicate">
            <summary>
            A predicate that filter edge connecting two vertices
            </summary>
        </member>
        <member name="M:QuickGraph.Predicates.ConnectsEdgePredicate.#ctor(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IGraph)">
            <summary>
            Constructs a new predicate
            </summary>
            <param name="src">source vertex</param>
            <param name="trg">target vertex</param>
            <param name="g">underlying graph</param>
        </member>
        <member name="M:QuickGraph.Predicates.ConnectsEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            Test if edge connects source and target vertex
            </summary>
            <param name="e">edge to test</param>
            <returns>true if e connects source and target</returns>
        </member>
        <member name="T:QuickGraph.Predicates.EdgePredicate">
            <summary>
            Edge predicate
            </summary>
            <remarks>
            <para>
            Applies predicates to an edge, to it's source and to it's target.
            </para>
            <para>
            Given <c>ep</c>, the edge predicate, and <c>vp</c>, the vertex
            predicate, the predicate result is computed, for a given edge <c>e</c>, 
            as:
            <code>
            ep(e) &amp;&amp; vp(e.Source) &amp;&amp; vp(e.Target)
            </code>
            </para>
            </remarks>	
        </member>
        <member name="M:QuickGraph.Predicates.EdgePredicate.#ctor(QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Constructs a new edge predicate
            </summary>
            <param name="ep">the edge predicate object</param>
            <param name="vp">the vertex predicate object</param>
            <exception cref="T:System.ArgumentNullException">ep or vp are null</exception>
        </member>
        <member name="M:QuickGraph.Predicates.EdgePredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            Applies the edge predicate to e and to it's vertices?
            </summary>
            <param name="e">edge to test</param>
            <returns>EdgePredicate(e) &amp;&amp; VertexPredicate(e.Source)
            &amp;&amp; VertexPredicate(e.Target)
            </returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:QuickGraph.Predicates.InCollectionVertexPredicate">
            <summary>
            Predicate for checking that a vertex is in a collection
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:QuickGraph.Predicates.InCollectionVertexPredicate.#ctor(QuickGraph.Concepts.Collections.IVertexCollection)">
            <summary>
            Creates a predicate that checks if vertices are in
            <paramref name="list"/>
            </summary>
            <param name="list">list of vertices</param>
            <exception cref="T:System.ArgumentNullException">list is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Predicates.InCollectionVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if <paramref name="v"/>
            is in the collection.
            </summary>
            <param name="v">vertex to test</param>
            <returns>true if <paramref name="v"/> is in the collection,
            false otherwize
            </returns>
        </member>
        <member name="T:QuickGraph.Predicates.InDictionaryVertexPredicate">
            <summary>
            Predicate for checking that a vertex is in a collection
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:QuickGraph.Predicates.InDictionaryVertexPredicate.#ctor(System.Collections.IDictionary)">
            <summary>
            Creates a predicate that checks if vertices are in
            <paramref name="list"/>
            </summary>
            <param name="dictionary">dictionary of vertices</param>
            <exception cref="T:System.ArgumentNullException">dictionary is a null reference</exception>
        </member>
        <member name="M:QuickGraph.Predicates.InDictionaryVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
            <summary>
            Gets a value indicating if <paramref name="v"/>
            is in the collection.
            </summary>
            <param name="v">vertex to test</param>
            <returns>true if <paramref name="v"/> is in the collection,
            false otherwize
            </returns>
        </member>
        <member name="T:QuickGraph.Predicates.InEdgePredicate">
            <summary>
            In edge predicate
            </summary>
            <remarks>
            <para>
            Applies predicates to an edge and to it's source.
            </para>
            <para>
            Given <c>ep</c>, the edge predicate, and <c>vp</c>, the vertex
            predicate, the predicate result is computed, for a given edge <c>e</c>, 
            as:
            <code>
            ep(e) &amp;&amp; vp(e.Source)
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Predicates.InEdgePredicate.#ctor(QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Construct a new predicate.
            </summary>
            <param name="ep">the edge predicate</param>
            <param name="vp">the source vertex predicate</param>
            <exception cref="T:System.ArgumentNullException">ep or vp is null</exception>
        </member>
        <member name="M:QuickGraph.Predicates.InEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            Applies the edge predicate to e and to it's source
            </summary>
            <param name="e">edge to test</param>
            <returns>EdgePredicate(e) and VertexPredicate(e.Source)</returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:QuickGraph.Predicates.IsAdjacentEdgePredicate">
            <summary>
            Predicate that checks if a edge is an edge
            </summary>
        </member>
        <member name="M:QuickGraph.Predicates.IsAdjacentEdgePredicate.#ctor(QuickGraph.Concepts.IVertex)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:QuickGraph.Predicates.IsAdjacentEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Predicates.IsInEdgePredicate">
            <summary>
            Predicate that checks if a edge is an inedge
            </summary>
        </member>
        <member name="M:QuickGraph.Predicates.IsInEdgePredicate.#ctor(QuickGraph.Concepts.IVertex)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:QuickGraph.Predicates.IsInEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Predicates.IsOutEdgePredicate">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickGraph.Predicates.IsOutEdgePredicate.#ctor(QuickGraph.Concepts.IVertex)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:QuickGraph.Predicates.IsOutEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Predicates.KeepAllEdgesPredicate">
            <summary>
            Predicate that always returns true
            </summary>
            <remarks>
            <para>
            This predicate returns true for any edge.
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Predicates.KeepAllEdgesPredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            Always returns true.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Predicates.KeepAllVerticesPredicate">
            <summary>
            Predicate that always returns true
            </summary>
            <remarks>
            <para>
            This predicate returns true for any vertex.
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Predicates.KeepAllVerticesPredicate.Test(QuickGraph.Concepts.IVertex)">
            <summary>
            Always returns true.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Predicates.NamespaceDoc">
            <summary>
            The <b>QuickGraph.Predicates</b> namespace contains predicate 
            implementations for filtered graphs.
            </summary>
            <remarks>
            <para>
            Predicates can be used to filter the edge set or the vertex set 
            of graphs.
            </para>
            <para>
            A static helper class, <see cref="T:QuickGraph.Predicates.Preds"/>, is provided to help
            the instanciation of predicates.
            </para>
            </remarks>
        </member>
        <member name="T:QuickGraph.Predicates.NotInCircuitEdgePredicate">
            <summary>
            An predicate that checks that the edge is not in both circuit
            and temporary circuit.
            </summary>
        </member>
        <member name="M:QuickGraph.Predicates.NotInCircuitEdgePredicate.#ctor(QuickGraph.Concepts.Collections.IEdgeCollection,QuickGraph.Concepts.Collections.IEdgeCollection)">
            <summary>
            Construct an edge that filters out edge in circuit 
            and temporary circuit
            </summary>
            <param name="circuit"></param>
            <param name="temporaryCircuit"></param>
        </member>
        <member name="M:QuickGraph.Predicates.NotInCircuitEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            Test method
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Predicates.NotInCircuitEdgePredicate.Circuit">
            <summary>
            Edge circuit
            </summary>
        </member>
        <member name="P:QuickGraph.Predicates.NotInCircuitEdgePredicate.TemporaryCircuit">
            <summary>
            Temporary circuit
            </summary>
        </member>
        <member name="T:QuickGraph.Predicates.NotVertexPredicate">
            <summary>
            Not operator to predicate
            </summary>
        </member>
        <member name="M:QuickGraph.Predicates.NotVertexPredicate.#ctor(QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Constructs a new <see cref="T:QuickGraph.Predicates.NotVertexPredicate"/>.
            </summary>
            <param name="predicate">predicate to invert</param>
        </member>
        <member name="M:QuickGraph.Predicates.NotVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
            <summary>
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Predicates.OutEdgePredicate">
            <summary>
            Out-edge predicate
            </summary>
            <remarks>
            <para>
            Applies predicates to an edge and to it's target vertex.
            </para>
            <para>
            Given <c>ep</c>, the edge predicate, and <c>vp</c>, the vertex
            predicate, for a given edge <c>e</c>, the predicate result is computed
            as:
            <code>
            ep(e) &amp;&amp; vp(e.Target)
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Predicates.OutEdgePredicate.#ctor(QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Construct a new predicate.
            </summary>
            <param name="ep">the edge predicate</param>
            <param name="vp">the source vertex predicate</param>
            <exception cref="T:System.ArgumentNullException">ep or vp is null</exception>		
        </member>
        <member name="M:QuickGraph.Predicates.OutEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            Applies the edge predicate to e and to it's target vertex
            </summary>
            <param name="e">edge to test</param>
            <returns>EdgePredicate(e) and VertexPredicate(e.Target)</returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="T:QuickGraph.Predicates.Preds">
            <summary>
            Static helper class for creating predicates
            </summary>
            <remarks>
            This lets you quickly use the built-in predicates of QuickGraph.
            </remarks>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.Connects(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IGraph)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.KeepAllEdges">
            <summary>
            Returns a edge predicate that always returns true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.KeepAllVertices">
            <summary>
            Returns a vertex predicate that always returns true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.Edge(QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Checks ep(e) &amp;&amp; vp(e.Source) &amp;&amp; vp(e.Target)
            </summary>
            <param name="ep">predicate to apply to edge</param>
            <param name="vp">predicate to apply to edge source and target</param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.InEdge(QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Creates a predicate that check the edge and the edge source
            </summary>
            <param name="ep">edge predicate to apply to the edge</param>
            <param name="vp">vertex predicate to apply to the edge source</param>
            <returns>in-edge predicate</returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.OutEdge(QuickGraph.Concepts.Predicates.IEdgePredicate,QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Creates a predicate that check the edge and the edge target
            </summary>
            <param name="ep">edge predicate to apply to the edge</param>
            <param name="vp">vertex predicate to apply to the edge target</param>
            <returns>out-edge predicate</returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.IsAdjacent(QuickGraph.Concepts.IVertex)">
            <summary>
            Creates a predicate that checks wheter an edge is adjacent to a
            given vertex.
            </summary>
            <param name="v">vertex to test</param>
            <returns>is adjacent predicate</returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.IsInEdge(QuickGraph.Concepts.IVertex)">
            <summary>
            Creates a predicate that checks if an edge is an in-edge of 
            a vertex.
            </summary>
            <param name="v">vertex to check</param>
            <returns>in-edge predicate</returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.IsOutEge(QuickGraph.Concepts.IVertex)">
            <summary>
            Creates a predicate that checks if an edge is an out-edge of 
            a vertex.
            </summary>
            <param name="v">vertex to check</param>
            <returns>out-edge predicate</returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.Equal(QuickGraph.Concepts.IVertex)">
            <summary>
            Check if a vertex is equal to v
            </summary>
            <param name="v">vertex to test</param>
            <returns>predicate</returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.InCollection(QuickGraph.Concepts.Collections.IVertexCollection)">
            <summary>
            Check if vertex is in list
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.Not(QuickGraph.Concepts.Predicates.IVertexPredicate)">
            <summary>
            Negates a predicate
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Predicates.Preds.SourceVertex(QuickGraph.Concepts.Traversals.IBidirectionalGraph)">
            <summary>
            Source vertex prodicate
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="T:QuickGraph.Predicates.ResidualEdgePredicate">
            <summary>
            Predicate that test if an edge is residual
            </summary>
            <remarks>
            <para>
            Given a capacity map, the predicate returns true if the edge
            capacity is positive: <c>0 &lt; Capacities[e]</c>
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Predicates.ResidualEdgePredicate.#ctor(System.Collections.IDictionary)">
            <summary>
            Constructor.
            </summary>
            <param name="residualCapacities">Residual Edge capacities map</param>
            <exception cref="T:System.ArgumentNullException">residualCapacities is null</exception>
        </member>
        <member name="M:QuickGraph.Predicates.ResidualEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            Test if edge e has a positive residual capacity
            </summary>
            <param name="e">edge to test</param>
            <returns>0 &lt; ResidualCapacities[e]</returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:QuickGraph.Predicates.ResidualEdgePredicate.ResidualCapacities">
            <summary>
            Residual capacities map
            </summary>
        </member>
        <member name="T:QuickGraph.Predicates.ReversedResidualEdgePredicate">
            <summary>
            Predicate that test if an edge's reverse is residual
            </summary>
            <remarks>
            <para>
            Given a capacity map and reversed edge map, the predicate returns true if the 
            reversed edge's capacity is positive: <c>0 &lt; Capacities[ReversedEdges[e]]</c>
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Predicates.ReversedResidualEdgePredicate.#ctor(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Constructor.
            </summary>
            <param name="residualCapacities">Residual Edge capacities map</param>
            <param name="reversedEdges">Reversed Edge map</param>
            <exception cref="T:System.ArgumentNullException">residualCapacities is null</exception>
        </member>
        <member name="M:QuickGraph.Predicates.ReversedResidualEdgePredicate.Test(QuickGraph.Concepts.IEdge)">
            <summary>
            Test if edge e has a positive residual capacity
            </summary>
            <param name="e">edge to test</param>
            <returns>0 &lt; ResidualCapacities[e]</returns>
            <exception cref="T:System.ArgumentNullException">e is null</exception>
        </member>
        <member name="P:QuickGraph.Predicates.ReversedResidualEdgePredicate.ResidualCapacities">
            <summary>
            Residual capacities map
            </summary>
        </member>
        <member name="P:QuickGraph.Predicates.ReversedResidualEdgePredicate.ReversedEdges">
            <summary>
            Reversed edges map
            </summary>
        </member>
        <member name="T:QuickGraph.Predicates.SinkVertexPredicate">
            <summary>
            A predicate to test if a <see cref="T:QuickGraph.Concepts.IVertex"/> is a root vertex (no 
            in-edges).
            </summary>
            <remarks>
            This predicate can be used to iterate over the root vertices of a
            graph.
            </remarks>
        </member>
        <member name="M:QuickGraph.Predicates.SinkVertexPredicate.#ctor(QuickGraph.Concepts.Traversals.IImplicitGraph)">
            <summary>
            Create the predicate over <paramref name="graph"/>.
            </summary>
            <param name="graph">graph to visit</param>
        </member>
        <member name="M:QuickGraph.Predicates.SinkVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
            <summary>
            Tests if the vertex is a root
            </summary>
            <param name="v">vertex to test</param>
            <returns>true is the vertex has no in-edges, false otherwise</returns>
        </member>
        <member name="T:QuickGraph.Predicates.SourceVertexPredicate">
            <summary>
            A predicate to test if a <see cref="T:QuickGraph.Concepts.IVertex"/> is a root vertex (no 
            in-edges).
            </summary>
            <remarks>
            This predicate can be used to iterate over the root vertices of a
            graph.
            </remarks>
        </member>
        <member name="M:QuickGraph.Predicates.SourceVertexPredicate.#ctor(QuickGraph.Concepts.Traversals.IBidirectionalGraph)">
            <summary>
            Create the predicate over <paramref name="graph"/>.
            </summary>
            <param name="graph">graph to visit</param>
        </member>
        <member name="M:QuickGraph.Predicates.SourceVertexPredicate.Test(QuickGraph.Concepts.IVertex)">
            <summary>
            Tests if the vertex is a root
            </summary>
            <param name="v">vertex to test</param>
            <returns>true is the vertex has no in-edges, false otherwise</returns>
        </member>
        <member name="T:QuickGraph.Predicates.VertexEqualPredicate">
            <summary>
            Predicate that checks to two vertex are equal
            </summary>
        </member>
        <member name="M:QuickGraph.Predicates.VertexEqualPredicate.#ctor(QuickGraph.Concepts.IVertex)">
            <summary>
            Constructor
            </summary>
            <param name="u">reference vertex</param>
            <exception cref="T:System.ArgumentNullException">u is null</exception>
        </member>
        <member name="M:QuickGraph.Predicates.VertexEqualPredicate.Test(QuickGraph.Concepts.IVertex)">
            <summary>
            Test if v == u
            </summary>
            <param name="v">vertex to test</param>
            <returns>v == u</returns>
        </member>
        <member name="P:QuickGraph.Predicates.VertexEqualPredicate.ReferenceVertex">
            <summary>
            Reference vertex
            </summary>
        </member>
        <member name="T:QuickGraph.Providers.CustomEdgeProvider">
            <summary>
            Custom edge provider
            </summary>
        </member>
        <member name="M:QuickGraph.Providers.CustomEdgeProvider.ProvideEdge(QuickGraph.Vertex,QuickGraph.Vertex)">
            <summary>
            Creates a new edge
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Providers.CustomEdgeProvider.UpdateEdge(QuickGraph.CustomEdge)">
            <summary>
            Updates an edge that has not been created with the provider
            </summary>
            <param name="e">vertex to update</param>
        </member>
        <member name="M:QuickGraph.Providers.CustomEdgeProvider.QuickGraph#Concepts#Providers#IEdgeProvider#UpdateEdge(QuickGraph.Concepts.IEdge)">
            <summary>
            Updates vertex
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:QuickGraph.Providers.CustomEdgeProvider.EdgeType">
            <summary>
            Returns typeof(CustomEdge)
            </summary>
        </member>
        <member name="T:QuickGraph.Providers.CustomVertexProvider">
            <summary>
            Default custom vertex provider
            </summary>
        </member>
        <member name="M:QuickGraph.Providers.CustomVertexProvider.ProvideVertex">
            <summary>
            Creates a new vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Providers.CustomVertexProvider.UpdateVertex(QuickGraph.CustomVertex)">
            <summary>
            Updates a vertex that has not been created with the provider
            </summary>
            <param name="v">vertex to update</param>
        </member>
        <member name="M:QuickGraph.Providers.CustomVertexProvider.QuickGraph#Concepts#Providers#IVertexProvider#UpdateVertex(QuickGraph.Concepts.IVertex)">
            <summary>
            Updates vertex
            </summary>
            <param name="v"></param>
        </member>
        <member name="P:QuickGraph.Providers.CustomVertexProvider.VertexType">
            <summary>
            Returns typeof(CustomVertex)
            </summary>
        </member>
        <member name="T:QuickGraph.Providers.EdgeProvider">
            <summary>
            Default edge provider
            </summary>
        </member>
        <member name="M:QuickGraph.Providers.EdgeProvider.ProvideEdge(QuickGraph.Vertex,QuickGraph.Vertex)">
            <summary>
            Creates a new edge
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Providers.EdgeProvider.UpdateEdge(QuickGraph.Edge)">
            <summary>
            Updates an edge that has not been created with the provider
            </summary>
            <param name="e">edge to update</param>
        </member>
        <member name="M:QuickGraph.Providers.EdgeProvider.QuickGraph#Concepts#Providers#IEdgeProvider#UpdateEdge(QuickGraph.Concepts.IEdge)">
            <summary>
            Updates vertex
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:QuickGraph.Providers.EdgeProvider.EdgeType">
            <summary>
            Edge type.
            </summary>
        </member>
        <member name="T:QuickGraph.Providers.NamedEdgeProvider">
            <summary>
            Named edge provider
            </summary>
        </member>
        <member name="M:QuickGraph.Providers.NamedEdgeProvider.ProvideEdge(QuickGraph.Vertex,QuickGraph.Vertex)">
            <summary>
            Creates a new edge
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Providers.NamedEdgeProvider.UpdateEdge(QuickGraph.NamedEdge)">
            <summary>
            Updates an edge that has not been created with the provider
            </summary>
            <param name="e">edge to update</param>
        </member>
        <member name="M:QuickGraph.Providers.NamedEdgeProvider.QuickGraph#Concepts#Providers#IEdgeProvider#UpdateEdge(QuickGraph.Concepts.IEdge)">
            <summary>
            Updates vertex
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:QuickGraph.Providers.NamedEdgeProvider.EdgeType">
            <summary>
            Returns typeof(NamedEdge)
            </summary>
        </member>
        <member name="T:QuickGraph.Providers.NamedVertexProvider">
            <summary>
            Default custom vertex provider
            </summary>
        </member>
        <member name="M:QuickGraph.Providers.NamedVertexProvider.ProvideVertex">
            <summary>
            Creates a new vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Providers.NamedVertexProvider.UpdateVertex(QuickGraph.NamedVertex)">
            <summary>
            Updates a vertex that has not been created with the provider
            </summary>
            <param name="v">vertex to update</param>
        </member>
        <member name="M:QuickGraph.Providers.NamedVertexProvider.QuickGraph#Concepts#Providers#IVertexProvider#UpdateVertex(QuickGraph.Concepts.IVertex)">
            <summary>
            Updates vertex
            </summary>
            <param name="v"></param>
        </member>
        <member name="P:QuickGraph.Providers.NamedVertexProvider.VertexType">
            <summary>
            Returns typeof(NamedVertex)
            </summary>
        </member>
        <member name="T:QuickGraph.Providers.NamespaceDoc">
            <summary>
            The <b>QuickGraph.Providers</b> contains providers for the default
            vertex and edge implementations.
            </summary>
        </member>
        <member name="T:QuickGraph.Providers.TypedEdgeProvider">
            <summary>
            Default custom edge provider
            </summary>
        </member>
        <member name="M:QuickGraph.Providers.TypedEdgeProvider.ProvideEdge(QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Creates a new edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Providers.TypedEdgeProvider.UpdateEdge(QuickGraph.Concepts.IEdge)">
            <summary>
            Updates a edge that has not been created with the provider
            </summary>
            <param name="e">edge to update</param>
        </member>
        <member name="P:QuickGraph.Providers.TypedEdgeProvider.EdgeType">
            <summary>
            Returns typeof(CustomEdge)
            </summary>
        </member>
        <member name="T:QuickGraph.Providers.TypedVertexProvider">
            <summary>
            Default custom vertex provider
            </summary>
        </member>
        <member name="M:QuickGraph.Providers.TypedVertexProvider.ProvideVertex">
            <summary>
            Creates a new vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Providers.TypedVertexProvider.UpdateVertex(QuickGraph.Concepts.IVertex)">
            <summary>
            Updates a vertex that has not been created with the provider
            </summary>
            <param name="v">vertex to update</param>
        </member>
        <member name="P:QuickGraph.Providers.TypedVertexProvider.VertexType">
            <summary>
            Returns typeof(CustomVertex)
            </summary>
        </member>
        <member name="T:QuickGraph.Providers.VertexProvider">
            <summary>
            Vertex provider
            </summary>
        </member>
        <member name="M:QuickGraph.Providers.VertexProvider.ProvideVertex">
            <summary>
            Creates a new vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Providers.VertexProvider.QuickGraph#Concepts#Providers#IVertexProvider#ProvideVertex">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Providers.VertexProvider.UpdateVertex(QuickGraph.Vertex)">
            <summary>
            Updates a vertex that has not been created with the provider
            </summary>
            <param name="v">vertex to update</param>
        </member>
        <member name="M:QuickGraph.Providers.VertexProvider.QuickGraph#Concepts#Providers#IVertexProvider#UpdateVertex(QuickGraph.Concepts.IVertex)">
            <summary>
            Updates vertex
            </summary>
            <param name="v"></param>
        </member>
        <member name="P:QuickGraph.Providers.VertexProvider.VertexType">
            <summary>
            Vertex type.
            </summary>
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.DataExtensionType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.DataExtensionType._text">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.DataExtensionType.Text">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataExtensionType.Textcollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataExtensionType.Textcollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataExtensionType.Textcollection.AddString(System.String)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataExtensionType.Textcollection.ContainsString(System.String)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataExtensionType.Textcollection.RemoveString(System.String)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataExtensionType.Textcollection.ToString">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.DataExtensionType.Textcollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.DataType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.DataType._text">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.DataType._key">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.DataType.id">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.DataType.Key">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.DataType.ID">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.DataType.Text">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataType.Textcollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataType.Textcollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataType.Textcollection.AddString(System.String)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataType.Textcollection.ContainsString(System.String)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataType.Textcollection.RemoveString(System.String)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DataType.Textcollection.ToString">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.DataType.Textcollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.DefaultType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.DefaultType._text">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.DefaultType.Text">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DefaultType.Textcollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DefaultType.Textcollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DefaultType.Textcollection.AddString(System.String)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DefaultType.Textcollection.ContainsString(System.String)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DefaultType.Textcollection.RemoveString(System.String)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.DefaultType.Textcollection.ToString">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.DefaultType.Textcollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.EdgeType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EdgeType._directed">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EdgeType._data">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EdgeType._source">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EdgeType.id">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EdgeType._sourceport">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EdgeType._targetport">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EdgeType._directedspecified">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EdgeType._target">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EdgeType._graph">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EdgeType._desc">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EdgeType.Desc">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EdgeType.Data">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EdgeType.Graph">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EdgeType.ID">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EdgeType.Directed">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EdgeType.Directedspecified">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EdgeType.Source">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EdgeType.Target">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EdgeType.Sourceport">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EdgeType.Targetport">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.EdgeType.DataCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.EdgeType.DataCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.EdgeType.DataCollection.AddDataType(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.EdgeType.DataCollection.ContainsDataType(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.EdgeType.DataCollection.RemoveDataType(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EdgeType.DataCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.EndPointType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EndPointType._node">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EndPointType.id">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EndPointType._port">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EndPointType._desc">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EndPointType._type">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EndPointType.Desc">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EndPointType.ID">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EndPointType.Port">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EndPointType.Node">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.EndPointType.Type">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.EndPointTypeType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EndPointTypeType.IN">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EndPointTypeType.Out">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.EndPointTypeType.Undir">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.GraphEdgeDefaultType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.GraphEdgeDefaultType.Directed">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.GraphEdgeDefaultType.Undirected">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.GraphMltype">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.GraphMltype._key">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.GraphMltype._desc">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.GraphMltype._items">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.GraphMltype.Desc">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.GraphMltype.Key">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.GraphMltype.Items">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.ItemCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.ItemCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.ItemCollection.AddGraph(QuickGraph.Serialization.GraphML.GraphType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.ItemCollection.ContainsGraph(QuickGraph.Serialization.GraphML.GraphType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.ItemCollection.RemoveGraph(QuickGraph.Serialization.GraphML.GraphType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.ItemCollection.AddData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.ItemCollection.ContainsData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.ItemCollection.RemoveData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.GraphMltype.ItemCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.KeyCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.KeyCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.KeyCollection.AddKeyType(QuickGraph.Serialization.GraphML.KeyType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.KeyCollection.ContainsKeyType(QuickGraph.Serialization.GraphML.KeyType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphMltype.KeyCollection.RemoveKeyType(QuickGraph.Serialization.GraphML.KeyType)">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.GraphMltype.KeyCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.GraphType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.GraphType._items">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.GraphType._edgeDefault">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.GraphType._desc">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.GraphType.id">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.GraphType.Desc">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.GraphType.Items">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.GraphType.ID">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.GraphType.EdgeDefault">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.AddLocator(QuickGraph.Serialization.GraphML.LocatorType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.ContainsLocator(QuickGraph.Serialization.GraphML.LocatorType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.RemoveLocator(QuickGraph.Serialization.GraphML.LocatorType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.AddEdge(QuickGraph.Serialization.GraphML.EdgeType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.ContainsEdge(QuickGraph.Serialization.GraphML.EdgeType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.RemoveEdge(QuickGraph.Serialization.GraphML.EdgeType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.AddNode(QuickGraph.Serialization.GraphML.NodeType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.ContainsNode(QuickGraph.Serialization.GraphML.NodeType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.RemoveNode(QuickGraph.Serialization.GraphML.NodeType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.AddData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.ContainsData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.RemoveData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.AddHyperEdge(QuickGraph.Serialization.GraphML.HyperEdgeType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.ContainsHyperEdge(QuickGraph.Serialization.GraphML.HyperEdgeType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.RemoveHyperEdge(QuickGraph.Serialization.GraphML.HyperEdgeType)">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.GraphType.ItemCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.HyperEdgeType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.HyperEdgeType._items">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.HyperEdgeType._desc">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.HyperEdgeType.id">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.HyperEdgeType._graph">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.HyperEdgeType.Desc">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.HyperEdgeType.Items">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.HyperEdgeType.Graph">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.HyperEdgeType.ID">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.HyperEdgeType.ItemCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.HyperEdgeType.ItemCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.HyperEdgeType.ItemCollection.AddData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.HyperEdgeType.ItemCollection.ContainsData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.HyperEdgeType.ItemCollection.RemoveData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.HyperEdgeType.ItemCollection.AddEndPoint(QuickGraph.Serialization.GraphML.EndPointType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.HyperEdgeType.ItemCollection.ContainsEndPoint(QuickGraph.Serialization.GraphML.EndPointType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.HyperEdgeType.ItemCollection.RemoveEndPoint(QuickGraph.Serialization.GraphML.EndPointType)">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.HyperEdgeType.ItemCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.KeyForType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.KeyForType.All">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.KeyForType.Graph">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.KeyForType.Node">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.KeyForType.Edge">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.KeyForType.HyperEdge">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.KeyForType.Port">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.KeyForType.EndPoint">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.KeyType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.KeyType._default">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.KeyType.id">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.KeyType._desc">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.KeyType._for">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.KeyType.Desc">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.KeyType.Default">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.KeyType.ID">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.KeyType.For">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.LocatorType">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.NamespaceDoc">
            <summary>
            The <b>QuickGraph.Serialization.GraphML</b> contains the classes
            that map the GraphML schema.
            </summary>
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.NodeType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.NodeType._items">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.NodeType._desc">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.NodeType.id">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.NodeType.Desc">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.NodeType.Items">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.NodeType.ID">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.AddLocator(QuickGraph.Serialization.GraphML.LocatorType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.ContainsLocator(QuickGraph.Serialization.GraphML.LocatorType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.RemoveLocator(QuickGraph.Serialization.GraphML.LocatorType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.AddGraph(QuickGraph.Serialization.GraphML.GraphType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.ContainsGraph(QuickGraph.Serialization.GraphML.GraphType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.RemoveGraph(QuickGraph.Serialization.GraphML.GraphType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.AddData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.ContainsData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.RemoveData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.AddPort(QuickGraph.Serialization.GraphML.PortType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.ContainsPort(QuickGraph.Serialization.GraphML.PortType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.RemovePort(QuickGraph.Serialization.GraphML.PortType)">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.NodeType.ItemCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphML.PortType">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.PortType._items">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.PortType._name">
            <summary />
            <remarks />
        </member>
        <member name="F:QuickGraph.Serialization.GraphML.PortType._desc">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.PortType.Desc">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.PortType.Items">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.PortType.Name">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.PortType.ItemCollection.#ctor">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.PortType.ItemCollection.Add(System.Object)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.PortType.ItemCollection.AddPort(QuickGraph.Serialization.GraphML.PortType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.PortType.ItemCollection.ContainsPort(QuickGraph.Serialization.GraphML.PortType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.PortType.ItemCollection.RemovePort(QuickGraph.Serialization.GraphML.PortType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.PortType.ItemCollection.AddData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.PortType.ItemCollection.ContainsData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="M:QuickGraph.Serialization.GraphML.PortType.ItemCollection.RemoveData(QuickGraph.Serialization.GraphML.DataType)">
            <summary />
            <remarks />
        </member>
        <member name="P:QuickGraph.Serialization.GraphML.PortType.ItemCollection.Item(System.Int32)">
            <summary />
            <remarks />
        </member>
        <member name="T:QuickGraph.Serialization.GraphMLGraphSerializer">
            <summary>
            Graph serializer to the GraphML format.
            </summary>
            <remarks>
            <para>
            This object serializes outputs to the GraphML 
            (http://graphml.graphdrawing.org/) format.
            </para>
            </remarks>
            <example name="SaveGraphML">
<para>
The following example takes a graph and serializes it to GraphML format to the Console window.
All <see cref="T:QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph"/> instance are serializable 
(<see cref="!:Serialization.Representation.AdjacencyGraph"/> implements this type).
</para>
<code>
using System.Xml;
using QuickGraph.Serialization;
...

// create human readable xml writer
XmlTextWriter writer = new XmlTextWriter(Console.Out);
writer.Formatting = Formatting.Indented;

// the graph to serialize
ISerializableVertexAndEdgeListGraph g = ...;

// create serializer
GraphMLGraphSerializer ser = new GraphMLGraphSerializer();
// serialize graph
ser.Serialize(writer,g);
</code>
</example>
        </member>
        <member name="M:QuickGraph.Serialization.GraphMLGraphSerializer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:QuickGraph.Serialization.GraphMLGraphSerializer.Serialize(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
            <summary>
            Serializes g to xml
            </summary>
            <param name="writer">xml writer</param>
            <param name="g">graph to serialize</param>
            <exception cref="T:System.ArgumentNullException">writer or g are null</exception>
            <exception cref="T:System.ArgumentException">g vertex or edge does not
            implement <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializable"/>.
            </exception>
        </member>
        <member name="M:QuickGraph.Serialization.GraphMLGraphSerializer.Serialize(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph,QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph)">
            <summary>
            Serializes the filtered graph g to xml
            </summary>
            <param name="writer">xml writer</param>
            <param name="baseGraph">"base" graph of g</param>
            <param name="g">graph to serialize</param>
            <exception cref="T:System.ArgumentNullException">writer or g are null</exception>
            <exception cref="T:System.ArgumentException">g vertex or edge does not
            implement <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializable"/>.
            </exception>
        </member>
        <member name="M:QuickGraph.Serialization.GraphMLGraphSerializer.FormatID(QuickGraph.Concepts.IVertex)">
            <summary>
            Formats the vertex ID number
            </summary>
            <param name="v">vertex</param>
            <returns>v.ID formatted</returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphMLGraphSerializer.FormatID(QuickGraph.Concepts.IEdge)">
            <summary>
            Formats the edge ID number
            </summary>
            <param name="e">edge</param>
            <returns>e.ID formatted</returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphMLGraphSerializer.GetTypeQualifiedName(System.Object)">
            <summary>
            Returns qualifed type name of o
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphMLGraphSerializer.GetTypeQualifiedName(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphMLGraphSerializer.CreateGraph(System.Type,System.Type,System.Type,QuickGraph.Serialization.GraphML.GraphEdgeDefaultType,System.Boolean)">
            <summary>
            
            </summary>
            <param name="graphType"></param>
            <param name="vertexProviderType"></param>
            <param name="edgeProviderType"></param>
            <param name="directed"></param>
            <param name="allowParallelEdges"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Serialization.GraphMLGraphSerializer.CreatedVertices">
            <summary>
            Created vertices table
            </summary>
        </member>
        <member name="P:QuickGraph.Serialization.GraphMLGraphSerializer.CreatedEdges">
            <summary>
            Created vertices table
            </summary>
        </member>
        <member name="T:QuickGraph.Serialization.GraphSerializationInfo">
            <summary>
            A data holder class
            </summary>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializationInfo.#ctor(System.Boolean)">
            <summary>
            Creates a new data holder class.
            </summary>
            <param name="isSerializing">true if it is used for serialization, 
            false otherwize</param>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializationInfo.Add(System.String,System.Object)">
            <summary>
            Adds a new key-value pair
            </summary>
            <param name="key">value identifier</param>
            <param name="value">value</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializationInfo.Contains(System.String)">
            <summary>
            Gets a value indicating if the key is in the data entries.
            </summary>
            <param name="key">key to test</param>
            <returns>
            true if key is in the data collection, false otherwise
            </returns>
        </member>
        <member name="P:QuickGraph.Serialization.GraphSerializationInfo.IsSerializing">
            <summary>
            True if serializing
            </summary>
        </member>
        <member name="P:QuickGraph.Serialization.GraphSerializationInfo.Count">
            <summary>
            Number of key-value pair in the data bag.
            </summary>
        </member>
        <member name="P:QuickGraph.Serialization.GraphSerializationInfo.Item(System.String)">
            <summary>
            Gets or sets a data entry in the graph info collection
            </summary>
            <exception cref="T:System.InvalidOperationException">
            set property,set a value while the graph info is deserializing
            </exception>
            <exception cref="T:System.MissingFieldException">
            get property, the requested key is not found
            </exception>
        </member>
        <member name="T:QuickGraph.Serialization.GraphSerializer">
            <summary>
            Base class for Graph serializers.
            </summary>
            <example>
            This example takes an AdjacencyGraph and serializes it to GraphML
            format:
            <code>
            // getting xml writer
            XmlTextWriter writer = new XmlTextWriter(Console.Out);
            writer.Formatting = Formatting.Indented;
            // gettin graph
            AdjacencyGraph g = ...;
            GraphSerializer ser = new GraphMlSerializer();
            // serialize to GraphML
            ser.Serialize(writer,g);
            </code>
            </example>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.Serialize(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
            <summary>
            Serializes g to xml
            </summary>
            <param name="writer">xml writer</param>
            <param name="g">graph to serialize</param>
            <exception cref="T:System.ArgumentNullException">writer or g are null</exception>
            <exception cref="T:System.ArgumentException">g vertex or edge does not
            implement <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializable"/>.
            </exception>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.Serialize(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph,QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph)">
            <summary>
            Serializes the filtered graph g to xml
            </summary>
            <param name="writer">xml writer</param>
            <param name="baseGraph">"base" graph of g</param>
            <param name="g">graph to serialize</param>
            <exception cref="T:System.ArgumentNullException">writer or g are null</exception>
            <exception cref="T:System.ArgumentException">g vertex or edge does not
            implement <see cref="T:QuickGraph.Concepts.Serialization.IGraphSerializable"/>.
            </exception>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserializes data from Xml stream.
            </summary>
            <param name="reader">xml stream</param>
            <returns>deserialized data</returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.WriteGraphElem(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph,QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph)">
            <summary>
            Create the graph element and stores graph level data.
            </summary>
            <param name="writer">xml writer</param>
            <param name="baseGraph">"base" graph of g</param>
            <param name="g">graph to serialize</param>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.WriteEndGraphElem(System.Xml.XmlWriter)">
            <summary>
            Closes the graph element.
            </summary>
            <param name="writer">xml writer</param>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.WriteVertexElem(System.Xml.XmlWriter,QuickGraph.Concepts.IVertex,QuickGraph.Serialization.GraphSerializationInfo)">
            <summary>
            Writes a vertex element and it's custom data stored in info.
            </summary>
            <param name="writer">xml writer</param>
            <param name="v">vertex to store</param>
            <param name="info">vertex custom data</param>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.WriteEdgeElem(System.Xml.XmlWriter,QuickGraph.Concepts.IEdge,QuickGraph.Serialization.GraphSerializationInfo)">
            <summary>
            Writes a vertex element and it's custom data stored in info.
            </summary>
            <param name="writer">xml writer</param>
            <param name="e">edge to store</param>
            <param name="info">edge custom data</param>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.ReadGraphElem(System.Xml.XmlReader)">
            <summary>
            Reads graph data and creates new graph instance
            </summary>
            <param name="reader">xml reader opened on graph data</param>
            <returns>created graph instance</returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.ReadEndGraphElem(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.ReadVertexOrEdge(System.Xml.XmlReader,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
            <summary>
            Reads vertex or edge data
            </summary>
            <param name="reader"></param>
            <param name="g"></param>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.FormatID(QuickGraph.Concepts.IEdge)">
            <summary>
            Formats the edge ID number
            </summary>
            <param name="e">edge</param>
            <returns>e.ID formatted</returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.ParseVertexID(System.String)">
            <summary>
            Parses vertex id of the form 'vdd' where dd is the id number
            </summary>
            <param name="id">id identifier</param>
            <returns>id number</returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.ParseEdgeID(System.String)">
            <summary>
            Parses edge id of the form 'edd' where dd is the id number
            </summary>
            <param name="id">id identifier</param>
            <returns>id number</returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.FormatID(QuickGraph.Concepts.IVertex)">
            <summary>
            Formats the vertex ID number
            </summary>
            <param name="v">vertex</param>
            <returns>v.ID formatted</returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.GetTypeQualifiedName(System.Object)">
            <summary>
            Returns qualifed type name of o
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.GetTypeQualifiedName(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.MoveToAttribute(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.MoveNextElement(System.Xml.XmlReader)">
            <summary>
            Moves reader to element with name = name
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.MoveToElement(System.Xml.XmlReader,System.String)">
            <summary>
            Moves reader to element with name = name
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.MoveToElement(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <param name="name2"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.MovePastEndElement(System.Xml.XmlReader,System.String)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
        </member>
        <member name="M:QuickGraph.Serialization.GraphSerializer.CreateGraph(System.Type,System.Type,System.Type,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="graphType"></param>
            <param name="vertexProviderType"></param>
            <param name="edgeProviderType"></param>
            <param name="directed"></param>
            <param name="allowParallelEdges"></param>
            <returns></returns>
        </member>
        <member name="P:QuickGraph.Serialization.GraphSerializer.CreatedVertices">
            <summary>
            Created vertices table
            </summary>
        </member>
        <member name="P:QuickGraph.Serialization.GraphSerializer.CreatedEdges">
            <summary>
            Created vertices table
            </summary>
        </member>
        <member name="T:QuickGraph.Serialization.GxlGraphSerializer">
            <summary>
            Graph serializer to the GXL format.
            </summary>
            <remarks>
            <para>
            This object serializes outputs to the GXL (http://www.gupro.de/GXL/) 
            format.
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Serialization.GxlGraphSerializer.WriteGraphElem(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph,QuickGraph.Concepts.Traversals.IVertexAndEdgeListGraph)">
            <summary>
            Create the graph element and stores graph level data.
            </summary>
            <param name="writer">xml writer</param>
            <param name="baseGraph">"base" graph of g</param>
            <param name="g">graph to serialize</param>		
        </member>
        <member name="M:QuickGraph.Serialization.GxlGraphSerializer.WriteEndGraphElem(System.Xml.XmlWriter)">
            <summary>
            Closes the graph element.
            </summary>
            <param name="writer">xml writer</param>
        </member>
        <member name="M:QuickGraph.Serialization.GxlGraphSerializer.WriteVertexElem(System.Xml.XmlWriter,QuickGraph.Concepts.IVertex,QuickGraph.Serialization.GraphSerializationInfo)">
            <summary>
            Writes a vertex element and it's custom data stored in info.
            </summary>
            <param name="writer">xml writer</param>
            <param name="v">vertex to store</param>
            <param name="info">vertex custom data</param>
        </member>
        <member name="M:QuickGraph.Serialization.GxlGraphSerializer.WriteEdgeElem(System.Xml.XmlWriter,QuickGraph.Concepts.IEdge,QuickGraph.Serialization.GraphSerializationInfo)">
            <summary>
            Writes a vertex element and it's custom data stored in info.
            </summary>
            <param name="writer">xml writer</param>
            <param name="e">edge to store</param>
            <param name="info">edge custom data</param>
        </member>
        <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadGraphElem(System.Xml.XmlReader)">
            <summary>
            Reads graph data and creates new graph instance
            </summary>
            <param name="reader">xml reader opened on graph data</param>
            <returns>created graph instance</returns>
        </member>
        <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadEndGraphElem(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadVertexOrEdge(System.Xml.XmlReader,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
            <summary>
            Reads vertex or edge data
            </summary>
            <param name="reader"></param>
            <param name="g"></param>
        </member>
        <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadVertex(System.Xml.XmlReader,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="g"></param>
        </member>
        <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadEdge(System.Xml.XmlReader,QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="g"></param>
        </member>
        <member name="M:QuickGraph.Serialization.GxlGraphSerializer.WriteInfo(System.Xml.XmlWriter,QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Writes custom info to GraphMl
            </summary>
            <param name="writer">xml writer</param>
            <param name="info">custom data</param>
        </member>
        <member name="M:QuickGraph.Serialization.GxlGraphSerializer.ReadInfo(System.Xml.XmlReader)">
            <summary>
            Reads custom info from GraphMl
            </summary>
            <param name="reader">xml reader</param>
            <returns>custom data</returns>
        </member>
        <member name="T:QuickGraph.Serialization.SerializableEdge">
            <summary>
            Summary description for SerializableEdge.
            </summary>
        </member>
        <member name="M:QuickGraph.Serialization.SerializableEdge.#ctor(System.Int32,QuickGraph.Concepts.IVertex,QuickGraph.Concepts.IVertex)">
            <summary>
            Default constructor
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:QuickGraph.Serialization.SerializableEdge.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Adds nothing to serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is not serializing</exception>
        </member>
        <member name="M:QuickGraph.Serialization.SerializableEdge.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Reads no data from serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is serializing</exception>
        </member>
        <member name="P:QuickGraph.Serialization.SerializableEdge.Entries">
            <summary>
            Gets the dictionary of key-and-value pairs
            </summary>
            <value>
            Data entries
            </value>
        </member>
        <member name="T:QuickGraph.Serialization.SerializableVertex">
            <summary>
            Summary description for SerializableVertex.
            </summary>
        </member>
        <member name="M:QuickGraph.Serialization.SerializableVertex.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:QuickGraph.Serialization.SerializableVertex.WriteGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Adds nothing to serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is not serializing</exception>
        </member>
        <member name="M:QuickGraph.Serialization.SerializableVertex.ReadGraphData(QuickGraph.Concepts.Serialization.IGraphSerializationInfo)">
            <summary>
            Reads no data from serialization info
            </summary>
            <param name="info">data holder</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
            <exception cref="T:System.ArgumentException">info is serializing</exception>
        </member>
        <member name="P:QuickGraph.Serialization.SerializableVertex.Entries">
            <summary>
            Gets the dictionary of key-and-value pairs
            </summary>
            <value>
            Data entries
            </value>
        </member>
        <member name="T:QuickGraph.Serialization.XmlGraphSerializer">
            <summary>
            A wrapper for serializings graphs
            </summary>
            <remarks>
            <para>
            This class lets you serialize to xml your graphs, even if you are using
            custom vertex and edges.
            </para>
            <para>
            </para>
            </remarks>
            <example>
            In this example, a AdjacencyGraph is created with
            custom providers. It is serialized and deserialized to xml:
            <code>
            AdjacencyGraph g = new AdjacencyGraph(
                new NamedVertexProvider(),
                new NamedEdgeProvider(),
                true
                );
            	
            NamedEdge u = (NamedVertex)Graph.AddVertex(); u.Name = "u";
            NamedEdge v = (NamedVertex)Graph.AddVertex(); v.Name = "v";
            NamedEdge w = (NamedVertex)Graph.AddVertex(); w.Name = "w";
            
            NamedEdge uv = (NamedEdge)Graph.AddEdge(u,v); uv.Name = "uv";
            NamedEdge uw = (NamedEdge)Graph.AddEdge(u,w); uw.Name = "uw";
            
            StringWriter sw = new StringWriter();
            XmlTextWriter writer = new XmlTextWriter(sw);
            writer.Formatting = Formatting.Indented;
            
            GraphSerializer ser = new GraphSerializer(Graph);
            ser.WriteXml(writer);
            
            Console.WriteLine(sw.ToString());
            
            StringReader sr = new StringReader(sw.ToString());
            XmlTextReader reader = new XmlTextReader(sr);
            ser.ReadXml(reader);
            
            sw = new StringWriter();
            writer = new XmlTextWriter(sw);
            writer.Formatting = Formatting.Indented;
            ser.WriteXml(writer);
            Console.WriteLine(sw.ToString());
            </code>
            </example>
        </member>
        <member name="M:QuickGraph.Serialization.XmlGraphSerializer.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:QuickGraph.Serialization.XmlGraphSerializer.#ctor(QuickGraph.Concepts.Serialization.ISerializableVertexAndEdgeListGraph)">
            <summary>
            Constructs a serializer around g
            </summary>
            <param name="g">graph to serialize</param>
            <exception cref="T:System.ArgumentNullException">g is null</exception>
        </member>
        <member name="M:QuickGraph.Serialization.XmlGraphSerializer.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes graph to xml. <see cref="M:QuickGraph.Serialization.XmlGraphSerializer.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:QuickGraph.Serialization.XmlGraphSerializer.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the graph to xml
            </summary>
            <param name="writer">opened xml writer</param>
            <remarks>
            <para>
            The edge and vertex class must be serializable.
            </para>
            </remarks>
        </member>
        <member name="M:QuickGraph.Serialization.XmlGraphSerializer.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads graph data from Xml and create the graph object.
            </summary>
            <remarks>
            <para>
            Deserializes a graph from Xml.
            </para>
            </remarks>
            <param name="reader">opened xml reader</param>
            <returns>deserialized graph</returns>
        </member>
        <member name="M:QuickGraph.Serialization.XmlGraphSerializer.GetTypeQualifiedName(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:QuickGraph.Serialization.XmlGraphSerializer.MoveToAttribute(System.Xml.XmlReader,System.String)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
        </member>
        <member name="M:QuickGraph.Serialization.XmlGraphSerializer.ReadGraphXml(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:QuickGraph.Serialization.XmlGraphSerializer.Graph">
            <summary>
            Serialized graph
            </summary>
        </member>
    </members>
</doc>
